/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Client/APIClient.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol APIClient {
    5|       |
    6|       |    static func setAPIKey(_ apiKey: String)
    7|       |
    8|       |    func get<Response: Decodable>(path: URL, httpHeaders: [String: String]?) -> AnyPublisher<Response, TMDbError>
    9|       |
   10|       |}
   11|       |
   12|       |extension APIClient {
   13|       |
   14|      0|    func get<Response: Decodable>(path: URL) -> AnyPublisher<Response, TMDbError> {
   15|      0|        get(path: path, httpHeaders: nil)
   16|      0|    }
   17|       |
   18|       |}
   19|       |
   20|       |extension APIClient {
   21|       |
   22|       |    func get<Response: Decodable>(endpoint: Endpoint,
   23|     13|                                  httpHeaders: [String: String]? = nil) -> AnyPublisher<Response, TMDbError> {
   24|     13|        get(path: endpoint.url, httpHeaders: httpHeaders)
   25|     13|    }
   26|       |
   27|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Client/TMDbAPIClient.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbAPIClient: APIClient {
    5|       |
    6|       |    private static let baseURL = URL(string: "https://api.themoviedb.org/3")!
    7|       |
    8|       |    private let urlSession: URLSession
    9|       |    private let jsonDecoder: JSONDecoder
   10|       |
   11|       |    private(set) var apiKey: String = ""
   12|       |
   13|       |    public static let shared = TMDbAPIClient()
   14|       |
   15|      0|    public static func setAPIKey(_ apiKey: String) {
   16|      0|        shared.apiKey = apiKey
   17|      0|    }
   18|       |
   19|       |    init(urlSession: URLSession = URLSession(configuration: URLSessionConfiguration.default),
   20|      0|         jsonDecoder: JSONDecoder = .theMovieDatabase) {
   21|      0|        self.urlSession = urlSession
   22|      0|        self.jsonDecoder = jsonDecoder
   23|      0|    }
   24|       |
   25|       |}
   26|       |
   27|       |extension TMDbAPIClient {
   28|       |
   29|       |    public func get<Response: Decodable>(path: URL,
   30|      0|                                         httpHeaders: [String: String]? = nil) -> AnyPublisher<Response, TMDbError> {
   31|      0|        let url = urlFromPath(path)
   32|      0|        var urlRequest = URLRequest(url: url)
   33|      0|
   34|      0|        urlRequest.addValue("application/json", forHTTPHeaderField: "Accept")
   35|      0|        httpHeaders?.forEach { (key: String, value: String) in
   36|      0|            urlRequest.addValue(value, forHTTPHeaderField: key)
   37|      0|        }
   38|      0|
   39|      0|        return urlSession.dataTaskPublisher(for: urlRequest)
   40|      0|            .mapTMDbError()
   41|      0|            .mapResponse(to: Response.self, decoder: jsonDecoder)
   42|      0|            .eraseToAnyPublisher()
   43|      0|    }
   44|       |
   45|       |}
   46|       |
   47|       |extension TMDbAPIClient {
   48|       |
   49|      0|    private func urlFromPath(_ path: URL) -> URL {
   50|      0|        guard var urlComponents = URLComponents(url: path, resolvingAgainstBaseURL: true) else {
   51|      0|            return path
   52|      0|        }
   53|      0|
   54|      0|        urlComponents.scheme = Self.baseURL.scheme
   55|      0|        urlComponents.host = Self.baseURL.host
   56|      0|        urlComponents.path = Self.baseURL.path + "\(urlComponents.path)"
   57|      0|
   58|      0|        return urlComponents.url!
   59|      0|            .appendingAPIKey(apiKey)
   60|      0|    }
   61|       |
   62|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Extensions/DateFormatter+TMDb.swift:
    1|       |import Foundation
    2|       |
    3|       |extension DateFormatter {
    4|       |
    5|    117|    static var theMovieDatabase: DateFormatter {
    6|    117|        let dateFormatter = DateFormatter()
    7|    117|        dateFormatter.dateFormat = "yyyy-MM-dd"
    8|    117|        return dateFormatter
    9|    117|    }
   10|       |
   11|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Extensions/JSONDecoder+TMDb.swift:
    1|       |import Foundation
    2|       |
    3|       |extension JSONDecoder {
    4|       |
    5|     36|    static var theMovieDatabase: JSONDecoder {
    6|     36|        let decoder = JSONDecoder()
    7|     36|        decoder.keyDecodingStrategy = .convertFromSnakeCase
    8|     36|        decoder.dateDecodingStrategy = .formatted(.theMovieDatabase)
    9|     36|        return decoder
   10|     36|    }
   11|       |
   12|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Extensions/Publisher+Extensions.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |extension URLSession.DataTaskPublisher {
    5|       |
    6|      0|    func mapTMDbError() -> AnyPublisher<Output, TMDbError> {
    7|      0|        self
    8|      0|            .mapError { .network($0) }
    9|      0|            .flatMap { (data, response) -> AnyPublisher<Output, TMDbError> in
   10|      0|                let statusCode = (response as? HTTPURLResponse)?.statusCode ?? -1
   11|      0|                guard statusCode != 200 else {
   12|      0|                    return Just((data, response))
   13|      0|                        .setFailureType(to: TMDbError.self)
   14|      0|                        .eraseToAnyPublisher()
   15|      0|                }
   16|      0|
   17|      0|                let error: TMDbError = {
   18|      0|                    switch statusCode {
   19|      0|                    case 401:
   20|      0|                        return .unauthorized
   21|      0|
   22|      0|                    case 404:
   23|      0|                        return .notFound
   24|      0|
   25|      0|                    default:
   26|      0|                        return .unknown
   27|      0|                    }
   28|      0|                }()
   29|      0|
   30|      0|                return Fail(outputType: Output.self, failure: error)
   31|      0|                    .eraseToAnyPublisher()
   32|      0|            }
   33|      0|            .eraseToAnyPublisher()
   34|      0|    }
   35|       |
   36|       |}
   37|       |
   38|       |extension Publisher where Output == URLSession.DataTaskPublisher.Output {
   39|       |
   40|       |    func mapResponse<Output: Decodable>(to outputType: Output.Type,
   41|      0|                                        decoder: JSONDecoder) -> AnyPublisher<Output, TMDbError> {
   42|      0|        self
   43|      0|            .map { $0.data }
   44|      0|            .decode(type: outputType, decoder: decoder)
   45|      0|            .mapError {
   46|      0|                .decode($0)
   47|      0|            }
   48|      0|            .eraseToAnyPublisher()
   49|      0|    }
   50|       |
   51|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Extensions/URL+QueryItem.swift:
    1|       |import Foundation
    2|       |
    3|       |extension URL {
    4|       |
    5|     46|    func appendingPathComponent(_ value: Int) -> Self {
    6|     46|        appendingPathComponent(String(value))
    7|     46|    }
    8|       |
    9|     69|    func appendingQueryItem(name: String, value: CustomStringConvertible) -> Self {
   10|     69|        var urlComponents = URLComponents(url: self, resolvingAgainstBaseURL: false)!
   11|     69|        var queryItems = urlComponents.queryItems ?? []
   12|     69|        queryItems.append(URLQueryItem(name: name, value: value.description))
   13|     69|        urlComponents.queryItems = queryItems
   14|     69|        return urlComponents.url!
   15|     69|    }
   16|       |
   17|       |}
   18|       |
   19|       |extension URL {
   20|       |
   21|      2|    func appendingAPIKey(_ apiKey: String) -> Self {
   22|      2|        appendingQueryItem(name: "api_key", value: apiKey)
   23|      2|    }
   24|       |
   25|     77|    func appendingPage(_ page: Int?) -> Self {
   26|     77|        guard var page = page else {
   27|     43|            return self
   28|     43|        }
   29|     34|
   30|     34|        page = max(page, 1)
   31|     34|        page = min(page, 1000)
   32|     34|
   33|     34|        return appendingQueryItem(name: "page", value: page)
   34|     77|    }
   35|       |
   36|      8|    func appendingYear(_ year: Int?) -> Self {
   37|      8|        guard let year = year else {
   38|      4|            return self
   39|      4|        }
   40|      4|
   41|      4|        return appendingQueryItem(name: "year", value: year)
   42|      8|    }
   43|       |
   44|      8|    func appendingFirstAirDateYear(_ year: Int?) -> Self {
   45|      8|        guard let year = year else {
   46|      4|            return self
   47|      4|        }
   48|      4|
   49|      4|        return appendingQueryItem(name: "first_air_date_year", value: year)
   50|      8|    }
   51|       |
   52|     12|    func appendingWithPeople(_ withPeople: [Person.ID]?) -> Self {
   53|     12|        guard let withPeople = withPeople else {
   54|      7|            return self
   55|      7|        }
   56|      5|
   57|      5|        let value = withPeople
   58|     10|            .map(String.init)
   59|      5|            .joined(separator: ",")
   60|      5|
   61|      5|        return appendingQueryItem(name: "with_people", value: value)
   62|     12|    }
   63|       |
   64|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/APIConfiguration.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct APIConfiguration: Decodable, Equatable {
    4|       |
    5|       |    public let images: ImagesConfiguration
    6|       |    public let changeKeys: [String]
    7|       |
    8|      2|    public init(images: ImagesConfiguration, changeKeys: [String]) {
    9|      2|        self.images = images
   10|      2|        self.changeKeys = changeKeys
   11|      2|    }
   12|       |
   13|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/CastMember.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct CastMember: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let castID: Int?
    7|       |    public let creditID: String
    8|       |    public let name: String
    9|       |    public let character: String
   10|       |    public let gender: Gender?
   11|       |    public let profilePath: URL?
   12|       |    public let order: Int
   13|       |
   14|       |    public init(id: Int, castID: Int? = nil, creditID: String, name: String, character: String, gender: Gender? = nil,
   15|      6|                profilePath: URL? = nil, order: Int) {
   16|      6|        self.id = id
   17|      6|        self.castID = castID
   18|      6|        self.creditID = creditID
   19|      6|        self.name = name
   20|      6|        self.character = character
   21|      6|        self.gender = gender
   22|      6|        self.profilePath = profilePath
   23|      6|        self.order = order
   24|      6|    }
   25|       |
   26|       |}
   27|       |
   28|       |extension CastMember {
   29|       |
   30|       |    private enum CodingKeys: String, CodingKey {
   31|       |        case id
   32|       |        case castID = "castId"
   33|       |        case creditID = "creditId"
   34|       |        case name
   35|       |        case character
   36|       |        case gender
   37|       |        case profilePath
   38|       |        case order
   39|       |    }
   40|       |
   41|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Certification.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Certification: Identifiable, Decodable, Equatable {
    4|       |
    5|      1|    public var id: String {
    6|      1|        code
    7|      1|    }
    8|       |
    9|       |    public let code: String
   10|       |    public let meaning: String
   11|       |    public let order: Int
   12|       |
   13|       |}
   14|       |
   15|       |extension Certification {
   16|       |
   17|       |    private enum CodingKeys: String, CodingKey {
   18|       |        case code = "certification"
   19|       |        case meaning
   20|       |        case order
   21|       |    }
   22|       |
   23|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Certifications.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Certifications: Decodable, Equatable {
    4|       |
    5|       |    public let certifications: [String: [Certification]]
    6|       |
    7|      1|    public init(certifications: [String: [Certification]]) {
    8|      1|        self.certifications = certifications
    9|      1|    }
   10|       |
   11|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/CrewMember.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct CrewMember: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let creditID: String
    7|       |    public let name: String
    8|       |    public let job: String
    9|       |    public let department: String
   10|       |    public let gender: Gender?
   11|       |    public let profilePath: URL?
   12|       |
   13|       |    public init(id: Int, creditID: String, name: String, job: String, department: String, gender: Gender? = nil,
   14|      5|                profilePath: URL? = nil) {
   15|      5|        self.id = id
   16|      5|        self.creditID = creditID
   17|      5|        self.name = name
   18|      5|        self.job = job
   19|      5|        self.department = department
   20|      5|        self.gender = gender
   21|      5|        self.profilePath = profilePath
   22|      5|    }
   23|       |
   24|       |}
   25|       |
   26|       |extension CrewMember {
   27|       |
   28|       |    private enum CodingKeys: String, CodingKey {
   29|       |        case id
   30|       |        case creditID = "creditId"
   31|       |        case name
   32|       |        case job
   33|       |        case department
   34|       |        case gender
   35|       |        case profilePath
   36|       |    }
   37|       |
   38|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Genre.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Genre: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |
    8|     17|    public init(id: Int, name: String) {
    9|     17|        self.id = id
   10|     17|        self.name = name
   11|     17|    }
   12|       |
   13|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/ImageCollection.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct ImageCollection: Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let posters: [ImageMetadata]
    7|       |    public let backdrops: [ImageMetadata]
    8|       |
    9|      2|    public init(id: Int, posters: [ImageMetadata], backdrops: [ImageMetadata]) {
   10|      2|        self.id = id
   11|      2|        self.posters = posters
   12|      2|        self.backdrops = backdrops
   13|      2|    }
   14|       |
   15|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/ImageMetadata.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct ImageMetadata: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let filePath: URL
    6|       |    public let width: Int
    7|       |    public let height: Int
    8|       |
    9|      1|    public var id: URL {
   10|      1|        filePath
   11|      1|    }
   12|       |
   13|      8|    public init(filePath: URL, width: Int, height: Int) {
   14|      8|        self.filePath = filePath
   15|      8|        self.width = width
   16|      8|        self.height = height
   17|      8|    }
   18|       |
   19|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/ImagesConfiguration.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct ImagesConfiguration: Decodable, Equatable {
    4|       |
    5|       |    public let baseUrl: URL
    6|       |    public let secureBaseUrl: URL
    7|       |    public let backdropSizes: [String]
    8|       |    public let logoSizes: [String]
    9|       |    public let posterSizes: [String]
   10|       |    public let profileSizes: [String]
   11|       |    public let stillSizes: [String]
   12|       |
   13|       |    public init(baseUrl: URL, secureBaseUrl: URL, backdropSizes: [String], logoSizes: [String], posterSizes: [String],
   14|      3|                profileSizes: [String], stillSizes: [String]) {
   15|      3|        self.baseUrl = baseUrl
   16|      3|        self.secureBaseUrl = secureBaseUrl
   17|      3|        self.backdropSizes = backdropSizes
   18|      3|        self.logoSizes = logoSizes
   19|      3|        self.posterSizes = posterSizes
   20|      3|        self.profileSizes = profileSizes
   21|      3|        self.stillSizes = stillSizes
   22|      3|    }
   23|       |
   24|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Media.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum Media: Identifiable, Equatable {
    4|       |
    5|      3|    public var id: Int {
    6|      3|        switch self {
    7|      3|        case .movie(let movie):
    8|      1|            return movie.id
    9|      3|
   10|      3|        case .tvShow(let tvShow):
   11|      1|            return tvShow.id
   12|      3|
   13|      3|        case .person(let person):
   14|      1|            return person.id
   15|      3|        }
   16|      3|    }
   17|       |
   18|       |    case movie(Movie)
   19|       |    case tvShow(TVShow)
   20|       |    case person(Person)
   21|       |
   22|       |}
   23|       |
   24|       |extension Media: Decodable {
   25|       |
   26|       |    private enum CodingKeys: String, CodingKey {
   27|       |        case mediaType
   28|       |    }
   29|       |
   30|       |    private enum MediaType: String, Decodable, Equatable {
   31|       |        case movie
   32|       |        case tvShow = "tv"
   33|       |        case person
   34|       |    }
   35|       |
   36|      6|    public init(from decoder: Decoder) throws {
   37|      6|        let container = try decoder.container(keyedBy: CodingKeys.self)
   38|      6|        let mediaType = try container.decode(MediaType.self, forKey: .mediaType)
   39|      6|
   40|      6|        switch mediaType {
   41|      6|        case .movie:
   42|      2|            self = .movie(try Movie(from: decoder))
   43|      6|
   44|      6|        case .tvShow:
   45|      2|            self = .tvShow(try TVShow(from: decoder))
   46|      6|
   47|      6|        case .person:
   48|      2|            self = .person(try Person(from: decoder))
   49|      6|        }
   50|      6|    }
   51|       |
   52|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Movie.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Movie: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let title: String
    7|       |    public let tagline: String?
    8|       |    public let originalTitle: String?
    9|       |    public let originalLanguage: String?
   10|       |    public let overview: String?
   11|       |    public let runtime: Int?
   12|       |    public let genres: [Genre]?
   13|       |    public let posterPath: URL?
   14|       |    public let backdropPath: URL?
   15|       |    public let budget: Float?
   16|       |    public let revenue: Double?
   17|       |    public let imdbID: String?
   18|       |    public let status: Status?
   19|       |    public let productionCompanies: [ProductionCompany]?
   20|       |    public let productionCountries: [ProductionCountry]?
   21|       |    public let spokenLanguages: [SpokenLanguage]?
   22|       |    public let popularity: Float?
   23|       |    public let voteAverage: Float?
   24|       |    public let voteCount: Int?
   25|       |    public let video: Bool?
   26|       |    public let adult: Bool?
   27|       |
   28|       |    private let releaseDateString: String?
   29|       |    private let homepage: String?
   30|       |
   31|       |    public init(id: Int, title: String, tagline: String? = nil, originalTitle: String? = nil,
   32|       |                originalLanguage: String? = nil, overview: String? = nil, runtime: Int? = nil, genres: [Genre]? = nil,
   33|       |                releaseDate: Date? = nil, posterPath: URL? = nil, backdropPath: URL? = nil, budget: Float? = nil,
   34|       |                revenue: Double? = nil, homepageURL: URL? = nil, imdbID: String? = nil, status: Status? = nil,
   35|       |                productionCompanies: [ProductionCompany]? = nil, productionCountries: [ProductionCountry]? = nil,
   36|       |                spokenLanguages: [SpokenLanguage]? = nil, popularity: Float? = nil, voteAverage: Float? = nil,
   37|     40|                voteCount: Int? = nil, video: Bool? = nil, adult: Bool? = nil) {
   38|     40|        self.id = id
   39|     40|        self.title = title
   40|     40|        self.tagline = tagline
   41|     40|        self.originalTitle = originalTitle
   42|     40|        self.originalLanguage = originalLanguage
   43|     40|        self.overview = overview
   44|     40|        self.runtime = runtime
   45|     40|        self.genres = genres
   46|     40|        self.releaseDateString = {
   47|     40|            guard let releaseDate = releaseDate else {
   48|     24|                return nil
   49|     24|            }
   50|     16|
   51|     16|            return DateFormatter.theMovieDatabase.string(from: releaseDate)
   52|     40|        }()
   53|     40|        self.posterPath = posterPath
   54|     40|        self.backdropPath = backdropPath
   55|     40|        self.budget = budget
   56|     40|        self.revenue = revenue
   57|     40|        self.homepage = homepageURL?.absoluteString
   58|     40|        self.imdbID = imdbID
   59|     40|        self.status = status
   60|     40|        self.productionCompanies = productionCompanies
   61|     40|        self.productionCountries = productionCountries
   62|     40|        self.spokenLanguages = spokenLanguages
   63|     40|        self.popularity = popularity
   64|     40|        self.voteAverage = voteAverage
   65|     40|        self.voteCount = voteCount
   66|     40|        self.video = video
   67|     40|        self.adult = adult
   68|     40|    }
   69|       |
   70|       |}
   71|       |
   72|       |extension Movie {
   73|       |
   74|      2|    public var releaseDate: Date? {
   75|      2|        guard let releaseDateString = releaseDateString else {
   76|      1|            return nil
   77|      1|        }
   78|      1|
   79|      1|        return DateFormatter.theMovieDatabase.date(from: releaseDateString)
   80|      2|    }
   81|       |
   82|      2|    public var homepageURL: URL? {
   83|      2|        guard let homepage = homepage else {
   84|      1|            return nil
   85|      1|        }
   86|      1|
   87|      1|        return URL(string: homepage)
   88|      2|    }
   89|       |
   90|       |}
   91|       |
   92|       |extension Movie {
   93|       |
   94|       |    enum CodingKeys: String, CodingKey {
   95|       |        case id
   96|       |        case title
   97|       |        case tagline
   98|       |        case originalTitle
   99|       |        case originalLanguage
  100|       |        case overview
  101|       |        case runtime
  102|       |        case genres
  103|       |        case releaseDateString = "releaseDate"
  104|       |        case posterPath
  105|       |        case backdropPath
  106|       |        case budget
  107|       |        case revenue
  108|       |        case imdbID = "imdbId"
  109|       |        case status
  110|       |        case homepage
  111|       |        case productionCompanies
  112|       |        case productionCountries
  113|       |        case spokenLanguages
  114|       |        case popularity
  115|       |        case voteAverage
  116|       |        case voteCount
  117|       |        case video
  118|       |        case adult
  119|       |    }
  120|       |
  121|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Network.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Network: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |    public let logoPath: URL?
    8|       |    public let originCountry: String?
    9|       |
   10|      5|    public init(id: Int, name: String, logoPath: URL? = nil, originCountry: String? = nil) {
   11|      5|        self.id = id
   12|      5|        self.name = name
   13|      5|        self.logoPath = logoPath
   14|      5|        self.originCountry = originCountry
   15|      5|    }
   16|       |
   17|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/PageableListResult.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct PageableListResult<Result: Decodable & Identifiable & Equatable>: Decodable, Equatable {
    4|       |
    5|       |    public let page: Int?
    6|       |    public let results: [Result]
    7|       |    public let totalResults: Int?
    8|       |    public let totalPages: Int?
    9|       |
   10|     12|    public init(page: Int? = 1, results: [Result], totalResults: Int? = 0, totalPages: Int? = 0) {
   11|     12|        self.page = page
   12|     12|        self.results = results
   13|     12|        self.totalResults = totalResults
   14|     12|        self.totalPages = totalPages
   15|     12|    }
   16|       |
   17|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Person.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Person: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |    public let alsoKnownAs: [String]?
    8|       |    public let knownForDepartment: String?
    9|       |    public let biography: String?
   10|       |    public let birthday: Date?
   11|       |    public let deathday: Date?
   12|       |    public let gender: Gender?
   13|       |    public let placeOfBirth: String?
   14|       |    public let profilePath: URL?
   15|       |    public let popularity: Float?
   16|       |    public let imdbId: String?
   17|       |    public let homepage: URL?
   18|       |
   19|       |    public init(id: Int, name: String, alsoKnownAs: [String]? = nil, knownForDepartment: String? = nil,
   20|       |                biography: String? = nil, birthday: Date? = nil, deathday: Date? = nil, gender: Gender? = nil,
   21|       |                placeOfBirth: String? = nil, profilePath: URL? = nil, popularity: Float? = nil, imdbId: String? = nil,
   22|      7|                homepage: URL? = nil) {
   23|      7|        self.id = id
   24|      7|        self.name = name
   25|      7|        self.alsoKnownAs = alsoKnownAs
   26|      7|        self.knownForDepartment = knownForDepartment
   27|      7|        self.biography = biography
   28|      7|        self.birthday = birthday
   29|      7|        self.deathday = deathday
   30|      7|        self.gender = gender
   31|      7|        self.placeOfBirth = placeOfBirth
   32|      7|        self.profilePath = profilePath
   33|      7|        self.popularity = popularity
   34|      7|        self.imdbId = imdbId
   35|      7|        self.homepage = homepage
   36|      7|    }
   37|       |
   38|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/PersonCombinedCredits.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct PersonCombinedCredits: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let cast: [Show]
    7|       |    public let crew: [Show]
    8|       |
    9|      1|    public init(id: Int, cast: [Show], crew: [Show]) {
   10|      1|        self.id = id
   11|      1|        self.cast = cast
   12|      1|        self.crew = crew
   13|      1|    }
   14|       |
   15|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/PersonMovieCredits.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct PersonMovieCredits: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let cast: [Movie]
    7|       |    public let crew: [Movie]
    8|       |
    9|      1|    public init(id: Int, cast: [Movie], crew: [Movie]) {
   10|      1|        self.id = id
   11|      1|        self.cast = cast
   12|      1|        self.crew = crew
   13|      1|    }
   14|       |
   15|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/PersonTVShowCredits.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct PersonTVShowCredits: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let cast: [TVShow]
    7|       |    public let crew: [TVShow]
    8|       |
    9|      1|    public init(id: Int, cast: [TVShow], crew: [TVShow]) {
   10|      1|        self.id = id
   11|      1|        self.cast = cast
   12|      1|        self.crew = crew
   13|      1|    }
   14|       |
   15|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/ProductionCompany.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct ProductionCompany: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |    public let originCountry: String
    8|       |    public let logoPath: URL?
    9|       |
   10|      9|    public init(id: Int, name: String, originCountry: String, logoPath: URL? = nil) {
   11|      9|        self.id = id
   12|      9|        self.name = name
   13|      9|        self.originCountry = originCountry
   14|      9|        self.logoPath = logoPath
   15|      9|    }
   16|       |
   17|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/ProductionCountry.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct ProductionCountry: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let iso31661: String
    6|       |    public let name: String
    7|       |
    8|      1|    public var id: String {
    9|      1|        iso31661
   10|      1|    }
   11|       |
   12|      6|    public init(iso31661: String, name: String) {
   13|      6|        self.iso31661 = iso31661
   14|      6|        self.name = name
   15|      6|    }
   16|       |
   17|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Review.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct Review: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: String
    6|       |    public let author: String
    7|       |    public let content: String
    8|       |
    9|      3|    public init(id: String, author: String, content: String) {
   10|      3|        self.id = id
   11|      3|        self.author = author
   12|      3|        self.content = content
   13|      3|    }
   14|       |
   15|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/Show.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum Show: Identifiable, Equatable {
    4|       |
    5|      2|    public var id: Int {
    6|      2|        switch self {
    7|      2|        case .movie(let movie):
    8|      1|            return movie.id
    9|      2|
   10|      2|        case .tvShow(let tvShow):
   11|      1|            return tvShow.id
   12|      2|        }
   13|      2|    }
   14|       |
   15|      2|    var popularity: Float? {
   16|      2|        switch self {
   17|      2|        case .movie(let movie):
   18|      1|            return movie.popularity
   19|      2|
   20|      2|        case .tvShow(let tvShow):
   21|      1|            return tvShow.popularity
   22|      2|        }
   23|      2|    }
   24|       |
   25|      2|    var date: Date? {
   26|      2|        switch self {
   27|      2|        case .movie(let movie):
   28|      1|            return movie.releaseDate
   29|      2|
   30|      2|        case .tvShow(let tvShow):
   31|      1|            return tvShow.firstAirDate
   32|      2|        }
   33|      2|    }
   34|       |
   35|       |    case movie(Movie)
   36|       |    case tvShow(TVShow)
   37|       |
   38|       |}
   39|       |
   40|       |extension Show: Decodable {
   41|       |
   42|       |    private enum CodingKeys: String, CodingKey {
   43|       |        case mediaType
   44|       |    }
   45|       |
   46|       |    private enum MediaType: String, Decodable, Equatable {
   47|       |        case movie
   48|       |        case tvShow = "tv"
   49|       |    }
   50|       |
   51|      6|    public init(from decoder: Decoder) throws {
   52|      6|        let container = try decoder.container(keyedBy: CodingKeys.self)
   53|      6|        let mediaType = try container.decode(MediaType.self, forKey: .mediaType)
   54|      6|
   55|      6|        switch mediaType {
   56|      6|        case .movie:
   57|      3|            self = .movie(try Movie(from: decoder))
   58|      6|
   59|      6|        case .tvShow:
   60|      3|            self = .tvShow(try TVShow(from: decoder))
   61|      6|        }
   62|      6|    }
   63|       |
   64|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/ShowCredits.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct ShowCredits: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let cast: [CastMember]
    7|       |    public let crew: [CrewMember]
    8|       |
    9|      2|    public init(id: Int, cast: [CastMember], crew: [CrewMember]) {
   10|      2|        self.id = id
   11|      2|        self.cast = cast
   12|      2|        self.crew = crew
   13|      2|    }
   14|       |
   15|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/SpokenLanguage.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct SpokenLanguage: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let iso6391: String
    6|       |    public let name: String
    7|       |
    8|      1|    public var id: String {
    9|      1|        iso6391
   10|      1|    }
   11|       |
   12|      6|    public init(iso6391: String, name: String) {
   13|      6|        self.iso6391 = iso6391
   14|      6|        self.name = name
   15|      6|    }
   16|       |
   17|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/TMDbError.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum TMDbError: Error {
    4|       |
    5|       |    case network(URLError)
    6|       |    case unauthorized
    7|       |    case notFound
    8|       |    case unknown
    9|       |    case decode(Error)
   10|       |
   11|       |}
   12|       |
   13|       |extension TMDbError: LocalizedError {
   14|       |
   15|      5|    public var errorDescription: String? {
   16|      5|        switch self {
   17|      5|        case .network(let urlError):
   18|      1|            return urlError.localizedDescription
   19|      5|
   20|      5|        case .unauthorized:
   21|      1|            return "Unauthorised"
   22|      5|
   23|      5|        case .notFound:
   24|      1|            return "Not Found"
   25|      5|
   26|      5|        case .unknown:
   27|      1|            return "Unknown Error"
   28|      5|
   29|      5|        case .decode:
   30|      1|            return "Data Decode Error"
   31|      5|        }
   32|      5|    }
   33|       |
   34|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/TVShow.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct TVShow: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |    public let originalName: String?
    8|       |    public let originalLanguage: String?
    9|       |    public let overview: String?
   10|       |    public let episodeRunTime: [Int]?
   11|       |    public let numberOfSeasons: Int?
   12|       |    public let numberOfEpisodes: Int?
   13|       |    public let seasons: [TVShowSeason]?
   14|       |    public let genres: [Genre]?
   15|       |    public let originCountry: [String]?
   16|       |    public let posterPath: URL?
   17|       |    public let backdropPath: URL?
   18|       |    public let inProduction: Bool?
   19|       |    public let languages: [String]?
   20|       |    public let lastAirDate: Date?
   21|       |    public let networks: [Network]?
   22|       |    public let productionCompanies: [ProductionCompany]?
   23|       |    public let status: String?
   24|       |    public let type: String?
   25|       |    public let popularity: Float?
   26|       |    public let voteAverage: Float?
   27|       |    public let voteCount: Int?
   28|       |
   29|       |    private let firstAirDateString: String?
   30|       |    private let homepage: String?
   31|       |
   32|       |    public init(id: Int, name: String, originalName: String? = nil, originalLanguage: String? = nil,
   33|       |                overview: String? = nil, episodeRunTime: [Int]? = nil, numberOfSeasons: Int? = nil,
   34|       |                numberOfEpisodes: Int? = nil, seasons: [TVShowSeason]? = nil, genres: [Genre]? = nil,
   35|       |                firstAirDate: Date? = nil, originCountry: [String]? = nil, posterPath: URL? = nil,
   36|       |                backdropPath: URL? = nil, homepageURL: URL? = nil, inProduction: Bool? = nil,
   37|       |                languages: [String]? = nil, lastAirDate: Date? = nil, networks: [Network]? = nil,
   38|       |                productionCompanies: [ProductionCompany]? = nil, status: String? = nil, type: String? = nil,
   39|     30|                popularity: Float? = nil, voteAverage: Float? = nil, voteCount: Int? = nil) {
   40|     30|        self.id = id
   41|     30|        self.name = name
   42|     30|        self.originalName = originalName
   43|     30|        self.originalLanguage = originalLanguage
   44|     30|        self.overview = overview
   45|     30|        self.episodeRunTime = episodeRunTime
   46|     30|        self.numberOfSeasons = numberOfSeasons
   47|     30|        self.numberOfEpisodes = numberOfEpisodes
   48|     30|        self.seasons = seasons
   49|     30|        self.genres = genres
   50|     30|        self.firstAirDateString = {
   51|     30|            guard let firstAirDate = firstAirDate else {
   52|     14|                return nil
   53|     16|            }
   54|     16|
   55|     16|            return DateFormatter.theMovieDatabase.string(from: firstAirDate)
   56|     30|        }()
   57|     30|        self.originCountry = originCountry
   58|     30|        self.posterPath = posterPath
   59|     30|        self.backdropPath = backdropPath
   60|     30|        self.homepage = homepageURL?.absoluteString
   61|     30|        self.inProduction = inProduction
   62|     30|        self.languages = languages
   63|     30|        self.lastAirDate = lastAirDate
   64|     30|        self.networks = networks
   65|     30|        self.productionCompanies = productionCompanies
   66|     30|        self.status = status
   67|     30|        self.type = type
   68|     30|        self.popularity = popularity
   69|     30|        self.voteAverage = voteAverage
   70|     30|        self.voteCount = voteCount
   71|     30|    }
   72|       |
   73|       |}
   74|       |
   75|       |extension TVShow {
   76|       |
   77|      2|    public var firstAirDate: Date? {
   78|      2|        guard let firstAirDateString = firstAirDateString else {
   79|      1|            return nil
   80|      1|        }
   81|      1|
   82|      1|        return DateFormatter.theMovieDatabase.date(from: firstAirDateString)
   83|      2|    }
   84|       |
   85|      2|    public var homepageURL: URL? {
   86|      2|        guard let homepage = homepage else {
   87|      1|            return nil
   88|      1|        }
   89|      1|
   90|      1|        return URL(string: homepage)
   91|      2|    }
   92|       |
   93|       |}
   94|       |
   95|       |extension TVShow {
   96|       |
   97|       |    private enum CodingKeys: String, CodingKey {
   98|       |        case id
   99|       |        case name
  100|       |        case originalName
  101|       |        case originalLanguage
  102|       |        case overview
  103|       |        case episodeRunTime
  104|       |        case numberOfSeasons
  105|       |        case numberOfEpisodes
  106|       |        case seasons
  107|       |        case genres
  108|       |        case originCountry
  109|       |        case posterPath
  110|       |        case backdropPath
  111|       |        case inProduction
  112|       |        case languages
  113|       |        case lastAirDate
  114|       |        case networks
  115|       |        case productionCompanies
  116|       |        case status
  117|       |        case type
  118|       |        case popularity
  119|       |        case voteAverage
  120|       |        case voteCount
  121|       |        case firstAirDateString = "firstAirDate"
  122|       |        case homepage
  123|       |    }
  124|       |
  125|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/TVShowEpisode.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct TVShowEpisode: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |    public let episodeNumber: Int
    8|       |    public let seasonNumber: Int
    9|       |    public let overview: String?
   10|       |    public let airDate: Date?
   11|       |    public let productionCode: String?
   12|       |    public let stillPath: URL?
   13|       |    public let crew: [CrewMember]?
   14|       |    public let guestStars: [CastMember]?
   15|       |    public let voteAverage: Float?
   16|       |    public let voteCount: Int?
   17|       |
   18|       |    public init(id: Int, name: String, episodeNumber: Int, seasonNumber: Int, overview: String? = nil,
   19|       |                airDate: Date? = nil, productionCode: String? = nil, stillPath: URL? = nil, crew: [CrewMember]? = nil,
   20|      1|                guestStars: [CastMember]? = nil, voteAverage: Float? = nil, voteCount: Int? = nil) {
   21|      1|        self.id = id
   22|      1|        self.name = name
   23|      1|        self.episodeNumber = episodeNumber
   24|      1|        self.seasonNumber = seasonNumber
   25|      1|        self.overview = overview
   26|      1|        self.airDate = airDate
   27|      1|        self.productionCode = productionCode
   28|      1|        self.stillPath = stillPath
   29|      1|        self.crew = crew
   30|      1|        self.guestStars = guestStars
   31|      1|        self.voteAverage = voteAverage
   32|      1|        self.voteCount = voteCount
   33|      1|    }
   34|       |
   35|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/TVShowSeason.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct TVShowSeason: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let name: String
    7|       |    public let seasonNumber: Int
    8|       |    public let overview: String?
    9|       |    public let airDate: Date?
   10|       |    public let posterPath: URL?
   11|       |    public let episodes: [TVShowEpisode]?
   12|       |
   13|       |    public init(id: Int, name: String, seasonNumber: Int, overview: String? = nil, airDate: Date? = nil,
   14|      5|                posterPath: URL? = nil, episodes: [TVShowEpisode]? = nil) {
   15|      5|        self.id = id
   16|      5|        self.name = name
   17|      5|        self.seasonNumber = seasonNumber
   18|      5|        self.overview = overview
   19|      5|        self.airDate = airDate
   20|      5|        self.posterPath = posterPath
   21|      5|        self.episodes = episodes
   22|      5|    }
   23|       |
   24|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/VideoCollection.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct VideoCollection: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: Int
    6|       |    public let results: [VideoMetadata]
    7|       |
    8|      2|    public init(id: Int, results: [VideoMetadata]) {
    9|      2|        self.id = id
   10|      2|        self.results = results
   11|      2|    }
   12|       |
   13|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Models/VideoMetadata.swift:
    1|       |import Foundation
    2|       |
    3|       |public struct VideoMetadata: Identifiable, Decodable, Equatable {
    4|       |
    5|       |    public let id: String
    6|       |    public let name: String
    7|       |    public let site: String
    8|       |    public let key: String
    9|       |    public let type: VideoType
   10|       |    public let size: VideoSize
   11|       |
   12|      3|    public init(id: String, name: String, site: String, key: String, type: VideoType, size: VideoSize) {
   13|      3|        self.id = id
   14|      3|        self.name = name
   15|      3|        self.site = site
   16|      3|        self.key = key
   17|      3|        self.type = type
   18|      3|        self.size = size
   19|      3|    }
   20|       |
   21|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Certifications/CertificationsEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum CertificationsEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/certification")!
    6|       |
    7|       |    case movie
    8|       |    case tvShow
    9|       |
   10|       |}
   11|       |
   12|       |extension CertificationsEndpoint: Endpoint {
   13|       |
   14|      6|    var url: URL {
   15|      6|        switch self {
   16|      6|        case .movie:
   17|      3|            return Self.basePath
   18|      3|                .appendingPathComponent("movie")
   19|      3|                .appendingPathComponent("list")
   20|      6|
   21|      6|        case .tvShow:
   22|      3|            return Self.basePath
   23|      3|                .appendingPathComponent("tv")
   24|      3|                .appendingPathComponent("list")
   25|      6|        }
   26|      6|    }
   27|       |
   28|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Certifications/TMDbCertificationService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbCertificationService: CertificationService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      2|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      2|        self.apiClient = apiClient
   10|      2|    }
   11|       |
   12|      1|    public func fetchMovieCertifications() -> AnyPublisher<[String: [Certification]], TMDbError> {
   13|      1|        apiClient.get(endpoint: CertificationsEndpoint.movie)
   14|      1|    }
   15|       |
   16|      1|    public func fetchTVShowCertifications() -> AnyPublisher<[String: [Certification]], TMDbError> {
   17|      1|        apiClient.get(endpoint: CertificationsEndpoint.tvShow)
   18|      1|    }
   19|       |
   20|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Configuration/ConfigurationEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum ConfigurationEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/configuration")!
    6|       |
    7|       |    case api
    8|       |
    9|       |}
   10|       |
   11|       |extension ConfigurationEndpoint: Endpoint {
   12|       |
   13|      3|    var url: URL {
   14|      3|        switch self {
   15|      3|        case .api:
   16|      3|            return Self.basePath
   17|      3|        }
   18|      3|    }
   19|       |
   20|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Configuration/TMDbConfigurationService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbConfigurationService: ConfigurationService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      1|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      1|        self.apiClient = apiClient
   10|      1|    }
   11|       |
   12|      1|    public func fetchAPIConfiguration() -> AnyPublisher<APIConfiguration, TMDbError> {
   13|      1|        apiClient.get(endpoint: ConfigurationEndpoint.api)
   14|      1|    }
   15|       |
   16|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Discover/DiscoverEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum DiscoverEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/discover")!
    6|       |
    7|       |    case movies(sortBy: MovieSortBy? = nil, withPeople: [Person.ID]? = nil, page: Int? = nil)
    8|       |    case tvShows(sortBy: TVShowSortBy? = nil, page: Int? = nil)
    9|       |
   10|       |}
   11|       |
   12|       |extension DiscoverEndpoint: Endpoint {
   13|       |
   14|     13|    var url: URL {
   15|     13|        switch self {
   16|     13|        case .movies(let sortBy, let withPeople, let page):
   17|      7|            return Self.basePath
   18|      7|                .appendingPathComponent("movie")
   19|      7|                .appendingSortBy(sortBy)
   20|      7|                .appendingWithPeople(withPeople)
   21|      7|                .appendingPage(page)
   22|     13|
   23|     13|        case .tvShows(let sortBy, let page):
   24|      6|            return Self.basePath
   25|      6|                .appendingPathComponent("tv")
   26|      6|                .appendingSortBy(sortBy)
   27|      6|                .appendingPage(page)
   28|     13|        }
   29|     13|    }
   30|       |
   31|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Discover/DiscoverService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol DiscoverService {
    5|       |
    6|       |    func fetchMovies(sortBy: MovieSortBy?, withPeople: [Person.ID]?,
    7|       |                     page: Int?) -> AnyPublisher<MoviePageableList, TMDbError>
    8|       |
    9|       |    func fetchTVShows(sortBy: TVShowSortBy?, page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError>
   10|       |
   11|       |}
   12|       |
   13|       |extension DiscoverService {
   14|       |
   15|       |    public func fetchMovies(sortBy: MovieSortBy? = nil, withPeople: [Person.ID]? = nil,
   16|      1|                            page: Int? = nil) -> AnyPublisher<MoviePageableList, TMDbError> {
   17|      1|        fetchMovies(sortBy: sortBy, withPeople: withPeople, page: page)
   18|      1|    }
   19|       |
   20|       |    public func fetchTVShows(sortBy: TVShowSortBy? = nil,
   21|      1|                             page: Int? = nil) -> AnyPublisher<TVShowPageableList, TMDbError> {
   22|      1|        fetchTVShows(sortBy: sortBy, page: page)
   23|      1|    }
   24|       |
   25|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Discover/MovieSortBy.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum MovieSortBy: String {
    4|       |
    5|       |    case popularityAscending = "popularity.asc"
    6|       |    case popularityDescending = "popularity.desc"
    7|       |
    8|       |    case releaseDateAscending = "release_date.asc"
    9|       |    case releaseDateDescending = "release_date.desc"
   10|       |
   11|       |    case revenueAscending = "revenue.asc"
   12|       |    case revenueDescending = "revenue.desc"
   13|       |
   14|       |    case primaryReleaseDateAscending = "primary_release_date.asc"
   15|       |    case primaryReleaseDateDescending = "primary_release_date.desc"
   16|       |
   17|       |    case originalTitleAscending = "original_title.asc"
   18|       |    case originalTitleDescending = "original_title.desc"
   19|       |
   20|       |    case voteAverageAscending = "vote_average.asc"
   21|       |    case voteAverageDescending = "vote_average.desc"
   22|       |
   23|       |    case voteCountAscending = "vote_count.asc"
   24|       |    case voteCountDescending = "vote_count.desc"
   25|       |
   26|       |    public static var `default`: Self = .popularityDescending
   27|       |
   28|       |}
   29|       |
   30|       |extension URL {
   31|       |
   32|      9|    func appendingSortBy(_ sortBy: MovieSortBy?) -> Self {
   33|      9|        guard let sortBy = sortBy else {
   34|      6|            return self
   35|      6|        }
   36|      3|
   37|      3|        return appendingQueryItem(name: "sort_by", value: sortBy.rawValue)
   38|      9|    }
   39|       |
   40|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Discover/TMDbDiscoverService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbDiscoverService: DiscoverService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      2|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      2|        self.apiClient = apiClient
   10|      2|    }
   11|       |
   12|       |    public func fetchMovies(sortBy: MovieSortBy?, withPeople: [Person.ID]?,
   13|      1|                            page: Int?) -> AnyPublisher<MoviePageableList, TMDbError> {
   14|      1|        apiClient.get(endpoint: DiscoverEndpoint.movies(sortBy: sortBy, withPeople: withPeople, page: page))
   15|      1|    }
   16|       |
   17|       |    public func fetchTVShows(sortBy: TVShowSortBy? = nil,
   18|      1|                             page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError> {
   19|      1|        apiClient.get(endpoint: DiscoverEndpoint.tvShows(sortBy: sortBy, page: page))
   20|      1|    }
   21|       |
   22|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Discover/TVShowSortBy.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum TVShowSortBy: String {
    4|       |
    5|       |    case popularityAscending = "popularity.asc"
    6|       |    case popularityDescending = "popularity.desc"
    7|       |
    8|       |    case firstAirDateAscending = "first_air_date.asc"
    9|       |    case firstAirDateDescending = "first_air_date.desc"
   10|       |
   11|       |    case voteAverageAscending = "vote_average.asc"
   12|       |    case voteAverageDescending = "vote_average.desc"
   13|       |
   14|       |    public static var `default`: Self = .popularityDescending
   15|       |
   16|       |}
   17|       |
   18|       |extension URL {
   19|       |
   20|      8|    func appendingSortBy(_ sortBy: TVShowSortBy?) -> Self {
   21|      8|        guard let sortBy = sortBy else {
   22|      5|            return self
   23|      5|        }
   24|      3|
   25|      3|        return appendingQueryItem(name: "sort_by", value: sortBy.rawValue)
   26|      8|    }
   27|       |
   28|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Movies/MovieService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol MovieService {
    5|       |
    6|       |    func fetchDetails(forMovie id: Movie.ID) -> AnyPublisher<Movie, TMDbError>
    7|       |
    8|       |    func fetchCredits(forMovie movieID: Movie.ID) -> AnyPublisher<ShowCredits, TMDbError>
    9|       |
   10|       |    func fetchReviews(forMovie movieID: Movie.ID, page: Int?) -> AnyPublisher<ReviewPageableList, TMDbError>
   11|       |
   12|       |    func fetchImages(forMovie movieID: Movie.ID) -> AnyPublisher<ImageCollection, TMDbError>
   13|       |
   14|       |    func fetchVideos(forMovie movieID: Movie.ID) -> AnyPublisher<VideoCollection, TMDbError>
   15|       |
   16|       |    func fetchRecommendations(forMovie movieID: Movie.ID,
   17|       |                              page: Int?) -> AnyPublisher<MoviePageableList, TMDbError>
   18|       |
   19|       |    func fetchSimilar(toMovie movieID: Movie.ID, page: Int?) -> AnyPublisher<MoviePageableList, TMDbError>
   20|       |
   21|       |    func fetchPopular(page: Int?) -> AnyPublisher<MoviePageableList, TMDbError>
   22|       |
   23|       |}
   24|       |
   25|       |extension MovieService {
   26|       |
   27|       |    public func fetchReviews(forMovie movieID: Movie.ID,
   28|      1|                             page: Int? = nil) -> AnyPublisher<ReviewPageableList, TMDbError> {
   29|      1|        fetchReviews(forMovie: movieID, page: page)
   30|      1|    }
   31|       |
   32|       |    public func fetchRecommendations(forMovie movieID: Movie.ID,
   33|      1|                                     page: Int? = nil) -> AnyPublisher<MoviePageableList, TMDbError> {
   34|      1|        fetchRecommendations(forMovie: movieID, page: page)
   35|      1|    }
   36|       |
   37|       |    public func fetchSimilar(toMovie movieID: Movie.ID,
   38|      1|                             page: Int? = nil) -> AnyPublisher<MoviePageableList, TMDbError> {
   39|      1|        fetchSimilar(toMovie: movieID, page: page)
   40|      1|    }
   41|       |
   42|      1|    public func fetchPopular(page: Int? = nil) -> AnyPublisher<MoviePageableList, TMDbError> {
   43|      1|        fetchPopular(page: page)
   44|      1|    }
   45|       |
   46|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Movies/MoviesEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum MoviesEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/movie")!
    6|       |
    7|       |    case details(movieID: Movie.ID)
    8|       |    case credits(movieID: Movie.ID)
    9|       |    case reviews(movieID: Movie.ID, page: Int? = nil)
   10|       |    case images(movieID: Movie.ID)
   11|       |    case videos(movieID: Movie.ID)
   12|       |    case recommendations(movieID: Movie.ID, page: Int? = nil)
   13|       |    case similar(movieID: Movie.ID, page: Int? = nil)
   14|       |    case popular(page: Int? = nil)
   15|       |
   16|       |}
   17|       |
   18|       |extension MoviesEndpoint: Endpoint {
   19|       |
   20|     28|    var url: URL {
   21|     28|        switch self {
   22|     28|        case .details(let movieID):
   23|      3|            return Self.basePath
   24|      3|                .appendingPathComponent(movieID)
   25|     28|
   26|     28|        case .credits(let movieID):
   27|      3|            return Self.basePath
   28|      3|                .appendingPathComponent(movieID)
   29|      3|                .appendingPathComponent("credits")
   30|     28|
   31|     28|        case .reviews(let movieID, let page):
   32|      4|            return Self.basePath
   33|      4|                .appendingPathComponent(movieID)
   34|      4|                .appendingPathComponent("reviews")
   35|      4|                .appendingPage(page)
   36|     28|
   37|     28|        case .images(let movieID):
   38|      3|            return Self.basePath
   39|      3|                .appendingPathComponent(movieID)
   40|      3|                .appendingPathComponent("images")
   41|     28|
   42|     28|        case .videos(let movieID):
   43|      3|            return Self.basePath
   44|      3|                .appendingPathComponent(movieID)
   45|      3|                .appendingPathComponent("videos")
   46|     28|
   47|     28|        case .recommendations(let movieID, let page):
   48|      4|            return Self.basePath
   49|      4|                .appendingPathComponent(movieID)
   50|      4|                .appendingPathComponent("recommendations")
   51|      4|                .appendingPage(page)
   52|     28|
   53|     28|        case .similar(let movieID, let page):
   54|      4|            return Self.basePath
   55|      4|                .appendingPathComponent(movieID)
   56|      4|                .appendingPathComponent("similar")
   57|      4|                .appendingPage(page)
   58|     28|
   59|     28|        case .popular(let page):
   60|      4|            return Self.basePath
   61|      4|                .appendingPathComponent("popular")
   62|      4|                .appendingPage(page)
   63|     28|        }
   64|     28|    }
   65|       |
   66|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Movies/TMDbMovieService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbMovieService: MovieService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      8|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      8|        self.apiClient = apiClient
   10|      8|    }
   11|       |
   12|      1|    public func fetchDetails(forMovie id: Movie.ID) -> AnyPublisher<Movie, TMDbError> {
   13|      1|        apiClient.get(endpoint: MoviesEndpoint.details(movieID: id))
   14|      1|    }
   15|       |
   16|      1|    public func fetchCredits(forMovie movieID: Movie.ID) -> AnyPublisher<ShowCredits, TMDbError> {
   17|      1|        apiClient.get(endpoint: MoviesEndpoint.credits(movieID: movieID))
   18|      1|    }
   19|       |
   20|       |    public func fetchReviews(forMovie movieID: Movie.ID,
   21|      1|                             page: Int?) -> AnyPublisher<ReviewPageableList, TMDbError> {
   22|      1|        apiClient.get(endpoint: MoviesEndpoint.reviews(movieID: movieID, page: page))
   23|      1|    }
   24|       |
   25|      1|    public func fetchImages(forMovie movieID: Movie.ID) -> AnyPublisher<ImageCollection, TMDbError> {
   26|      1|        apiClient.get(endpoint: MoviesEndpoint.images(movieID: movieID))
   27|      1|    }
   28|       |
   29|      1|    public func fetchVideos(forMovie movieID: Movie.ID) -> AnyPublisher<VideoCollection, TMDbError> {
   30|      1|        apiClient.get(endpoint: MoviesEndpoint.videos(movieID: movieID))
   31|      1|    }
   32|       |
   33|       |    public func fetchRecommendations(forMovie movieID: Movie.ID,
   34|      1|                                     page: Int?) -> AnyPublisher<MoviePageableList, TMDbError> {
   35|      1|        apiClient.get(endpoint: MoviesEndpoint.recommendations(movieID: movieID, page: page))
   36|      1|    }
   37|       |
   38|       |    public func fetchSimilar(toMovie movieID: Movie.ID,
   39|      1|                             page: Int?) -> AnyPublisher<MoviePageableList, TMDbError> {
   40|      1|        apiClient.get(endpoint: MoviesEndpoint.similar(movieID: movieID, page: page))
   41|      1|    }
   42|       |
   43|      1|    public func fetchPopular(page: Int?) -> AnyPublisher<MoviePageableList, TMDbError> {
   44|      1|        apiClient.get(endpoint: MoviesEndpoint.popular(page: page))
   45|      1|    }
   46|       |
   47|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/People/PeopleEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum PeopleEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/person")!
    6|       |
    7|       |    case details(personID: Person.ID)
    8|       |    case combinedCredits(personID: Person.ID)
    9|       |    case movieCredits(personID: Person.ID)
   10|       |    case tvShowCredits(personID: Person.ID)
   11|       |    case images(personID: Person.ID)
   12|       |    case popular(page: Int? = nil)
   13|       |
   14|       |}
   15|       |
   16|       |extension PeopleEndpoint: Endpoint {
   17|       |
   18|      7|    var url: URL {
   19|      7|        switch self {
   20|      7|        case .details(let personID):
   21|      1|            return Self.basePath
   22|      1|                .appendingPathComponent(personID)
   23|      7|
   24|      7|        case .combinedCredits(let personID):
   25|      1|            return Self.basePath
   26|      1|                .appendingPathComponent(personID)
   27|      1|                .appendingPathComponent("combined_credits")
   28|      7|
   29|      7|        case .movieCredits(let personID):
   30|      1|            return Self.basePath
   31|      1|                .appendingPathComponent(personID)
   32|      1|                .appendingPathComponent("movie_credits")
   33|      7|
   34|      7|        case .tvShowCredits(let personID):
   35|      1|            return Self.basePath
   36|      1|                .appendingPathComponent(personID)
   37|      1|                .appendingPathComponent("tv_credits")
   38|      7|
   39|      7|        case .images(let personID):
   40|      1|            return Self.basePath
   41|      1|                .appendingPathComponent(personID)
   42|      1|                .appendingPathComponent("images")
   43|      7|
   44|      7|        case .popular(let page):
   45|      2|            return Self.basePath
   46|      2|                .appendingPathComponent("popular")
   47|      2|                .appendingPage(page)
   48|      7|
   49|      7|        }
   50|      7|    }
   51|       |
   52|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/People/PersonService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol PersonService {
    5|       |
    6|       |    func fetchDetails(forPerson id: Person.ID) -> AnyPublisher<Person, TMDbError>
    7|       |
    8|       |    func fetchCombinedCredits(forPerson personID: Person.ID) -> AnyPublisher<PersonCombinedCredits, TMDbError>
    9|       |
   10|       |    func fetchMovieCredits(forPerson personID: Person.ID) -> AnyPublisher<PersonMovieCredits, TMDbError>
   11|       |
   12|       |    func fetchTVCredits(forPerson personID: Person.ID) -> AnyPublisher<PersonTVShowCredits, TMDbError>
   13|       |
   14|       |    func fetchImages(forPerson personID: Person.ID) -> AnyPublisher<PersonImageCollection, TMDbError>
   15|       |
   16|       |    func fetchKnownFor(forPerson personID: Person.ID) -> AnyPublisher<[Show], TMDbError>
   17|       |
   18|       |    func fetchPopular(page: Int?) -> AnyPublisher<PersonPageableList, TMDbError>
   19|       |
   20|       |}
   21|       |
   22|       |extension PersonService {
   23|       |
   24|      0|    public func fetchPopular(page: Int? = nil) -> AnyPublisher<PersonPageableList, TMDbError> {
   25|      0|        fetchPopular(page: page)
   26|      0|    }
   27|       |
   28|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/People/TMDbPersonService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbPersonService: PersonService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      0|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      0|        self.apiClient = apiClient
   10|      0|    }
   11|       |
   12|      0|    public func fetchDetails(forPerson id: Person.ID) -> AnyPublisher<Person, TMDbError> {
   13|      0|        apiClient.get(endpoint: PeopleEndpoint.details(personID: id))
   14|      0|    }
   15|       |
   16|      0|    public func fetchCombinedCredits(forPerson personID: Person.ID) -> AnyPublisher<PersonCombinedCredits, TMDbError> {
   17|      0|        apiClient.get(endpoint: PeopleEndpoint.combinedCredits(personID: personID))
   18|      0|            .map { (credits: PersonCombinedCredits) in
   19|      0|                let sortedCast = credits.cast.sorted(by: Self.showSort)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC20fetchCombinedCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA4ShowO_AOtcACmcfu_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC20fetchCombinedCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA4ShowO_AOtcACmcfu_SbAO_AOtcfu0_
  ------------------
   20|      0|                let sortedCrew = credits.crew.sorted(by: Self.showSort)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC20fetchCombinedCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA4ShowO_AOtcACmcfu1_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC20fetchCombinedCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA4ShowO_AOtcACmcfu1_SbAO_AOtcfu2_
  ------------------
   21|      0|                return PersonCombinedCredits(id: credits.id, cast: sortedCast, crew: sortedCrew)
   22|      0|            }
   23|      0|            .eraseToAnyPublisher()
   24|      0|    }
   25|       |
   26|      0|    public func fetchMovieCredits(forPerson personID: Person.ID) -> AnyPublisher<PersonMovieCredits, TMDbError> {
   27|      0|        apiClient.get(endpoint: PeopleEndpoint.movieCredits(personID: personID))
   28|      0|            .map { (credits: PersonMovieCredits) in
   29|      0|                let sortedCast = credits.cast.sorted(by: Self.movieSort)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC17fetchMovieCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA0E0V_AOtcACmcfu_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC17fetchMovieCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA0E0V_AOtcACmcfu_SbAO_AOtcfu0_
  ------------------
   30|      0|                let sortedCrew = credits.crew.sorted(by: Self.movieSort)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC17fetchMovieCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA0E0V_AOtcACmcfu1_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC17fetchMovieCredits03forB07Combine12AnyPublisherVyAA0beF0VAA0A5ErrorOGSi_tFA2JcfU_SbAA0E0V_AOtcACmcfu1_SbAO_AOtcfu2_
  ------------------
   31|      0|                return PersonMovieCredits(id: credits.id, cast: sortedCast, crew: sortedCrew)
   32|      0|            }
   33|      0|            .eraseToAnyPublisher()
   34|      0|    }
   35|       |
   36|      0|    public func fetchTVCredits(forPerson personID: Person.ID) -> AnyPublisher<PersonTVShowCredits, TMDbError> {
   37|      0|        apiClient.get(endpoint: PeopleEndpoint.tvShowCredits(personID: personID))
   38|      0|            .map { (credits: PersonTVShowCredits) in
   39|      0|                let sortedCast = credits.cast.sorted(by: Self.tvShowSort)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC14fetchTVCredits03forB07Combine12AnyPublisherVyAA0B13TVShowCreditsVAA0A5ErrorOGSi_tFA2JcfU_SbAA0J0V_AOtcACmcfu_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC14fetchTVCredits03forB07Combine12AnyPublisherVyAA0B13TVShowCreditsVAA0A5ErrorOGSi_tFA2JcfU_SbAA0J0V_AOtcACmcfu_SbAO_AOtcfu0_
  ------------------
   40|      0|                let sortedCrew = credits.crew.sorted(by: Self.tvShowSort)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC14fetchTVCredits03forB07Combine12AnyPublisherVyAA0B13TVShowCreditsVAA0A5ErrorOGSi_tFA2JcfU_SbAA0J0V_AOtcACmcfu1_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC14fetchTVCredits03forB07Combine12AnyPublisherVyAA0B13TVShowCreditsVAA0A5ErrorOGSi_tFA2JcfU_SbAA0J0V_AOtcACmcfu1_SbAO_AOtcfu2_
  ------------------
   41|      0|                return PersonTVShowCredits(id: credits.id, cast: sortedCast, crew: sortedCrew)
   42|      0|            }
   43|      0|            .eraseToAnyPublisher()
   44|      0|    }
   45|       |
   46|      0|    public func fetchImages(forPerson personID: Person.ID) -> AnyPublisher<PersonImageCollection, TMDbError> {
   47|      0|        apiClient.get(endpoint: PeopleEndpoint.images(personID: personID))
   48|      0|    }
   49|       |
   50|      0|    public func fetchKnownFor(forPerson personID: Person.ID) -> AnyPublisher<[Show], TMDbError> {
   51|      0|        fetchCombinedCredits(forPerson: personID)
   52|      0|            .map(Self.knownForIn)
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC13fetchKnownFor03forB07Combine12AnyPublisherVySayAA4ShowOGAA0A5ErrorOGSi_tFAkA0B15CombinedCreditsVcACmcfu_
  ------------------
  | Unexecuted instantiation: $s4TMDb0A13PersonServiceC13fetchKnownFor03forB07Combine12AnyPublisherVySayAA4ShowOGAA0A5ErrorOGSi_tFAkA0B15CombinedCreditsVcACmcfu_AkPcfu0_
  ------------------
   53|      0|            .eraseToAnyPublisher()
   54|      0|    }
   55|       |
   56|      0|    public func fetchPopular(page: Int?) -> AnyPublisher<PersonPageableList, TMDbError> {
   57|      0|        apiClient.get(endpoint: PeopleEndpoint.popular(page: page))
   58|      0|    }
   59|       |
   60|       |}
   61|       |
   62|       |extension TMDbPersonService {
   63|       |
   64|      0|    private static func knownForIn(credits: PersonCombinedCredits) -> [Show] {
   65|      0|        let topCastShows = Array(credits.cast.prefix(10))
   66|      0|        let topCrewShows = Array(credits.crew.prefix(10))
   67|      0|        var topShows = topCastShows + topCrewShows
   68|      0|        topShows = topShows.reduce([], { shows, show in
   69|      0|            var shows = shows
   70|      0|            if !shows.contains(where: { $0.id == show.id }) {
   71|      0|                shows.append(show)
   72|      0|            }
   73|      0|
   74|      0|            return shows
   75|      0|        })
   76|      0|
   77|      0|        topShows.sort { $0.popularity ?? 0 > $1.popularity ?? 0 }
   78|      0|
   79|      0|        return Array(topShows.prefix(10))
   80|      0|    }
   81|       |
   82|       |}
   83|       |
   84|       |extension TMDbPersonService {
   85|       |
   86|      0|    private static func showSort(lhs: Show, rhs: Show) -> Bool {
   87|      0|        guard let lhsDate = lhs.date else {
   88|      0|            return false
   89|      0|        }
   90|      0|
   91|      0|        guard let rhsDate = rhs.date else {
   92|      0|            return true
   93|      0|        }
   94|      0|
   95|      0|        return lhsDate > rhsDate
   96|      0|    }
   97|       |
   98|      0|    private static func movieSort(lhs: Movie, rhs: Movie) -> Bool {
   99|      0|        guard let lhsDate = lhs.releaseDate else {
  100|      0|            return false
  101|      0|        }
  102|      0|
  103|      0|        guard let rhsDate = rhs.releaseDate else {
  104|      0|            return true
  105|      0|        }
  106|      0|
  107|      0|        return lhsDate > rhsDate
  108|      0|    }
  109|       |
  110|      0|    private static func tvShowSort(lhs: TVShow, rhs: TVShow) -> Bool {
  111|      0|        guard let lhsDate = lhs.firstAirDate else {
  112|      0|            return false
  113|      0|        }
  114|      0|
  115|      0|        guard let rhsDate = rhs.firstAirDate else {
  116|      0|            return true
  117|      0|        }
  118|      0|
  119|      0|        return lhsDate > rhsDate
  120|      0|    }
  121|       |
  122|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Search/SearchEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum SearchEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/search")!
    6|       |
    7|       |    case multi(query: String, page: Int? = nil)
    8|       |    case movies(query: String, year: Int? = nil, page: Int? = nil)
    9|       |    case tvShows(query: String, firstAirDateYear: Int? = nil, page: Int? = nil)
   10|       |    case people(query: String, page: Int? = nil)
   11|       |
   12|       |}
   13|       |
   14|       |extension SearchEndpoint: Endpoint {
   15|       |
   16|     12|    var url: URL {
   17|     12|        switch self {
   18|     12|
   19|     12|        case .multi(let query, let page):
   20|      2|            return Self.basePath
   21|      2|                .appendingPathComponent("multi")
   22|      2|                .appendingQueryItem(name: "query", value: query)
   23|      2|                .appendingPage(page)
   24|     12|
   25|     12|        case .movies(let query, let year, let page):
   26|      4|            return Self.basePath
   27|      4|                .appendingPathComponent("movie")
   28|      4|                .appendingQueryItem(name: "query", value: query)
   29|      4|                .appendingYear(year)
   30|      4|                .appendingPage(page)
   31|     12|
   32|     12|        case .tvShows(let query, let firstAirDateYear, let page):
   33|      4|            return Self.basePath
   34|      4|                .appendingPathComponent("tv")
   35|      4|                .appendingQueryItem(name: "query", value: query)
   36|      4|                .appendingFirstAirDateYear(firstAirDateYear)
   37|      4|                .appendingPage(page)
   38|     12|
   39|     12|        case .people(let query, let page):
   40|      2|            return Self.basePath
   41|      2|                .appendingPathComponent("person")
   42|      2|                .appendingQueryItem(name: "query", value: query)
   43|      2|                .appendingPage(page)
   44|     12|        }
   45|     12|    }
   46|       |
   47|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Search/SearchService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol SearchService {
    5|       |
    6|       |    func searchAll(query: String, page: Int?) -> AnyPublisher<MediaPageableList, TMDbError>
    7|       |
    8|       |    func searchMovies(query: String, year: Int?, page: Int?) -> AnyPublisher<MoviePageableList, TMDbError>
    9|       |
   10|       |    func searchTVShows(query: String, firstAirDateYear: Int?,
   11|       |                       page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError>
   12|       |
   13|       |    func searchPeople(query: String, page: Int?) -> AnyPublisher<PersonPageableList, TMDbError>
   14|       |
   15|       |}
   16|       |
   17|       |extension SearchService {
   18|       |
   19|      0|    public func searchAll(query: String, page: Int? = nil) -> AnyPublisher<MediaPageableList, TMDbError> {
   20|      0|        searchAll(query: query, page: page)
   21|      0|    }
   22|       |
   23|       |    public func searchMovies(query: String, year: Int? = nil,
   24|      0|                             page: Int? = nil) -> AnyPublisher<MoviePageableList, TMDbError> {
   25|      0|        searchMovies(query: query, year: year, page: page)
   26|      0|    }
   27|       |
   28|       |    public func searchTVShows(query: String, firstAirDateYear: Int? = nil,
   29|      0|                              page: Int? = nil) -> AnyPublisher<TVShowPageableList, TMDbError> {
   30|      0|        searchTVShows(query: query, firstAirDateYear: firstAirDateYear, page: page)
   31|      0|    }
   32|       |
   33|      0|    public func searchPeople(query: String, page: Int? = nil) -> AnyPublisher<PersonPageableList, TMDbError> {
   34|      0|        searchPeople(query: query, page: page)
   35|      0|    }
   36|       |
   37|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Search/TMDbSearchService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbSearchService: SearchService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      0|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      0|        self.apiClient = apiClient
   10|      0|    }
   11|       |
   12|      0|    public func searchAll(query: String, page: Int?) -> AnyPublisher<MediaPageableList, TMDbError> {
   13|      0|        apiClient.get(endpoint: SearchEndpoint.multi(query: query, page: page))
   14|      0|    }
   15|       |
   16|       |    public func searchMovies(query: String, year: Int?,
   17|      0|                             page: Int?) -> AnyPublisher<MoviePageableList, TMDbError> {
   18|      0|        apiClient.get(endpoint: SearchEndpoint.movies(query: query, year: year, page: page))
   19|      0|    }
   20|       |
   21|       |    public func searchTVShows(query: String, firstAirDateYear: Int?,
   22|      0|                              page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError> {
   23|      0|        apiClient.get(endpoint: SearchEndpoint.tvShows(query: query, firstAirDateYear: firstAirDateYear, page: page))
   24|      0|    }
   25|       |
   26|      0|    public func searchPeople(query: String, page: Int?) -> AnyPublisher<PersonPageableList, TMDbError> {
   27|      0|        apiClient.get(endpoint: SearchEndpoint.people(query: query, page: page))
   28|      0|    }
   29|       |
   30|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/TVShowSeasons/TMDbTVShowSeasonService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbTVShowSeasonService: TVShowSeasonService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      0|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      0|        self.apiClient = apiClient
   10|      0|    }
   11|       |
   12|       |    public func fetchDetails(forSeasonNumber seasonNumber: Int,
   13|      0|                             inTVShow tvShowID: TVShow.ID) -> AnyPublisher<TVShowSeason, TMDbError> {
   14|      0|        apiClient.get(endpoint: TVShowSeasonsEndpoint.details(tvShowID: tvShowID, seasonNumber: seasonNumber))
   15|      0|    }
   16|       |
   17|       |    public func fetchImages(forSeasonNumber seasonNumber: Int,
   18|      0|                            inTVShow tvShowID: TVShow.ID) -> AnyPublisher<ImageCollection, TMDbError> {
   19|      0|        apiClient.get(endpoint: TVShowSeasonsEndpoint.images(tvShowID: tvShowID, seasonNumber: seasonNumber))
   20|      0|    }
   21|       |
   22|       |    public func fetchVideos(forSeasonNumber seasonNumber: Int,
   23|      0|                            inTVShow tvShowID: TVShow.ID) -> AnyPublisher<VideoCollection, TMDbError> {
   24|      0|        apiClient.get(endpoint: TVShowSeasonsEndpoint.videos(tvShowID: tvShowID, seasonNumber: seasonNumber))
   25|      0|    }
   26|       |
   27|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/TVShowSeasons/TVShowSeasonsEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum TVShowSeasonsEndpoint {
    4|       |
    5|       |    static let basePath = "season"
    6|       |
    7|       |    case details(tvShowID: TVShow.ID, seasonNumber: Int)
    8|       |    case images(tvShowID: TVShow.ID, seasonNumber: Int)
    9|       |    case videos(tvShowID: TVShow.ID, seasonNumber: Int)
   10|       |
   11|       |}
   12|       |
   13|       |extension TVShowSeasonsEndpoint: Endpoint {
   14|       |
   15|      3|    var url: URL {
   16|      3|        switch self {
   17|      3|        case .details(let tvShowID, let seasonNumber):
   18|      1|            return TVShowsEndpoint.basePath
   19|      1|                .appendingPathComponent(tvShowID)
   20|      1|                .appendingPathComponent(Self.basePath)
   21|      1|                .appendingPathComponent(seasonNumber)
   22|      3|
   23|      3|        case .images(let tvShowID, let seasonNumber):
   24|      1|            return TVShowsEndpoint.basePath
   25|      1|                .appendingPathComponent(tvShowID)
   26|      1|                .appendingPathComponent(Self.basePath)
   27|      1|                .appendingPathComponent(seasonNumber)
   28|      1|                .appendingPathComponent("images")
   29|      3|
   30|      3|        case .videos(let tvShowID, let seasonNumber):
   31|      1|            return TVShowsEndpoint.basePath
   32|      1|                .appendingPathComponent(tvShowID)
   33|      1|                .appendingPathComponent(Self.basePath)
   34|      1|                .appendingPathComponent(seasonNumber)
   35|      1|                .appendingPathComponent("videos")
   36|      3|        }
   37|      3|    }
   38|       |
   39|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/TVShows/TMDbTVShowService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbTVShowService: TVShowService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      0|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      0|        self.apiClient = apiClient
   10|      0|    }
   11|       |
   12|      0|    public func fetchDetails(forTVShow id: TVShow.ID) -> AnyPublisher<TVShow, TMDbError> {
   13|      0|        apiClient.get(endpoint: TVShowsEndpoint.details(tvShowID: id))
   14|      0|    }
   15|       |
   16|      0|    public func fetchCredits(forTVShow tvShowID: TVShow.ID) -> AnyPublisher<ShowCredits, TMDbError> {
   17|      0|        apiClient.get(endpoint: TVShowsEndpoint.credits(tvShowID: tvShowID))
   18|      0|    }
   19|       |
   20|       |    public func fetchReviews(forTVShow tvShowID: TVShow.ID,
   21|      0|                             page: Int?) -> AnyPublisher<ReviewPageableList, TMDbError> {
   22|      0|        apiClient.get(endpoint: TVShowsEndpoint.reviews(tvShowID: tvShowID, page: page))
   23|      0|    }
   24|       |
   25|      0|    public func fetchImages(forTVShow tvShowID: TVShow.ID) -> AnyPublisher<ImageCollection, TMDbError> {
   26|      0|        apiClient.get(endpoint: TVShowsEndpoint.images(tvShowID: tvShowID))
   27|      0|    }
   28|       |
   29|      0|    public func fetchVideos(forTVShow tvShowID: TVShow.ID) -> AnyPublisher<VideoCollection, TMDbError> {
   30|      0|        apiClient.get(endpoint: TVShowsEndpoint.videos(tvShowID: tvShowID))
   31|      0|    }
   32|       |
   33|       |    public func fetchRecommendations(forTVShow tvShowID: TVShow.ID,
   34|      0|                                     page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError> {
   35|      0|        apiClient.get(endpoint: TVShowsEndpoint.recommendations(tvShowID: tvShowID, page: page))
   36|      0|    }
   37|       |
   38|       |    public func fetchSimilar(toTVShow tvShowID: TVShow.ID,
   39|      0|                             page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError> {
   40|      0|        apiClient.get(endpoint: TVShowsEndpoint.similar(tvShowID: tvShowID, page: page))
   41|      0|    }
   42|       |
   43|      0|    public func fetchPopular(page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError> {
   44|      0|        apiClient.get(endpoint: TVShowsEndpoint.popular(page: page))
   45|      0|    }
   46|       |
   47|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/TVShows/TVShowService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol TVShowService {
    5|       |
    6|       |    func fetchDetails(forTVShow id: TVShow.ID) -> AnyPublisher<TVShow, TMDbError>
    7|       |
    8|       |    func fetchCredits(forTVShow tvShowID: TVShow.ID) -> AnyPublisher<ShowCredits, TMDbError>
    9|       |
   10|       |    func fetchReviews(forTVShow tvShowID: TVShow.ID, page: Int?) -> AnyPublisher<ReviewPageableList, TMDbError>
   11|       |
   12|       |    func fetchImages(forTVShow tvShowID: TVShow.ID) -> AnyPublisher<ImageCollection, TMDbError>
   13|       |
   14|       |    func fetchVideos(forTVShow tvShowID: TVShow.ID) -> AnyPublisher<VideoCollection, TMDbError>
   15|       |
   16|       |    func fetchRecommendations(forTVShow tvShowID: TVShow.ID,
   17|       |                              page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError>
   18|       |
   19|       |    func fetchSimilar(toTVShow tvShowID: TVShow.ID, page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError>
   20|       |
   21|       |    func fetchPopular(page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError>
   22|       |
   23|       |}
   24|       |
   25|       |extension TVShowService {
   26|       |
   27|      0|    public func fetchDetails(forTVShow id: TVShow.ID) -> AnyPublisher<TVShow, TMDbError> {
   28|      0|        fetchDetails(forTVShow: id)
   29|      0|    }
   30|       |
   31|       |    public func fetchReviews(forTVShow tvShowID: TVShow.ID,
   32|      0|                             page: Int? = nil) -> AnyPublisher<ReviewPageableList, TMDbError> {
   33|      0|        fetchReviews(forTVShow: tvShowID, page: page)
   34|      0|    }
   35|       |
   36|       |    public func fetchRecommendations(forTVShow tvShowID: TVShow.ID,
   37|      0|                                     page: Int? = nil) -> AnyPublisher<TVShowPageableList, TMDbError> {
   38|      0|        fetchRecommendations(forTVShow: tvShowID, page: page)
   39|      0|    }
   40|       |
   41|       |    public func fetchSimilar(toTVShow tvShowID: TVShow.ID,
   42|      0|                             page: Int? = nil) -> AnyPublisher<TVShowPageableList, TMDbError> {
   43|      0|        fetchSimilar(toTVShow: tvShowID, page: page)
   44|      0|    }
   45|       |
   46|      0|    public func fetchPopular(page: Int? = nil) -> AnyPublisher<TVShowPageableList, TMDbError> {
   47|      0|        fetchPopular(page: page)
   48|      0|    }
   49|       |
   50|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/TVShows/TVShowsEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum TVShowsEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/tv")!
    6|       |
    7|       |    case details(tvShowID: TVShow.ID)
    8|       |    case credits(tvShowID: TVShow.ID)
    9|       |    case reviews(tvShowID: TVShow.ID, page: Int? = nil)
   10|       |    case images(tvShowID: TVShow.ID)
   11|       |    case videos(tvShowID: TVShow.ID)
   12|       |    case recommendations(tvShowID: TVShow.ID, page: Int? = nil)
   13|       |    case similar(tvShowID: TVShow.ID, page: Int? = nil)
   14|       |    case popular(page: Int? = nil)
   15|       |
   16|       |}
   17|       |
   18|       |extension TVShowsEndpoint: Endpoint {
   19|       |
   20|     12|    var url: URL {
   21|     12|        switch self {
   22|     12|        case .details(let tvShowID):
   23|      1|            return Self.basePath
   24|      1|                .appendingPathComponent(tvShowID)
   25|     12|
   26|     12|        case .credits(let tvShowID):
   27|      1|            return Self.basePath
   28|      1|                .appendingPathComponent(tvShowID)
   29|      1|                .appendingPathComponent("credits")
   30|     12|
   31|     12|        case .reviews(let tvShowID, let page):
   32|      2|            return Self.basePath
   33|      2|                .appendingPathComponent(tvShowID)
   34|      2|                .appendingPathComponent("reviews")
   35|      2|                .appendingPage(page)
   36|     12|
   37|     12|        case .images(let tvShowID):
   38|      1|            return Self.basePath
   39|      1|                .appendingPathComponent(tvShowID)
   40|      1|                .appendingPathComponent("images")
   41|     12|
   42|     12|        case .videos(let tvShowID):
   43|      1|            return Self.basePath
   44|      1|                .appendingPathComponent(tvShowID)
   45|      1|                .appendingPathComponent("videos")
   46|     12|
   47|     12|        case .recommendations(let tvShowID, let page):
   48|      2|            return Self.basePath
   49|      2|                .appendingPathComponent(tvShowID)
   50|      2|                .appendingPathComponent("recommendations")
   51|      2|                .appendingPage(page)
   52|     12|
   53|     12|        case .similar(let tvShowID, let page):
   54|      2|            return Self.basePath
   55|      2|                .appendingPathComponent(tvShowID)
   56|      2|                .appendingPathComponent("similar")
   57|      2|                .appendingPage(page)
   58|     12|
   59|     12|        case .popular(let page):
   60|      2|            return Self.basePath
   61|      2|                .appendingPathComponent("popular")
   62|      2|                .appendingPage(page)
   63|     12|        }
   64|     12|    }
   65|       |
   66|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Trending/TMDbTrendingService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public final class TMDbTrendingService: TrendingService {
    5|       |
    6|       |    private let apiClient: APIClient
    7|       |
    8|      0|    public init(apiClient: APIClient = TMDbAPIClient.shared) {
    9|      0|        self.apiClient = apiClient
   10|      0|    }
   11|       |
   12|       |    public func fetchMovies(timeWindow: TrendingTimeWindowFilterType,
   13|      0|                            page: Int?) -> AnyPublisher<MoviePageableList, TMDbError> {
   14|      0|        apiClient.get(endpoint: TrendingEndpoint.movies(timeWindow: timeWindow, page: page))
   15|      0|    }
   16|       |
   17|       |    public func fetchTVShows(timeWindow: TrendingTimeWindowFilterType,
   18|      0|                             page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError> {
   19|      0|        apiClient.get(endpoint: TrendingEndpoint.tvShows(timeWindow: timeWindow, page: page))
   20|      0|    }
   21|       |
   22|       |    public func fetchPeople(timeWindow: TrendingTimeWindowFilterType,
   23|      0|                            page: Int?) -> AnyPublisher<PersonPageableList, TMDbError> {
   24|      0|        apiClient.get(endpoint: TrendingEndpoint.people(timeWindow: timeWindow, page: page))
   25|      0|    }
   26|       |
   27|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Trending/TrendingEndpoint.swift:
    1|       |import Foundation
    2|       |
    3|       |enum TrendingEndpoint {
    4|       |
    5|       |    static let basePath = URL(string: "/trending")!
    6|       |
    7|       |    case movies(timeWindow: TrendingTimeWindowFilterType = .default, page: Int? = nil)
    8|       |    case tvShows(timeWindow: TrendingTimeWindowFilterType = .default, page: Int? = nil)
    9|       |    case people(timeWindow: TrendingTimeWindowFilterType = .default, page: Int? = nil)
   10|       |
   11|       |}
   12|       |
   13|       |extension TrendingEndpoint: Endpoint {
   14|       |
   15|     18|    var url: URL {
   16|     18|        switch self {
   17|     18|        case .movies(let timeWindow, let page):
   18|      6|            return Self.basePath
   19|      6|                .appendingPathComponent("movie")
   20|      6|                .appendingPathComponent(timeWindow)
   21|      6|                .appendingPage(page)
   22|     18|
   23|     18|        case .tvShows(let timeWindow, let page):
   24|      6|            return Self.basePath
   25|      6|                .appendingPathComponent("tv")
   26|      6|                .appendingPathComponent(timeWindow)
   27|      6|                .appendingPage(page)
   28|     18|
   29|     18|        case .people(let timeWindow, let page):
   30|      6|            return Self.basePath
   31|      6|                .appendingPathComponent("person")
   32|      6|                .appendingPathComponent(timeWindow)
   33|      6|                .appendingPage(page)
   34|     18|        }
   35|     18|    }
   36|       |
   37|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Trending/TrendingService.swift:
    1|       |import Combine
    2|       |import Foundation
    3|       |
    4|       |public protocol TrendingService {
    5|       |
    6|       |    func fetchMovies(timeWindow: TrendingTimeWindowFilterType,
    7|       |                     page: Int?) -> AnyPublisher<MoviePageableList, TMDbError>
    8|       |
    9|       |    func fetchTVShows(timeWindow: TrendingTimeWindowFilterType,
   10|       |                      page: Int?) -> AnyPublisher<TVShowPageableList, TMDbError>
   11|       |
   12|       |    func fetchPeople(timeWindow: TrendingTimeWindowFilterType,
   13|       |                     page: Int?) -> AnyPublisher<PersonPageableList, TMDbError>
   14|       |
   15|       |}
   16|       |
   17|       |extension TrendingService {
   18|       |
   19|       |    public func fetchMovies(timeWindow: TrendingTimeWindowFilterType = .default,
   20|      0|                            page: Int? = nil) -> AnyPublisher<MoviePageableList, TMDbError> {
   21|      0|        fetchMovies(timeWindow: timeWindow, page: page)
   22|      0|    }
   23|       |
   24|       |    public func fetchTVShows(timeWindow: TrendingTimeWindowFilterType = .default,
   25|      0|                             page: Int? = nil) -> AnyPublisher<TVShowPageableList, TMDbError> {
   26|      0|        fetchTVShows(timeWindow: timeWindow, page: page)
   27|      0|    }
   28|       |
   29|       |    public func fetchPeople(timeWindow: TrendingTimeWindowFilterType = .default,
   30|      0|                            page: Int? = nil) -> AnyPublisher<PersonPageableList, TMDbError> {
   31|      0|        fetchPeople(timeWindow: timeWindow, page: page)
   32|      0|    }
   33|       |
   34|       |}

/Users/younga/projects/MoviesApp/TMDb/Sources/TMDb/Services/Trending/TrendingTimeWindowFilterType.swift:
    1|       |import Foundation
    2|       |
    3|       |public enum TrendingTimeWindowFilterType: String {
    4|       |
    5|       |    case day
    6|       |    case week
    7|       |
    8|       |    public static var `default`: Self = .day
    9|       |
   10|       |}
   11|       |
   12|       |extension URL {
   13|       |
   14|     18|    func appendingPathComponent(_ filterType: TrendingTimeWindowFilterType) -> Self {
   15|     18|        appendingPathComponent(filterType.rawValue)
   16|     18|    }
   17|       |
   18|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Extensions/DateFormatter+TMDbTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class DataFormatterTMDbTests: XCTestCase {
    5|       |
    6|      1|    func testTheMovieDatabaseFormatter_hasCorrectDateFormat() {
    7|      1|        let expectedResult = "yyyy-MM-dd"
    8|      1|
    9|      1|        let result = DateFormatter.theMovieDatabase.dateFormat
   10|      1|
   11|      1|        XCTAssertEqual(result, expectedResult)
   12|      1|    }
   13|       |
   14|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Extensions/JSONDecoder+TMDbTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class JSONDecoderTMDbTests: XCTestCase {
    5|       |
    6|      1|    private static var dateFormatter: DateFormatter {
    7|      1|        let dateFormatter = DateFormatter()
    8|      1|        dateFormatter.dateFormat = "yyyy-MM-ddd"
    9|      1|        return dateFormatter
   10|      1|    }
   11|       |
   12|      1|    func testTheMovieDatabaseDecoder_decodesObject() throws {
   13|      1|        let expectedResult = SomeThing(
   14|      1|            id: "abc123",
   15|      1|            firstName: "Adam",
   16|      1|            dateOfBirth: Self.dateFormatter.date(from: "1990-01-02")!
   17|      1|        )
   18|      1|
   19|      1|        let jsonString = """
   20|      1|        {
   21|      1|            "id": "abc123",
   22|      1|            "first_name": "Adam",
   23|      1|            "date_of_birth": "1990-01-02"
   24|      1|        }
   25|      1|        """
   26|      1|        let data = jsonString.data(using: .utf8)!
   27|      1|
   28|      1|        let result = try JSONDecoder.theMovieDatabase.decode(SomeThing.self, from: data)
   29|      1|
   30|      1|        XCTAssertEqual(result, expectedResult)
   31|      1|    }
   32|       |
   33|       |    private struct SomeThing: Decodable, Equatable {
   34|       |
   35|       |        let id: String
   36|       |        let firstName: String
   37|       |        let dateOfBirth: Date
   38|       |
   39|       |    }
   40|       |
   41|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Extensions/URL+QueryItemTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class URLQueryItemTests: XCTestCase {
    5|       |
    6|      1|    func testAppendingIntPathComponent_returnsURL() {
    7|      1|        let expectedResult = URL(string: "/some/path/2")!
    8|      1|
    9|      1|        let result = URL(string: "/some/path")!.appendingPathComponent(2)
   10|      1|
   11|      1|        XCTAssertEqual(result, expectedResult)
   12|      1|    }
   13|       |
   14|      1|    func testAppendingQueryItem_whenNoQueryItems_returnsURL() {
   15|      1|        let expectedResult = URL(string: "/some/path?a=b")!
   16|      1|
   17|      1|        let result = URL(string: "/some/path")!.appendingQueryItem(name: "a", value: "b")
   18|      1|
   19|      1|        XCTAssertEqual(result, expectedResult)
   20|      1|    }
   21|       |
   22|      1|    func testAppendingQueryItem_whenContainsQueryItems_returnsURL() {
   23|      1|        let expectedResult = URL(string: "/some/path?a=b&c=d")!
   24|      1|
   25|      1|        let result = URL(string: "/some/path?a=b")!.appendingQueryItem(name: "c", value: "d")
   26|      1|
   27|      1|        XCTAssertEqual(result, expectedResult)
   28|      1|    }
   29|       |
   30|      1|    func testAppendingAPIKey_whenNoQueryItems_returnsURL() {
   31|      1|        let expectedResult = URL(string: "/some/path?api_key=123456")!
   32|      1|
   33|      1|        let result = URL(string: "/some/path")!.appendingAPIKey("123456")
   34|      1|
   35|      1|        XCTAssertEqual(result, expectedResult)
   36|      1|    }
   37|       |
   38|      1|    func testAppendingAPIKey_whenContainsQueryItems_returnsURL() {
   39|      1|        let expectedResult = URL(string: "/some/path?a=b&api_key=123456")!
   40|      1|
   41|      1|        let result = URL(string: "/some/path?a=b")!.appendingAPIKey("123456")
   42|      1|
   43|      1|        XCTAssertEqual(result, expectedResult)
   44|      1|    }
   45|       |
   46|      1|    func testAppendingPage_whenNoQueryItemsAndPageIsNil_returnsURL() {
   47|      1|        let expectedResult = URL(string: "/some/path")!
   48|      1|
   49|      1|        let result = URL(string: "/some/path")!.appendingPage(nil)
   50|      1|
   51|      1|        XCTAssertEqual(result, expectedResult)
   52|      1|    }
   53|       |
   54|      1|    func testAppendingPage_whenContainsQueryItemAndPageIsNil_returnsURL() {
   55|      1|        let expectedResult = URL(string: "/some/path?a=b")!
   56|      1|
   57|      1|        let result = URL(string: "/some/path?a=b")!.appendingPage(nil)
   58|      1|
   59|      1|        XCTAssertEqual(result, expectedResult)
   60|      1|    }
   61|       |
   62|      1|    func testAppendingPage_whenNoQueryItemsAndPageIsLessThan1_returnsURL() {
   63|      1|        let expectedResult = URL(string: "/some/path?page=1")!
   64|      1|
   65|      1|        let result = URL(string: "/some/path")!.appendingPage(0)
   66|      1|
   67|      1|        XCTAssertEqual(result, expectedResult)
   68|      1|    }
   69|       |
   70|      1|    func testAppendingPage_whenContainsQueryItemAndPageIsLessThan1_returnsURL() {
   71|      1|        let expectedResult = URL(string: "/some/path?a=b&page=1")!
   72|      1|
   73|      1|        let result = URL(string: "/some/path?a=b")!.appendingPage(0)
   74|      1|
   75|      1|        XCTAssertEqual(result, expectedResult)
   76|      1|    }
   77|       |
   78|      1|    func testAppendingPage_whenNoQueryItemsAndPageIsBetween1and1000_returnsURL() {
   79|      1|        let expectedResult = URL(string: "/some/path?page=500")!
   80|      1|
   81|      1|        let result = URL(string: "/some/path")!.appendingPage(500)
   82|      1|
   83|      1|        XCTAssertEqual(result, expectedResult)
   84|      1|    }
   85|       |
   86|      1|    func testAppendingPage_whenContainsQueryItemAndPageIsBetween1and1000_returnsURL() {
   87|      1|        let expectedResult = URL(string: "/some/path?a=b&page=500")!
   88|      1|
   89|      1|        let result = URL(string: "/some/path?a=b")!.appendingPage(500)
   90|      1|
   91|      1|        XCTAssertEqual(result, expectedResult)
   92|      1|    }
   93|       |
   94|      1|    func testAppendingPage_whenNoQueryItemsAndPageIsGreaterThan1000_returnsURL() {
   95|      1|        let expectedResult = URL(string: "/some/path?page=1000")!
   96|      1|
   97|      1|        let result = URL(string: "/some/path")!.appendingPage(1001)
   98|      1|
   99|      1|        XCTAssertEqual(result, expectedResult)
  100|      1|    }
  101|       |
  102|      1|    func testAppendingPage_whenContainsQueryItemAndPageIsGreaterThan1000_returnsURL() {
  103|      1|        let expectedResult = URL(string: "/some/path?a=b&page=1000")!
  104|      1|
  105|      1|        let result = URL(string: "/some/path?a=b")!.appendingPage(1001)
  106|      1|
  107|      1|        XCTAssertEqual(result, expectedResult)
  108|      1|    }
  109|       |
  110|      1|    func testAppendingYear_whenNoQueryItemsAndYearIsNil_returnsURL() {
  111|      1|        let expectedResult = URL(string: "/some/path")!
  112|      1|
  113|      1|        let result = URL(string: "/some/path")!.appendingYear(nil)
  114|      1|
  115|      1|        XCTAssertEqual(result, expectedResult)
  116|      1|    }
  117|       |
  118|      1|    func testAppendingYear_whenContainsQueryItemAndYearIsNil_returnsURL() {
  119|      1|        let expectedResult = URL(string: "/some/path?a=b")!
  120|      1|
  121|      1|        let result = URL(string: "/some/path?a=b")!.appendingYear(nil)
  122|      1|
  123|      1|        XCTAssertEqual(result, expectedResult)
  124|      1|    }
  125|       |
  126|      1|    func testAppendingYear_whenNoQueryItemsAndYearIsNotNil_returnsURL() {
  127|      1|        let expectedResult = URL(string: "/some/path?year=2020")!
  128|      1|
  129|      1|        let result = URL(string: "/some/path")!.appendingYear(2020)
  130|      1|
  131|      1|        XCTAssertEqual(result, expectedResult)
  132|      1|    }
  133|       |
  134|      1|    func testAppendingYear_whenContainsQueryItemAndYearIsNotNil_returnsURL() {
  135|      1|        let expectedResult = URL(string: "/some/path?a=b&year=2020")!
  136|      1|
  137|      1|        let result = URL(string: "/some/path?a=b")!.appendingYear(2020)
  138|      1|
  139|      1|        XCTAssertEqual(result, expectedResult)
  140|      1|    }
  141|       |
  142|      1|    func testAppendingFirstAirDateYear_whenNoQueryItemsAndYearIsNil_returnsURL() {
  143|      1|        let expectedResult = URL(string: "/some/path")!
  144|      1|
  145|      1|        let result = URL(string: "/some/path")!.appendingFirstAirDateYear(nil)
  146|      1|
  147|      1|        XCTAssertEqual(result, expectedResult)
  148|      1|    }
  149|       |
  150|      1|    func testAppendingFirstAirDateYear_whenContainsQueryItemAndYearIsNil_returnsURL() {
  151|      1|        let expectedResult = URL(string: "/some/path?a=b")!
  152|      1|
  153|      1|        let result = URL(string: "/some/path?a=b")!.appendingFirstAirDateYear(nil)
  154|      1|
  155|      1|        XCTAssertEqual(result, expectedResult)
  156|      1|    }
  157|       |
  158|      1|    func testAppendingFirstAirDateYear_whenNoQueryItemsAndYearIsNotNil_returnsURL() {
  159|      1|        let expectedResult = URL(string: "/some/path?first_air_date_year=2020")!
  160|      1|
  161|      1|        let result = URL(string: "/some/path")!.appendingFirstAirDateYear(2020)
  162|      1|
  163|      1|        XCTAssertEqual(result, expectedResult)
  164|      1|    }
  165|       |
  166|      1|    func testAppendingFirstAirDateYear_whenContainsQueryItemAndYearIsNotNil_returnsURL() {
  167|      1|        let expectedResult = URL(string: "/some/path?a=b&first_air_date_year=2020")!
  168|      1|
  169|      1|        let result = URL(string: "/some/path?a=b")!.appendingFirstAirDateYear(2020)
  170|      1|
  171|      1|        XCTAssertEqual(result, expectedResult)
  172|      1|    }
  173|       |
  174|      1|    func testAppendingWithPeople_whenNoQueryItemsAndWithPeopleIsNil_returnsURL() {
  175|      1|        let expectedResult = URL(string: "/some/path")!
  176|      1|
  177|      1|        let result = URL(string: "/some/path")!.appendingWithPeople(nil)
  178|      1|
  179|      1|        XCTAssertEqual(result, expectedResult)
  180|      1|    }
  181|       |
  182|      1|    func testAppendingWithPeople_whenContainsQueryItemAndWithPeopleIsNil_returnsURL() {
  183|      1|        let expectedResult = URL(string: "/some/path?a=b")!
  184|      1|
  185|      1|        let result = URL(string: "/some/path?a=b")!.appendingWithPeople(nil)
  186|      1|
  187|      1|        XCTAssertEqual(result, expectedResult)
  188|      1|    }
  189|       |
  190|      1|    func testAppendingWithPeople_whenNoQueryItemsAndWithPeopleHasOneElement_returnsURL() {
  191|      1|        let expectedResult = URL(string: "/some/path?with_people=1")!
  192|      1|
  193|      1|        let result = URL(string: "/some/path")!.appendingWithPeople([1])
  194|      1|
  195|      1|        XCTAssertEqual(result, expectedResult)
  196|      1|    }
  197|       |
  198|      1|    func testAppendingWithPeople_whenContainsQueryItemAndWithPeopleHasOneElement_returnsURL() {
  199|      1|        let expectedResult = URL(string: "/some/path?a=b&with_people=1")!
  200|      1|
  201|      1|        let result = URL(string: "/some/path?a=b")!.appendingWithPeople([1])
  202|      1|
  203|      1|        XCTAssertEqual(result, expectedResult)
  204|      1|    }
  205|       |
  206|      1|    func testAppendingWithPeople_whenContainsQueryItemAndWithPeopleHasTwoElements_returnsURL() {
  207|      1|        let expectedResult = URL(string: "/some/path?a=b&with_people=1,2")!
  208|      1|
  209|      1|        let result = URL(string: "/some/path?a=b")!.appendingWithPeople([1, 2])
  210|      1|
  211|      1|        XCTAssertEqual(result, expectedResult)
  212|      1|    }
  213|       |
  214|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Helpers/MockAPIClient.swift:
    1|       |import Combine
    2|       |@testable import TMDb
    3|       |import XCTest
    4|       |
    5|       |class MockAPIClient: APIClient {
    6|       |
    7|       |    var response: Any?
    8|       |    private(set) var lastPath: URL?
    9|       |    private(set) var lastHTTPHeaders: [String: String]?
   10|       |
   11|      0|    static func setAPIKey(_ apiKey: String) { }
   12|       |
   13|     13|    func get<Response: Decodable>(path: URL, httpHeaders: [String: String]?) -> AnyPublisher<Response, TMDbError> {
   14|     13|        self.lastPath = path
   15|     13|        self.lastHTTPHeaders = httpHeaders
   16|     13|
   17|     13|        guard let result = response as? Response else {
   18|      0|            XCTFail("Can't cast response to type \(String(describing: Response.self))")
   19|      0|            return Empty()
   20|      0|                .setFailureType(to: TMDbError.self)
   21|      0|                .eraseToAnyPublisher()
   22|     13|        }
   23|     13|
   24|     13|        return Just(result)
   25|     13|            .setFailureType(to: TMDbError.self)
   26|     13|            .eraseToAnyPublisher()
   27|     13|    }
   28|       |
   29|     12|    func reset() {
   30|     12|        response = nil
   31|     12|        lastPath = nil
   32|     12|        lastHTTPHeaders = nil
   33|     12|    }
   34|       |
   35|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/APIConfigurationTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class APIConfigurationTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsAPIConfiguration() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(APIConfiguration.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.images, apiConfiguration.images)
   11|      1|        XCTAssertEqual(result.changeKeys, apiConfiguration.changeKeys)
   12|      1|    }
   13|       |
   14|       |    private let json = """
   15|       |    {
   16|       |      "images": {
   17|       |        "base_url": "http://image.tmdb.org/t/p/",
   18|       |        "secure_base_url": "https://image.tmdb.org/t/p/",
   19|       |        "backdrop_sizes": [
   20|       |          "w300",
   21|       |          "w780",
   22|       |          "w1280",
   23|       |          "original"
   24|       |        ],
   25|       |        "logo_sizes": [
   26|       |          "w45",
   27|       |          "w92",
   28|       |          "w154",
   29|       |          "w185",
   30|       |          "w300",
   31|       |          "w500",
   32|       |          "original"
   33|       |        ],
   34|       |        "poster_sizes": [
   35|       |          "w92",
   36|       |          "w154",
   37|       |          "w185",
   38|       |          "w342",
   39|       |          "w500",
   40|       |          "w780",
   41|       |          "original"
   42|       |        ],
   43|       |        "profile_sizes": [
   44|       |          "w45",
   45|       |          "w185",
   46|       |          "h632",
   47|       |          "original"
   48|       |        ],
   49|       |        "still_sizes": [
   50|       |          "w92",
   51|       |          "w185",
   52|       |          "w300",
   53|       |          "original"
   54|       |        ]
   55|       |      },
   56|       |      "change_keys": [
   57|       |        "adult",
   58|       |        "air_date",
   59|       |        "also_known_as",
   60|       |        "alternative_titles",
   61|       |        "biography",
   62|       |        "birthday",
   63|       |        "budget",
   64|       |        "cast",
   65|       |        "certifications",
   66|       |        "character_names",
   67|       |        "created_by",
   68|       |        "crew",
   69|       |        "deathday",
   70|       |        "episode",
   71|       |        "episode_number",
   72|       |        "episode_run_time",
   73|       |        "freebase_id",
   74|       |        "freebase_mid",
   75|       |        "general",
   76|       |        "genres",
   77|       |        "guest_stars",
   78|       |        "homepage",
   79|       |        "images",
   80|       |        "imdb_id",
   81|       |        "languages",
   82|       |        "name",
   83|       |        "network",
   84|       |        "origin_country",
   85|       |        "original_name",
   86|       |        "original_title",
   87|       |        "overview",
   88|       |        "parts",
   89|       |        "place_of_birth",
   90|       |        "plot_keywords",
   91|       |        "production_code",
   92|       |        "production_companies",
   93|       |        "production_countries",
   94|       |        "releases",
   95|       |        "revenue",
   96|       |        "runtime",
   97|       |        "season",
   98|       |        "season_number",
   99|       |        "season_regular",
  100|       |        "spoken_languages",
  101|       |        "status",
  102|       |        "tagline",
  103|       |        "title",
  104|       |        "translations",
  105|       |        "tvdb_id",
  106|       |        "tvrage_id",
  107|       |        "type",
  108|       |        "video",
  109|       |        "videos"
  110|       |      ]
  111|       |    }
  112|       |    """
  113|       |
  114|      1|    private let apiConfiguration = APIConfiguration(
  115|      1|        images: ImagesConfiguration(
  116|      1|            baseUrl: URL(string: "http://image.tmdb.org/t/p/")!,
  117|      1|            secureBaseUrl: URL(string: "https://image.tmdb.org/t/p/")!,
  118|      1|            backdropSizes: [
  119|      1|                "w300",
  120|      1|                "w780",
  121|      1|                "w1280",
  122|      1|                "original"
  123|      1|            ],
  124|      1|            logoSizes: [
  125|      1|                "w45",
  126|      1|                "w92",
  127|      1|                "w154",
  128|      1|                "w185",
  129|      1|                "w300",
  130|      1|                "w500",
  131|      1|                "original"
  132|      1|            ],
  133|      1|            posterSizes: [
  134|      1|                "w92",
  135|      1|                "w154",
  136|      1|                "w185",
  137|      1|                "w342",
  138|      1|                "w500",
  139|      1|                "w780",
  140|      1|                "original"
  141|      1|            ],
  142|      1|            profileSizes: [
  143|      1|                "w45",
  144|      1|                "w185",
  145|      1|                "h632",
  146|      1|                "original"
  147|      1|            ],
  148|      1|            stillSizes: [
  149|      1|                "w92",
  150|      1|                "w185",
  151|      1|                "w300",
  152|      1|                "original"
  153|      1|            ]
  154|      1|        ),
  155|      1|        changeKeys: [
  156|      1|            "adult",
  157|      1|            "air_date",
  158|      1|            "also_known_as",
  159|      1|            "alternative_titles",
  160|      1|            "biography",
  161|      1|            "birthday",
  162|      1|            "budget",
  163|      1|            "cast",
  164|      1|            "certifications",
  165|      1|            "character_names",
  166|      1|            "created_by",
  167|      1|            "crew",
  168|      1|            "deathday",
  169|      1|            "episode",
  170|      1|            "episode_number",
  171|      1|            "episode_run_time",
  172|      1|            "freebase_id",
  173|      1|            "freebase_mid",
  174|      1|            "general",
  175|      1|            "genres",
  176|      1|            "guest_stars",
  177|      1|            "homepage",
  178|      1|            "images",
  179|      1|            "imdb_id",
  180|      1|            "languages",
  181|      1|            "name",
  182|      1|            "network",
  183|      1|            "origin_country",
  184|      1|            "original_name",
  185|      1|            "original_title",
  186|      1|            "overview",
  187|      1|            "parts",
  188|      1|            "place_of_birth",
  189|      1|            "plot_keywords",
  190|      1|            "production_code",
  191|      1|            "production_companies",
  192|      1|            "production_countries",
  193|      1|            "releases",
  194|      1|            "revenue",
  195|      1|            "runtime",
  196|      1|            "season",
  197|      1|            "season_number",
  198|      1|            "season_regular",
  199|      1|            "spoken_languages",
  200|      1|            "status",
  201|      1|            "tagline",
  202|      1|            "title",
  203|      1|            "translations",
  204|      1|            "tvdb_id",
  205|      1|            "tvrage_id",
  206|      1|            "type",
  207|      1|            "video",
  208|      1|            "videos"
  209|      1|        ]
  210|      1|    )
  211|       |
  212|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/CastMemberTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class CastMemberTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsCastMember() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(CastMember.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, castMember)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |      "cast_id": 4,
   16|       |      "character": "The Narrator",
   17|       |      "credit_id": "52fe4250c3a36847f80149f3",
   18|       |      "gender": 2,
   19|       |      "id": 819,
   20|       |      "name": "Edward Norton",
   21|       |      "order": 0,
   22|       |      "profile_path": "/eIkFHNlfretLS1spAcIoihKUS62.jpg"
   23|       |    }
   24|       |    """
   25|       |
   26|      1|    private let castMember = CastMember(
   27|      1|        id: 819,
   28|      1|        castID: 4,
   29|      1|        creditID: "52fe4250c3a36847f80149f3",
   30|      1|        name: "Edward Norton",
   31|      1|        character: "The Narrator",
   32|      1|        gender: .male,
   33|      1|        profilePath: URL(string: "/eIkFHNlfretLS1spAcIoihKUS62.jpg"),
   34|      1|        order: 0
   35|      1|    )
   36|       |
   37|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/CertificationTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class CertificationTests: XCTestCase {
    5|       |
    6|      1|    func testID_returnsCode() {
    7|      1|        XCTAssertEqual(certification.id, certification.code)
    8|      1|    }
    9|       |
   10|      1|    func testDecode_returnsCertification() throws {
   11|      1|        let data = json.data(using: .utf8)!
   12|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Certification.self, from: data)
   13|      1|
   14|      1|        XCTAssertEqual(result, certification)
   15|      1|    }
   16|       |
   17|       |    // swiftlint:disable line_length
   18|       |    private let json = """
   19|       |    {
   20|       |        "certification": "15",
   21|       |        "meaning": "Only those over 15 years are admitted. Nobody younger than 15 can rent or buy a 15-rated VHS, DVD, Blu-ray Disc, UMD or game, or watch a film in the cinema with this rating. Films under this category can contain adult themes, hard drugs, frequent strong language and limited use of very strong language, strong violence and strong sex references, and nudity without graphic detail. Sexual activity may be portrayed but without any strong detail. Sexual violence may be shown if discreet and justified by context.",
   22|       |        "order": 5
   23|       |    }
   24|       |    """
   25|       |
   26|      2|    private let certification = Certification(
   27|      2|        code: "15",
   28|      2|        meaning: "Only those over 15 years are admitted. Nobody younger than 15 can rent or buy a 15-rated VHS, DVD, Blu-ray Disc, UMD or game, or watch a film in the cinema with this rating. Films under this category can contain adult themes, hard drugs, frequent strong language and limited use of very strong language, strong violence and strong sex references, and nudity without graphic detail. Sexual activity may be portrayed but without any strong detail. Sexual violence may be shown if discreet and justified by context.",
   29|      2|        order: 5
   30|      2|    )
   31|       |    // swiftlint:enable line_length
   32|       |
   33|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/CertificationsTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class CertificationsTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsCertifications() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Certifications.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, certifications)
   11|      1|    }
   12|       |
   13|       |    // swiftlint:disable line_length
   14|       |    private let json = """
   15|       |    {
   16|       |      "certifications": {
   17|       |        "US": [
   18|       |          {
   19|       |            "certification": "G",
   20|       |            "meaning": "All ages admitted. There is no content that would be objectionable to most parents. This is one of only two ratings dating back to 1968 that still exists today.",
   21|       |            "order": 1
   22|       |          },
   23|       |          {
   24|       |            "certification": "PG-13",
   25|       |            "meaning": "Some material may be inappropriate for children under 13. Films given this rating may contain sexual content, brief or partial nudity, some strong language and innuendo, humor, mature themes, political themes, terror and/or intense action violence. However, bloodshed is rarely present. This is the minimum rating at which drug content is present.",
   26|       |            "order": 3
   27|       |          },
   28|       |          {
   29|       |            "certification": "R",
   30|       |            "meaning": "Under 17 requires accompanying parent or adult guardian 21 or older. The parent/guardian is required to stay with the child under 17 through the entire movie, even if the parent gives the child/teenager permission to see the film alone. These films may contain strong profanity, graphic sexuality, nudity, strong violence, horror, gore, and strong drug use. A movie rated R for profanity often has more severe or frequent language than the PG-13 rating would permit. An R-rated movie may have more blood, gore, drug use, nudity, or graphic sexuality than a PG-13 movie would admit.",
   31|       |            "order": 4
   32|       |          },
   33|       |          {
   34|       |            "certification": "NC-17",
   35|       |            "meaning": "These films contain excessive graphic violence, intense or explicit sex, depraved, abhorrent behavior, explicit drug abuse, strong language, explicit nudity, or any other elements which, at present, most parents would consider too strong and therefore off-limits for viewing by their children and teens. NC-17 does not necessarily mean obscene or pornographic in the oft-accepted or legal meaning of those words.",
   36|       |            "order": 5
   37|       |          },
   38|       |          {
   39|       |            "certification": "NR",
   40|       |            "meaning": "No rating information.",
   41|       |            "order": 0
   42|       |          },
   43|       |          {
   44|       |            "certification": "PG",
   45|       |            "meaning": "Some material may not be suitable for children under 10. These films may contain some mild language, crude/suggestive humor, scary moments and/or violence. No drug content is present. There are a few exceptions to this rule. A few racial insults may also be heard.",
   46|       |            "order": 2
   47|       |          }
   48|       |        ],
   49|       |        "GB": [
   50|       |          {
   51|       |            "certification": "15",
   52|       |            "meaning": "Only those over 15 years are admitted. Nobody younger than 15 can rent or buy a 15-rated VHS, DVD, Blu-ray Disc, UMD or game, or watch a film in the cinema with this rating. Films under this category can contain adult themes, hard drugs, frequent strong language and limited use of very strong language, strong violence and strong sex references, and nudity without graphic detail. Sexual activity may be portrayed but without any strong detail. Sexual violence may be shown if discreet and justified by context.",
   53|       |            "order": 5
   54|       |          },
   55|       |          {
   56|       |            "certification": "R18",
   57|       |            "meaning": "Can only be shown at licensed adult cinemas or sold at licensed sex shops, and only to adults, those aged 18 or over. Films under this category are always hard-core pornography, defined as material intended for sexual stimulation and containing clear images of real sexual activity, strong fetish material, explicit animated images, or sight of certain acts such as triple simultaneous penetration and snowballing. There remains a range of material that is often cut from the R18 rating: strong images of injury in BDSM or spanking works, urolagnia, scenes suggesting incest even if staged, references to underage sex or childhood sexual development and aggressive behaviour such as hair-pulling or spitting on a performer are not permitted. More cuts are demanded in this category than any other category.",
   58|       |            "order": 7
   59|       |          },
   60|       |          {
   61|       |            "certification": "U",
   62|       |            "meaning": "All ages admitted, there is nothing unsuitable for children.",
   63|       |            "order": 1
   64|       |          },
   65|       |          {
   66|       |            "certification": "PG",
   67|       |            "meaning": "All ages admitted, but certain scenes may be unsuitable for young children. May contain mild language and sex/drugs references. May contain moderate violence if justified by context (e.g. fantasy).",
   68|       |            "order": 2
   69|       |          },
   70|       |          {
   71|       |            "certification": "12A",
   72|       |            "meaning": "Films under this category are considered to be unsuitable for very young people. Those aged under 12 years are only admitted if accompanied by an adult, aged at least 18 years, at all times during the motion picture. However, it is generally not recommended that children under 12 years should watch the film. Films under this category can contain mature themes, discrimination, soft drugs, moderate swear words, infrequent strong language and moderate violence, sex references and nudity. Sexual activity may be briefly and discreetly portrayed. Sexual violence may be implied or briefly indicated.",
   73|       |            "order": 3
   74|       |          },
   75|       |          {
   76|       |            "certification": "12",
   77|       |            "meaning": "Home media only since 2002. 12A-rated films are usually given a 12 certificate for the VHS/DVD version unless extra material has been added that requires a higher rating. Nobody younger than 12 can rent or buy a 12-rated VHS, DVD, Blu-ray Disc, UMD or game. The content guidelines are identical to those used for the 12A certificate.",
   78|       |            "order": 4
   79|       |          },
   80|       |          {
   81|       |            "certification": "18",
   82|       |            "meaning": "Only adults are admitted. Nobody younger than 18 can rent or buy an 18-rated VHS, DVD, Blu-ray Disc, UMD or game, or watch a film in the cinema with this rating. Films under this category do not have limitation on the bad language that is used. Hard drugs are generally allowed, and explicit sex references along with detailed sexual activity are also allowed. Scenes of strong real sex may be permitted if justified by the context. Very strong, gory, and/or sadistic violence is usually permitted. Strong sexual violence is permitted unless it is eroticised or excessively graphic.",
   83|       |            "order": 6
   84|       |          }
   85|       |        ]
   86|       |      }
   87|       |    }
   88|       |    """
   89|       |
   90|      1|    private let certifications = Certifications(
   91|      1|        certifications: [
   92|      1|            "US": [
   93|      1|                Certification(
   94|      1|                    code: "G",
   95|      1|                    meaning: "All ages admitted. There is no content that would be objectionable to most parents. This is one of only two ratings dating back to 1968 that still exists today.",
   96|      1|                    order: 1
   97|      1|                ),
   98|      1|                Certification(
   99|      1|                    code: "PG-13",
  100|      1|                    meaning: "Some material may be inappropriate for children under 13. Films given this rating may contain sexual content, brief or partial nudity, some strong language and innuendo, humor, mature themes, political themes, terror and/or intense action violence. However, bloodshed is rarely present. This is the minimum rating at which drug content is present.",
  101|      1|                    order: 3
  102|      1|                ),
  103|      1|                Certification(
  104|      1|                    code: "R",
  105|      1|                    meaning: "Under 17 requires accompanying parent or adult guardian 21 or older. The parent/guardian is required to stay with the child under 17 through the entire movie, even if the parent gives the child/teenager permission to see the film alone. These films may contain strong profanity, graphic sexuality, nudity, strong violence, horror, gore, and strong drug use. A movie rated R for profanity often has more severe or frequent language than the PG-13 rating would permit. An R-rated movie may have more blood, gore, drug use, nudity, or graphic sexuality than a PG-13 movie would admit.",
  106|      1|                    order: 4
  107|      1|                ),
  108|      1|                Certification(
  109|      1|                    code: "NC-17",
  110|      1|                    meaning: "These films contain excessive graphic violence, intense or explicit sex, depraved, abhorrent behavior, explicit drug abuse, strong language, explicit nudity, or any other elements which, at present, most parents would consider too strong and therefore off-limits for viewing by their children and teens. NC-17 does not necessarily mean obscene or pornographic in the oft-accepted or legal meaning of those words.",
  111|      1|                    order: 5
  112|      1|                ),
  113|      1|                Certification(
  114|      1|                    code: "NR",
  115|      1|                    meaning: "No rating information.",
  116|      1|                    order: 0
  117|      1|                ),
  118|      1|                Certification(
  119|      1|                    code: "PG",
  120|      1|                    meaning: "Some material may not be suitable for children under 10. These films may contain some mild language, crude/suggestive humor, scary moments and/or violence. No drug content is present. There are a few exceptions to this rule. A few racial insults may also be heard.",
  121|      1|                    order: 2
  122|      1|                )
  123|      1|            ],
  124|      1|            "GB": [
  125|      1|                Certification(
  126|      1|                    code: "15",
  127|      1|                    meaning: "Only those over 15 years are admitted. Nobody younger than 15 can rent or buy a 15-rated VHS, DVD, Blu-ray Disc, UMD or game, or watch a film in the cinema with this rating. Films under this category can contain adult themes, hard drugs, frequent strong language and limited use of very strong language, strong violence and strong sex references, and nudity without graphic detail. Sexual activity may be portrayed but without any strong detail. Sexual violence may be shown if discreet and justified by context.",
  128|      1|                    order: 5
  129|      1|                ),
  130|      1|                Certification(
  131|      1|                    code: "R18",
  132|      1|                    meaning: "Can only be shown at licensed adult cinemas or sold at licensed sex shops, and only to adults, those aged 18 or over. Films under this category are always hard-core pornography, defined as material intended for sexual stimulation and containing clear images of real sexual activity, strong fetish material, explicit animated images, or sight of certain acts such as triple simultaneous penetration and snowballing. There remains a range of material that is often cut from the R18 rating: strong images of injury in BDSM or spanking works, urolagnia, scenes suggesting incest even if staged, references to underage sex or childhood sexual development and aggressive behaviour such as hair-pulling or spitting on a performer are not permitted. More cuts are demanded in this category than any other category.",
  133|      1|                    order: 7
  134|      1|                ),
  135|      1|                Certification(
  136|      1|                    code: "U",
  137|      1|                    meaning: "All ages admitted, there is nothing unsuitable for children.",
  138|      1|                    order: 1
  139|      1|                ),
  140|      1|                Certification(
  141|      1|                    code: "PG",
  142|      1|                    meaning: "All ages admitted, but certain scenes may be unsuitable for young children. May contain mild language and sex/drugs references. May contain moderate violence if justified by context (e.g. fantasy).",
  143|      1|                    order: 2
  144|      1|                ),
  145|      1|                Certification(
  146|      1|                    code: "12A",
  147|      1|                    meaning: "Films under this category are considered to be unsuitable for very young people. Those aged under 12 years are only admitted if accompanied by an adult, aged at least 18 years, at all times during the motion picture. However, it is generally not recommended that children under 12 years should watch the film. Films under this category can contain mature themes, discrimination, soft drugs, moderate swear words, infrequent strong language and moderate violence, sex references and nudity. Sexual activity may be briefly and discreetly portrayed. Sexual violence may be implied or briefly indicated.",
  148|      1|                    order: 3
  149|      1|                ),
  150|      1|                Certification(
  151|      1|                    code: "12",
  152|      1|                    meaning: "Home media only since 2002. 12A-rated films are usually given a 12 certificate for the VHS/DVD version unless extra material has been added that requires a higher rating. Nobody younger than 12 can rent or buy a 12-rated VHS, DVD, Blu-ray Disc, UMD or game. The content guidelines are identical to those used for the 12A certificate.",
  153|      1|                    order: 4
  154|      1|                ),
  155|      1|                Certification(
  156|      1|                    code: "18",
  157|      1|                    meaning: "Only adults are admitted. Nobody younger than 18 can rent or buy an 18-rated VHS, DVD, Blu-ray Disc, UMD or game, or watch a film in the cinema with this rating. Films under this category do not have limitation on the bad language that is used. Hard drugs are generally allowed, and explicit sex references along with detailed sexual activity are also allowed. Scenes of strong real sex may be permitted if justified by the context. Very strong, gory, and/or sadistic violence is usually permitted. Strong sexual violence is permitted unless it is eroticised or excessively graphic.",
  158|      1|                    order: 6
  159|      1|                )
  160|      1|            ]
  161|      1|        ]
  162|      1|    )
  163|       |    // swiftlint:enable line_length
  164|       |
  165|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/CrewMemberTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class CrewMemberTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsCrewMember() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(CrewMember.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, crewMember)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "credit_id": "52fe4250c3a36847f8014a11",
   16|       |        "department": "Production",
   17|       |        "gender": 0,
   18|       |        "id": 1254,
   19|       |        "job": "Producer",
   20|       |        "name": "Art Linson",
   21|       |        "profile_path": "/dEtVivCXxQBtIzmJcUNupT1AB4H.jpg"
   22|       |    }
   23|       |    """
   24|       |
   25|      1|    private let crewMember = CrewMember(
   26|      1|        id: 1254,
   27|      1|        creditID: "52fe4250c3a36847f8014a11",
   28|      1|        name: "Art Linson",
   29|      1|        job: "Producer",
   30|      1|        department: "Production",
   31|      1|        gender: .unknown,
   32|      1|        profilePath: URL(string: "/dEtVivCXxQBtIzmJcUNupT1AB4H.jpg")
   33|      1|    )
   34|       |
   35|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/GenderTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class GenderTests: XCTestCase {
    5|       |
    6|      1|    func testUnknownGender_returnsRawValue() {
    7|      1|        XCTAssertEqual(Gender.unknown.rawValue, 0)
    8|      1|    }
    9|       |
   10|      1|    func testFemaleGender_returnsRawValue() {
   11|      1|        XCTAssertEqual(Gender.female.rawValue, 1)
   12|      1|    }
   13|       |
   14|      1|    func testMaleGender_returnsRawValue() {
   15|      1|        XCTAssertEqual(Gender.male.rawValue, 2)
   16|      1|    }
   17|       |
   18|      1|    func testOtherGender_returnsRawValue() {
   19|      1|        XCTAssertEqual(Gender.other.rawValue, 3)
   20|      1|    }
   21|       |
   22|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/GenreTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class GenreTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsGenre() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Genre.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, genre)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "id": 28,
   16|       |        "name": "Action"
   17|       |    }
   18|       |    """
   19|       |
   20|      1|    private let genre = Genre(
   21|      1|        id: 28,
   22|      1|        name: "Action"
   23|      1|    )
   24|       |
   25|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ImageCollectionTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ImageCollectionTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsImageCollection() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ImageCollection.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.id, imageCollection.id)
   11|      1|        XCTAssertEqual(result.backdrops, imageCollection.backdrops)
   12|      1|        XCTAssertEqual(result.posters, imageCollection.posters)
   13|      1|    }
   14|       |
   15|       |    private let json = """
   16|       |    {
   17|       |        "id": 550,
   18|       |        "backdrops": [
   19|       |            {
   20|       |              "aspect_ratio": 1.77777777777778,
   21|       |              "file_path": "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg",
   22|       |              "height": 720,
   23|       |              "iso_639_1": null,
   24|       |              "vote_average": 0,
   25|       |              "vote_count": 0,
   26|       |              "width": 1280
   27|       |            }
   28|       |        ],
   29|       |        "posters": [
   30|       |            {
   31|       |              "aspect_ratio": 0.666666666666667,
   32|       |              "file_path": "/fpemzjF623QVTe98pCVlwwtFC5N.jpg",
   33|       |              "height": 1800,
   34|       |              "iso_639_1": "en",
   35|       |              "vote_average": 0,
   36|       |              "vote_count": 0,
   37|       |              "width": 1200
   38|       |            }
   39|       |        ]
   40|       |    }
   41|       |    """
   42|       |
   43|      1|    private let imageCollection = ImageCollection(
   44|      1|        id: 550,
   45|      1|        posters: [
   46|      1|            ImageMetadata(filePath: URL(string: "/fpemzjF623QVTe98pCVlwwtFC5N.jpg")!, width: 1200, height: 1800)
   47|      1|        ],
   48|      1|        backdrops: [
   49|      1|            ImageMetadata(filePath: URL(string: "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg")!, width: 1280, height: 720)
   50|      1|        ])
   51|       |
   52|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ImageMetadataTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ImageMetadataTests: XCTestCase {
    5|       |
    6|      1|    func testID_returnsFilePath() {
    7|      1|        XCTAssertEqual(imageMetadata.id, imageMetadata.filePath)
    8|      1|    }
    9|       |
   10|      1|    func testDecode_returnsImageMetadata() throws {
   11|      1|        let data = json.data(using: .utf8)!
   12|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ImageMetadata.self, from: data)
   13|      1|
   14|      1|        XCTAssertEqual(result, imageMetadata)
   15|      1|    }
   16|       |
   17|       |    private let json = """
   18|       |    {
   19|       |        "aspect_ratio": 1.77777777777778,
   20|       |        "file_path": "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg",
   21|       |        "height": 720,
   22|       |        "iso_639_1": null,
   23|       |        "vote_average": 0,
   24|       |        "vote_count": 0,
   25|       |        "width": 1280
   26|       |    }
   27|       |    """
   28|       |
   29|      2|    private let imageMetadata = ImageMetadata(
   30|      2|        filePath: URL(string: "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg")!,
   31|      2|        width: 1280,
   32|      2|        height: 720
   33|      2|    )
   34|       |
   35|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ImagesConfigurationTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ImagesConfigurationTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsImagesConfiguration() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ImagesConfiguration.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, imagesConfiguration)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "base_url": "http://image.tmdb.org/t/p/",
   16|       |        "secure_base_url": "https://image.tmdb.org/t/p/",
   17|       |        "backdrop_sizes": [
   18|       |          "w300",
   19|       |          "w780",
   20|       |          "w1280",
   21|       |          "original"
   22|       |        ],
   23|       |        "logo_sizes": [
   24|       |          "w45",
   25|       |          "w92",
   26|       |          "w154",
   27|       |          "w185",
   28|       |          "w300",
   29|       |          "w500",
   30|       |          "original"
   31|       |        ],
   32|       |        "poster_sizes": [
   33|       |          "w92",
   34|       |          "w154",
   35|       |          "w185",
   36|       |          "w342",
   37|       |          "w500",
   38|       |          "w780",
   39|       |          "original"
   40|       |        ],
   41|       |        "profile_sizes": [
   42|       |          "w45",
   43|       |          "w185",
   44|       |          "h632",
   45|       |          "original"
   46|       |        ],
   47|       |        "still_sizes": [
   48|       |          "w92",
   49|       |          "w185",
   50|       |          "w300",
   51|       |          "original"
   52|       |        ]
   53|       |      }
   54|       |    """
   55|       |
   56|      1|    private let imagesConfiguration = ImagesConfiguration(
   57|      1|        baseUrl: URL(string: "http://image.tmdb.org/t/p/")!,
   58|      1|        secureBaseUrl: URL(string: "https://image.tmdb.org/t/p/")!,
   59|      1|        backdropSizes: [
   60|      1|            "w300",
   61|      1|            "w780",
   62|      1|            "w1280",
   63|      1|            "original"
   64|      1|        ],
   65|      1|        logoSizes: [
   66|      1|            "w45",
   67|      1|            "w92",
   68|      1|            "w154",
   69|      1|            "w185",
   70|      1|            "w300",
   71|      1|            "w500",
   72|      1|            "original"
   73|      1|        ],
   74|      1|        posterSizes: [
   75|      1|            "w92",
   76|      1|            "w154",
   77|      1|            "w185",
   78|      1|            "w342",
   79|      1|            "w500",
   80|      1|            "w780",
   81|      1|            "original"
   82|      1|        ],
   83|      1|        profileSizes: [
   84|      1|            "w45",
   85|      1|            "w185",
   86|      1|            "h632",
   87|      1|            "original"
   88|      1|        ],
   89|      1|        stillSizes: [
   90|      1|            "w92",
   91|      1|            "w185",
   92|      1|            "w300",
   93|      1|            "original"
   94|      1|        ]
   95|      1|    )
   96|       |
   97|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/MediaPageableListTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class MediaPageableListTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsMediaPageableList() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(MediaPageableList.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.page, list.page)
   11|      1|        XCTAssertEqual(result.results, list.results)
   12|      1|        XCTAssertEqual(result.totalResults, list.totalResults)
   13|      1|        XCTAssertEqual(result.totalPages, list.totalPages)
   14|      1|    }
   15|       |
   16|       |    private let json = """
   17|       |    {
   18|       |        "page": 1,
   19|       |        "results": [
   20|       |            {
   21|       |                "id": 1,
   22|       |                "title": "Fight Club",
   23|       |                "media_type": "movie"
   24|       |            },
   25|       |            {
   26|       |                "id": 2,
   27|       |                "name": "The Mrs Bradley Mysteries",
   28|       |                "media_type": "tv"
   29|       |            },
   30|       |            {
   31|       |                "id": 51329,
   32|       |                "name": "Bradley Cooper",
   33|       |                "media_type": "person"
   34|       |            }
   35|       |        ],
   36|       |        "total_results": 3,
   37|       |        "total_pages": 1
   38|       |    }
   39|       |    """
   40|       |
   41|      1|    private let list = MediaPageableList(
   42|      1|        page: 1,
   43|      1|        results: [
   44|      1|            .movie(Movie(id: 1, title: "Fight Club")),
   45|      1|            .tvShow(TVShow(id: 2, name: "The Mrs Bradley Mysteries")),
   46|      1|            .person(Person(id: 51329, name: "Bradley Cooper"))
   47|      1|        ],
   48|      1|        totalResults: 3,
   49|      1|        totalPages: 1
   50|      1|    )
   51|       |
   52|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/MediaTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class MediaTests: XCTestCase {
    5|       |
    6|      1|    func testID_whenMovie_returnsID() {
    7|      1|        XCTAssertEqual(medias[0].id, 1)
    8|      1|    }
    9|       |
   10|      1|    func testID_whenTVShow_returnsID() {
   11|      1|        XCTAssertEqual(medias[1].id, 2)
   12|      1|    }
   13|       |
   14|      1|    func testID_whenPerson_returnsID() {
   15|      1|        XCTAssertEqual(medias[2].id, 51329)
   16|      1|    }
   17|       |
   18|      1|    func testDecode_returnsMedias() throws {
   19|      1|        let data = json.data(using: .utf8)!
   20|      1|        let result = try JSONDecoder.theMovieDatabase.decode([Media].self, from: data)
   21|      1|
   22|      1|        XCTAssertEqual(result, medias)
   23|      1|    }
   24|       |
   25|       |    private let json = """
   26|       |    [
   27|       |        {
   28|       |            "id": 1,
   29|       |            "title": "Fight Club",
   30|       |            "media_type": "movie"
   31|       |        },
   32|       |        {
   33|       |            "id": 2,
   34|       |            "name": "The Mrs Bradley Mysteries",
   35|       |            "media_type": "tv"
   36|       |        },
   37|       |        {
   38|       |            "id": 51329,
   39|       |            "name": "Bradley Cooper",
   40|       |            "media_type": "person"
   41|       |        }
   42|       |    ]
   43|       |    """
   44|       |
   45|      4|    private let medias: [Media] = [
   46|      4|        .movie(Movie(id: 1, title: "Fight Club")),
   47|      4|        .tvShow(TVShow(id: 2, name: "The Mrs Bradley Mysteries")),
   48|      4|        .person(Person(id: 51329, name: "Bradley Cooper"))
   49|      4|    ]
   50|       |
   51|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/MoviePageableListTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class MoviePageableListTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsMoviePageableList() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(MoviePageableList.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.page, list.page)
   11|      1|        XCTAssertEqual(result.results, list.results)
   12|      1|        XCTAssertEqual(result.totalResults, list.totalResults)
   13|      1|        XCTAssertEqual(result.totalPages, list.totalPages)
   14|      1|    }
   15|       |
   16|       |    private let json = """
   17|       |    {
   18|       |        "page": 1,
   19|       |        "results": [
   20|       |            {
   21|       |                "id": 1,
   22|       |                "title": "Movie 1"
   23|       |            },
   24|       |            {
   25|       |                "id": 2,
   26|       |                "title": "Movie 2"
   27|       |            },
   28|       |            {
   29|       |                "id": 3,
   30|       |                "title": "Movie 3"
   31|       |            }
   32|       |        ],
   33|       |        "total_pages": 1,
   34|       |        "total_results": 3
   35|       |    }
   36|       |    """
   37|       |
   38|      1|    private let list = MoviePageableList(
   39|      1|        page: 1,
   40|      1|        results: [
   41|      1|            Movie(id: 1, title: "Movie 1"),
   42|      1|            Movie(id: 2, title: "Movie 2"),
   43|      1|            Movie(id: 3, title: "Movie 3")
   44|      1|        ],
   45|      1|        totalResults: 3,
   46|      1|        totalPages: 1
   47|      1|    )
   48|       |
   49|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/MovieTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class MovieTests: XCTestCase {
    5|       |
    6|      1|    func testReleaseDate_whenNil_returnsNil() {
    7|      1|        let movie = Movie(id: 1, title: "Some title")
    8|      1|
    9|      1|        XCTAssertNil(movie.releaseDate)
   10|      1|    }
   11|       |
   12|      1|    func testHomepageURL_whenNil_returnsNil() {
   13|      1|        let movie = Movie(id: 1, title: "Some title")
   14|      1|
   15|      1|        XCTAssertNil(movie.homepageURL)
   16|      1|    }
   17|       |
   18|      1|    func testHomepageURL_whenHasURL_returnsURL() {
   19|      1|        let expectedResult = URL(string: "https://some.domain.com")!
   20|      1|        let movie = Movie(id: 1, title: "Some title", homepageURL: expectedResult)
   21|      1|
   22|      1|        XCTAssertEqual(movie.homepageURL, expectedResult)
   23|      1|    }
   24|       |
   25|      1|    func testDecode_returnsMovie() throws {
   26|      1|        let data = json.data(using: .utf8)!
   27|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Movie.self, from: data)
   28|      1|
   29|      1|        XCTAssertEqual(result, movie)
   30|      1|    }
   31|       |
   32|       |    // swiftlint:disable line_length
   33|       |    private let json = """
   34|       |    {
   35|       |        "adult": false,
   36|       |        "backdrop_path": "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg",
   37|       |        "belongs_to_collection": null,
   38|       |        "budget": 63000000,
   39|       |        "genres": [
   40|       |            {
   41|       |                "id": 18,
   42|       |                "name": "Drama"
   43|       |            }
   44|       |        ],
   45|       |        "homepage": null,
   46|       |        "id": 550,
   47|       |        "imdb_id": "tt0137523",
   48|       |        "original_language": "en",
   49|       |        "original_title": "Fight Club",
   50|       |        "overview": "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \\"fight clubs\\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.",
   51|       |        "popularity": 0.5,
   52|       |        "poster_path": null,
   53|       |        "production_companies": [
   54|       |            {
   55|       |                "id": 508,
   56|       |                "logo_path": "/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png",
   57|       |                "name": "Regency Enterprises",
   58|       |                "origin_country": "US"
   59|       |            }
   60|       |        ],
   61|       |        "production_countries": [
   62|       |            {
   63|       |                "iso_3166_1": "US",
   64|       |                "name": "United States of America"
   65|       |            }
   66|       |        ],
   67|       |        "release_date": "1999-10-12",
   68|       |        "revenue": 100853753,
   69|       |        "runtime": 139,
   70|       |        "spoken_languages": [
   71|       |            {
   72|       |                "iso_639_1": "en",
   73|       |                "name": "English"
   74|       |            }
   75|       |        ],
   76|       |        "status": "Released",
   77|       |        "tagline": "How much can you know about yourself if you've never been in a fight?",
   78|       |        "title": "Fight Club",
   79|       |        "video": false,
   80|       |        "vote_average": 7.8,
   81|       |        "vote_count": 3439
   82|       |    }
   83|       |    """
   84|       |
   85|      4|    private let movie = Movie(
   86|      4|        id: 550,
   87|      4|        title: "Fight Club",
   88|      4|        tagline: "How much can you know about yourself if you've never been in a fight?",
   89|      4|        originalTitle: "Fight Club",
   90|      4|        originalLanguage: "en",
   91|      4|        overview: "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \"fight clubs\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.",
   92|      4|        runtime: 139,
   93|      4|        genres: [
   94|      4|            Genre(id: 18, name: "Drama")
   95|      4|        ],
   96|      4|        releaseDate: DateFormatter.theMovieDatabase.date(from: "1999-10-12"),
   97|      4|        posterPath: nil,
   98|      4|        backdropPath: URL(string: "/fCayJrkfRaCRCTh8GqN30f8oyQF.jpg"),
   99|      4|        budget: 63000000,
  100|      4|        revenue: 100853753,
  101|      4|        homepageURL: URL(string: ""),
  102|      4|        imdbID: "tt0137523",
  103|      4|        status: .released,
  104|      4|        productionCompanies: [
  105|      4|            ProductionCompany(
  106|      4|                id: 508,
  107|      4|                name: "Regency Enterprises",
  108|      4|                originCountry: "US",
  109|      4|                logoPath: URL(string: "/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png")
  110|      4|            )
  111|      4|        ],
  112|      4|        productionCountries: [
  113|      4|            ProductionCountry(
  114|      4|                iso31661: "US",
  115|      4|                name: "United States of America"
  116|      4|            )
  117|      4|        ],
  118|      4|        spokenLanguages: [
  119|      4|            SpokenLanguage(
  120|      4|                iso6391: "en",
  121|      4|                name: "English"
  122|      4|            )
  123|      4|        ],
  124|      4|        popularity: 0.5,
  125|      4|        voteAverage: 7.8,
  126|      4|        voteCount: 3439,
  127|      4|        video: false,
  128|      4|        adult: false
  129|      4|    )
  130|       |    // swiftlint:enable line_length
  131|       |
  132|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/NetworkTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class NetworkTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsNetwork() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Network.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, network)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "name": "HBO",
   16|       |        "id": 49,
   17|       |        "logo_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
   18|       |        "origin_country": "US"
   19|       |    }
   20|       |    """
   21|       |
   22|      1|    private let network = Network(
   23|      1|        id: 49,
   24|      1|        name: "HBO",
   25|      1|        logoPath: URL(string: "/tuomPhY2UtuPTqqFnKMVHvSb724.png"),
   26|      1|        originCountry: "US"
   27|      1|    )
   28|       |
   29|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PageableListResultTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PageableListResultTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPageableListResult() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(PageableListResult<SomeListItem>.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.page, list.page)
   11|      1|        XCTAssertEqual(result.results, list.results)
   12|      1|        XCTAssertEqual(result.totalResults, list.totalResults)
   13|      1|        XCTAssertEqual(result.totalPages, list.totalPages)
   14|      1|    }
   15|       |
   16|       |    private let json = """
   17|       |    {
   18|       |        "page": 1,
   19|       |        "results": [
   20|       |            {
   21|       |                "id": 1
   22|       |            },
   23|       |            {
   24|       |                "id": 2
   25|       |            },
   26|       |            {
   27|       |                "id": 3
   28|       |            },
   29|       |            {
   30|       |                "id": 4
   31|       |            }
   32|       |        ],
   33|       |        "total_results": 4,
   34|       |        "total_pages": 1
   35|       |    }
   36|       |    """
   37|       |
   38|      1|    private let list = PageableListResult<SomeListItem>(
   39|      1|        page: 1,
   40|      1|        results: [
   41|      1|            SomeListItem(id: 1),
   42|      1|            SomeListItem(id: 2),
   43|      1|            SomeListItem(id: 3),
   44|      1|            SomeListItem(id: 4)
   45|      1|        ],
   46|      1|        totalResults: 4,
   47|      1|        totalPages: 1
   48|      1|    )
   49|       |
   50|       |}
   51|       |
   52|       |private struct SomeListItem: Identifiable, Decodable, Equatable {
   53|       |
   54|       |    let id: Int
   55|       |
   56|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PersonCombinedCreditsTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PersonCombinedCreditsTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPersonCombinedCredits() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(PersonCombinedCredits.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.id, personCombinedCredits.id)
   11|      1|        XCTAssertEqual(result.cast, personCombinedCredits.cast)
   12|      1|        XCTAssertEqual(result.crew, personCombinedCredits.crew)
   13|      1|    }
   14|       |
   15|       |    // swiftlint:disable line_length
   16|       |    private let json = """
   17|       |    {
   18|       |      "cast": [
   19|       |        {
   20|       |          "id": 54,
   21|       |          "original_language": "en",
   22|       |          "episode_count": 2,
   23|       |          "overview": "Growing Pains is an American television sitcom about an affluent family, residing in Huntington, Long Island, New York, with a working mother and a stay-at-home psychiatrist father raising three children together, which aired on ABC from September 24, 1985, to April 25, 1992.",
   24|       |          "origin_country": [
   25|       |            "US"
   26|       |          ],
   27|       |          "original_name": "Growing Pains",
   28|       |          "genre_ids": [
   29|       |            35
   30|       |          ],
   31|       |          "name": "Growing Pains",
   32|       |          "media_type": "tv",
   33|       |          "poster_path": "/eKyeUFwjc0LhPSp129IHpXniJVR.jpg",
   34|       |          "first_air_date": "1985-09-24",
   35|       |          "vote_average": 6.2,
   36|       |          "vote_count": 25,
   37|       |          "character": "",
   38|       |          "backdrop_path": "/xYpXcp7S8pStWihcksTQQue3jlV.jpg",
   39|       |          "popularity": 2.883124,
   40|       |          "credit_id": "525333fb19c295794002c720"
   41|       |        },
   42|       |        {
   43|       |          "id": 109091,
   44|       |          "original_language": "en",
   45|       |          "original_title": "The Counselor",
   46|       |          "overview": "A rich and successful lawyer named Counselor is about to get married to his fiancée but soon meets up with the middle-man known as Westray who tells him his drug trafficking plan has taken a horrible twist and now he must protect himself and his soon bride-to-be lover as the truth of the drug business uncovers and targets become chosen.",
   47|       |          "vote_count": 661,
   48|       |          "video": false,
   49|       |          "media_type": "movie",
   50|       |          "credit_id": "52fe4aaac3a36847f81db47d",
   51|       |          "vote_average": 5,
   52|       |          "character": "Westray",
   53|       |          "popularity": 3.597124,
   54|       |          "release_date": "2013-10-25",
   55|       |          "title": "The Counselor",
   56|       |          "genre_ids": [
   57|       |            80,
   58|       |            18,
   59|       |            53
   60|       |          ],
   61|       |          "adult": false,
   62|       |          "backdrop_path": "/62xHmGnxMi0wV40BS3iKnDru0nO.jpg",
   63|       |          "poster_path": "/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg"
   64|       |        }
   65|       |      ],
   66|       |      "crew": [
   67|       |        {
   68|       |          "id": 69061,
   69|       |          "department": "Production",
   70|       |          "original_language": "en",
   71|       |          "episode_count": 8,
   72|       |          "job": "Executive Producer",
   73|       |          "overview": "Prairie Johnson, blind as a child, comes home to the community she grew up in with her sight restored. Some hail her a miracle, others a dangerous mystery, but Prairie won’t talk with the FBI or her parents about the seven years she went missing.",
   74|       |          "origin_country": [],
   75|       |          "original_name": "The OA",
   76|       |          "vote_count": 121,
   77|       |          "name": "The OA",
   78|       |          "media_type": "tv",
   79|       |          "popularity": 6.990147,
   80|       |          "credit_id": "58cf92ae9251415a7d0339c3",
   81|       |          "backdrop_path": "/k9kPIikcQBzl93nSyXUfqc74J9S.jpg",
   82|       |          "first_air_date": "2016-12-16",
   83|       |          "vote_average": 7.3,
   84|       |          "genre_ids": [
   85|       |            18,
   86|       |            9648,
   87|       |            10765
   88|       |          ],
   89|       |          "poster_path": "/ppSiYu2D0nw6KNF0kf5lKDxOGRR.jpg"
   90|       |        },
   91|       |        {
   92|       |          "id": 174349,
   93|       |          "department": "Production",
   94|       |          "original_language": "en",
   95|       |          "original_title": "Big Men",
   96|       |          "job": "Executive Producer",
   97|       |          "overview": "For her latest industrial exposé, Rachel Boynton (Our Brand Is Crisis) gained unprecedented access to Africa's oil companies. The result is a gripping account of the costly personal tolls levied when American corporate interests pursue oil in places like Ghana and the Niger River Delta. Executive produced by Steven Shainberg and Brad Pitt, Big Men investigates the caustic blend of ambition, corruption and greed that threatens to exacerbate Africa’s resource curse.",
   98|       |          "genre_ids": [
   99|       |            99
  100|       |          ],
  101|       |          "video": false,
  102|       |          "media_type": "movie",
  103|       |          "credit_id": "52fe4d49c3a36847f8258cf3",
  104|       |          "poster_path": "/q5uKDMl1PXIeMoD10CTbXST7XoN.jpg",
  105|       |          "popularity": 1.214663,
  106|       |          "backdrop_path": "/ieWzXfEx3AU9QANrGkbqeXgLeNH.jpg",
  107|       |          "vote_count": 7,
  108|       |          "title": "Big Men",
  109|       |          "adult": false,
  110|       |          "vote_average": 6.4,
  111|       |          "release_date": "2014-03-14"
  112|       |        }
  113|       |      ],
  114|       |      "id": 287
  115|       |    }
  116|       |    """
  117|       |
  118|      1|    private let personCombinedCredits = PersonCombinedCredits(
  119|      1|        id: 287,
  120|      1|        cast: [
  121|      1|            .tvShow(TVShow(
  122|      1|                id: 54,
  123|      1|                name: "Growing Pains",
  124|      1|                originalName: "Growing Pains",
  125|      1|                originalLanguage: "en",
  126|      1|                overview: "Growing Pains is an American television sitcom about an affluent family, residing in Huntington, Long Island, New York, with a working mother and a stay-at-home psychiatrist father raising three children together, which aired on ABC from September 24, 1985, to April 25, 1992.",
  127|      1|                firstAirDate: DateFormatter.theMovieDatabase.date(from: "1985-09-24"),
  128|      1|                originCountry: ["US"],
  129|      1|                posterPath: URL(string: "/eKyeUFwjc0LhPSp129IHpXniJVR.jpg"),
  130|      1|                backdropPath: URL(string: "/xYpXcp7S8pStWihcksTQQue3jlV.jpg"),
  131|      1|                popularity: 2.883124,
  132|      1|                voteAverage: 6.2,
  133|      1|                voteCount: 25
  134|      1|            )),
  135|      1|            .movie(Movie(
  136|      1|                id: 109091,
  137|      1|                title: "The Counselor",
  138|      1|                originalTitle: "The Counselor",
  139|      1|                originalLanguage: "en",
  140|      1|                overview: "A rich and successful lawyer named Counselor is about to get married to his fiancée but soon meets up with the middle-man known as Westray who tells him his drug trafficking plan has taken a horrible twist and now he must protect himself and his soon bride-to-be lover as the truth of the drug business uncovers and targets become chosen.",
  141|      1|                releaseDate: DateFormatter.theMovieDatabase.date(from: "2013-10-25"),
  142|      1|                posterPath: URL(string: "/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg"),
  143|      1|                backdropPath: URL(string: "/62xHmGnxMi0wV40BS3iKnDru0nO.jpg"),
  144|      1|                popularity: 3.597124,
  145|      1|                voteAverage: 5,
  146|      1|                voteCount: 661,
  147|      1|                video: false,
  148|      1|                adult: false
  149|      1|            ))
  150|      1|        ],
  151|      1|        crew: [
  152|      1|            .tvShow(TVShow(
  153|      1|                id: 69061,
  154|      1|                name: "The OA",
  155|      1|                originalName: "The OA",
  156|      1|                originalLanguage: "en",
  157|      1|                overview: "Prairie Johnson, blind as a child, comes home to the community she grew up in with her sight restored. Some hail her a miracle, others a dangerous mystery, but Prairie won’t talk with the FBI or her parents about the seven years she went missing.", firstAirDate: DateFormatter.theMovieDatabase.date(from: "2016-12-16"),
  158|      1|                originCountry: [],
  159|      1|                posterPath: URL(string: "/ppSiYu2D0nw6KNF0kf5lKDxOGRR.jpg"),
  160|      1|                backdropPath: URL(string: "/k9kPIikcQBzl93nSyXUfqc74J9S.jpg"),
  161|      1|                popularity: 6.990147,
  162|      1|                voteAverage: 7.3,
  163|      1|                voteCount: 121
  164|      1|            )),
  165|      1|            .movie(Movie(
  166|      1|                id: 174349,
  167|      1|                title: "Big Men",
  168|      1|                originalTitle: "Big Men",
  169|      1|                originalLanguage: "en",
  170|      1|                overview: "For her latest industrial exposé, Rachel Boynton (Our Brand Is Crisis) gained unprecedented access to Africa's oil companies. The result is a gripping account of the costly personal tolls levied when American corporate interests pursue oil in places like Ghana and the Niger River Delta. Executive produced by Steven Shainberg and Brad Pitt, Big Men investigates the caustic blend of ambition, corruption and greed that threatens to exacerbate Africa’s resource curse.",
  171|      1|                releaseDate: DateFormatter.theMovieDatabase.date(from: "2014-03-14"),
  172|      1|                posterPath: URL(string: "/q5uKDMl1PXIeMoD10CTbXST7XoN.jpg"),
  173|      1|                backdropPath: URL(string: "/ieWzXfEx3AU9QANrGkbqeXgLeNH.jpg"),
  174|      1|                popularity: 1.214663,
  175|      1|                voteAverage: 6.4,
  176|      1|                voteCount: 7,
  177|      1|                video: false,
  178|      1|                adult: false
  179|      1|            ))
  180|      1|        ]
  181|      1|    )
  182|       |    // swiftlint:enable line_length
  183|       |
  184|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PersonImageCollectionTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PersonImageCollectionTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPersonImageCollection() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(PersonImageCollection.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.id, personImageCollection.id)
   11|      1|        XCTAssertEqual(result.profiles, personImageCollection.profiles)
   12|      1|    }
   13|       |
   14|       |    private let json = """
   15|       |    {
   16|       |        "id": 66633,
   17|       |        "profiles": [
   18|       |            {
   19|       |              "aspect_ratio": 0.666666666666667,
   20|       |              "file_path": "/rLSUjr725ez1cK7SKVxC9udO03Y.jpg",
   21|       |              "height": 819,
   22|       |              "iso_639_1": null,
   23|       |              "vote_average": 5.3125,
   24|       |              "vote_count": 1,
   25|       |              "width": 546
   26|       |            },
   27|       |            {
   28|       |              "aspect_ratio": 0.666666666666667,
   29|       |              "file_path": "/lYqC8Amj4owX05xQg5Yo7uUHgah.jpg",
   30|       |              "height": 3000,
   31|       |              "iso_639_1": null,
   32|       |              "vote_average": 0,
   33|       |              "vote_count": 0,
   34|       |              "width": 2000
   35|       |            }
   36|       |        ]
   37|       |    }
   38|       |    """
   39|       |
   40|      1|    private let personImageCollection = PersonImageCollection(
   41|      1|        id: 66633,
   42|      1|        profiles: [
   43|      1|            ImageMetadata(
   44|      1|                filePath: URL(string: "/rLSUjr725ez1cK7SKVxC9udO03Y.jpg")!,
   45|      1|                width: 546,
   46|      1|                height: 819
   47|      1|            ),
   48|      1|            ImageMetadata(
   49|      1|                filePath: URL(string: "/lYqC8Amj4owX05xQg5Yo7uUHgah.jpg")!,
   50|      1|                width: 2000,
   51|      1|                height: 3000
   52|      1|            )
   53|      1|        ]
   54|      1|    )
   55|       |
   56|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PersonMovieCreditsTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PersonMovieCreditsTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPersonMovieCredits() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(PersonMovieCredits.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.id, personMovieCredits.id)
   11|      1|        XCTAssertEqual(result.cast, personMovieCredits.cast)
   12|      1|        XCTAssertEqual(result.crew, personMovieCredits.crew)
   13|      1|    }
   14|       |
   15|       |    // swiftlint:disable line_length
   16|       |    private let json = """
   17|       |    {
   18|       |      "cast": [
   19|       |        {
   20|       |          "id": 109091,
   21|       |          "original_language": "en",
   22|       |          "original_title": "The Counselor",
   23|       |          "overview": "A rich and successful lawyer named Counselor is about to get married to his fiancée but soon meets up with the middle-man known as Westray who tells him his drug trafficking plan has taken a horrible twist and now he must protect himself and his soon bride-to-be lover as the truth of the drug business uncovers and targets become chosen.",
   24|       |          "vote_count": 661,
   25|       |          "video": false,
   26|       |          "credit_id": "52fe4aaac3a36847f81db47d",
   27|       |          "vote_average": 5,
   28|       |          "character": "Westray",
   29|       |          "popularity": 3.597124,
   30|       |          "release_date": "2013-10-25",
   31|       |          "title": "The Counselor",
   32|       |          "genre_ids": [
   33|       |            80,
   34|       |            18,
   35|       |            53
   36|       |          ],
   37|       |          "adult": false,
   38|       |          "backdrop_path": "/62xHmGnxMi0wV40BS3iKnDru0nO.jpg",
   39|       |          "poster_path": "/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg"
   40|       |        }
   41|       |      ],
   42|       |      "crew": [
   43|       |        {
   44|       |          "id": 174349,
   45|       |          "department": "Production",
   46|       |          "original_language": "en",
   47|       |          "original_title": "Big Men",
   48|       |          "job": "Executive Producer",
   49|       |          "overview": "For her latest industrial exposé, Rachel Boynton (Our Brand Is Crisis) gained unprecedented access to Africa's oil companies. The result is a gripping account of the costly personal tolls levied when American corporate interests pursue oil in places like Ghana and the Niger River Delta. Executive produced by Steven Shainberg and Brad Pitt, Big Men investigates the caustic blend of ambition, corruption and greed that threatens to exacerbate Africa’s resource curse.",
   50|       |          "genre_ids": [
   51|       |            99
   52|       |          ],
   53|       |          "video": false,
   54|       |          "credit_id": "52fe4d49c3a36847f8258cf3",
   55|       |          "poster_path": "/q5uKDMl1PXIeMoD10CTbXST7XoN.jpg",
   56|       |          "popularity": 1.214663,
   57|       |          "backdrop_path": "/ieWzXfEx3AU9QANrGkbqeXgLeNH.jpg",
   58|       |          "vote_count": 7,
   59|       |          "title": "Big Men",
   60|       |          "adult": false,
   61|       |          "vote_average": 6.4,
   62|       |          "release_date": "2014-03-14"
   63|       |        }
   64|       |      ],
   65|       |      "id": 287
   66|       |    }
   67|       |    """
   68|       |
   69|      1|    private let personMovieCredits = PersonMovieCredits(
   70|      1|        id: 287,
   71|      1|        cast: [
   72|      1|            Movie(
   73|      1|                id: 109091,
   74|      1|                title: "The Counselor",
   75|      1|                originalTitle: "The Counselor",
   76|      1|                originalLanguage: "en",
   77|      1|                overview: "A rich and successful lawyer named Counselor is about to get married to his fiancée but soon meets up with the middle-man known as Westray who tells him his drug trafficking plan has taken a horrible twist and now he must protect himself and his soon bride-to-be lover as the truth of the drug business uncovers and targets become chosen.",
   78|      1|                releaseDate: DateFormatter.theMovieDatabase.date(from: "2013-10-25"),
   79|      1|                posterPath: URL(string: "/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg"),
   80|      1|                backdropPath: URL(string: "/62xHmGnxMi0wV40BS3iKnDru0nO.jpg"),
   81|      1|                popularity: 3.597124,
   82|      1|                voteAverage: 5,
   83|      1|                voteCount: 661,
   84|      1|                video: false,
   85|      1|                adult: false
   86|      1|            )
   87|      1|        ],
   88|      1|        crew: [
   89|      1|            Movie(
   90|      1|                id: 174349,
   91|      1|                title: "Big Men",
   92|      1|                originalTitle: "Big Men",
   93|      1|                originalLanguage: "en",
   94|      1|                overview: "For her latest industrial exposé, Rachel Boynton (Our Brand Is Crisis) gained unprecedented access to Africa's oil companies. The result is a gripping account of the costly personal tolls levied when American corporate interests pursue oil in places like Ghana and the Niger River Delta. Executive produced by Steven Shainberg and Brad Pitt, Big Men investigates the caustic blend of ambition, corruption and greed that threatens to exacerbate Africa’s resource curse.",
   95|      1|                releaseDate: DateFormatter.theMovieDatabase.date(from: "2014-03-14"),
   96|      1|                posterPath: URL(string: "/q5uKDMl1PXIeMoD10CTbXST7XoN.jpg"),
   97|      1|                backdropPath: URL(string: "/ieWzXfEx3AU9QANrGkbqeXgLeNH.jpg"),
   98|      1|                popularity: 1.214663,
   99|      1|                voteAverage: 6.4,
  100|      1|                voteCount: 7,
  101|      1|                video: false,
  102|      1|                adult: false
  103|      1|            )
  104|      1|        ]
  105|      1|    )
  106|       |    // swiftlint:enable line_length
  107|       |
  108|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PersonPageableListTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PersonPageableListTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPersonPageableList() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(PersonPageableList.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.page, list.page)
   11|      1|        XCTAssertEqual(result.results, list.results)
   12|      1|        XCTAssertEqual(result.totalResults, list.totalResults)
   13|      1|        XCTAssertEqual(result.totalPages, list.totalPages)
   14|      1|    }
   15|       |
   16|       |    // swiftlint:disable line_length
   17|       |    private let json = """
   18|       |    {
   19|       |        "page": 1,
   20|       |        "results": [
   21|       |            {
   22|       |                "birthday": "1963-12-18",
   23|       |                "known_for_department": "Acting",
   24|       |                "deathday": null,
   25|       |                "id": 287,
   26|       |                "name": "Brad Pitt",
   27|       |                "also_known_as": [
   28|       |                    "Бред Питт",
   29|       |                    "Бред Пітт",
   30|       |                    "Buratto Pitto",
   31|       |                    "Брэд Питт"
   32|       |                ],
   33|       |                "gender": 2,
   34|       |                "biography": "William Bradley 'Brad' Pitt (born December 18, 1963) is an American actor and film producer. Pitt has received two Academy Award nominations and four Golden Globe Award nominations, winning one. He has been described as one of the world's most attractive men, a label for which he has received substantial media attention. Pitt began his acting career with television guest appearances, including a role on the CBS prime-time soap opera Dallas in 1987. He later gained recognition as the cowboy hitchhiker who seduces Geena Davis's character in the 1991 road movie Thelma & Louise. Pitt's first leading roles in big-budget productions came with A River Runs Through It (1992) and Interview with the Vampire (1994). He was cast opposite Anthony Hopkins in the 1994 drama Legends of the Fall, which earned him his first Golden Globe nomination. In 1995 he gave critically acclaimed performances in the crime thriller Seven and the science fiction film 12 Monkeys, the latter securing him a Golden Globe Award for Best Supporting Actor and an Academy Award nomination.",
   35|       |                "popularity": 10.647,
   36|       |                "place_of_birth": "Shawnee, Oklahoma, USA",
   37|       |                "profile_path": "/kU3B75TyRiCgE270EyZnHjfivoq.jpg",
   38|       |                "adult": false,
   39|       |                "imdb_id": "nm0000093",
   40|       |                "homepage": null
   41|       |            }
   42|       |        ],
   43|       |        "total_pages": 1,
   44|       |        "total_results": 1
   45|       |    }
   46|       |    """
   47|       |
   48|      1|    private let list = PersonPageableList(
   49|      1|        page: 1,
   50|      1|        results: [
   51|      1|            Person(
   52|      1|                id: 287,
   53|      1|                name: "Brad Pitt",
   54|      1|                alsoKnownAs: [
   55|      1|                    "Бред Питт",
   56|      1|                    "Бред Пітт",
   57|      1|                    "Buratto Pitto",
   58|      1|                    "Брэд Питт"
   59|      1|                ],
   60|      1|                knownForDepartment: "Acting",
   61|      1|                biography: "William Bradley 'Brad' Pitt (born December 18, 1963) is an American actor and film producer. Pitt has received two Academy Award nominations and four Golden Globe Award nominations, winning one. He has been described as one of the world's most attractive men, a label for which he has received substantial media attention. Pitt began his acting career with television guest appearances, including a role on the CBS prime-time soap opera Dallas in 1987. He later gained recognition as the cowboy hitchhiker who seduces Geena Davis's character in the 1991 road movie Thelma & Louise. Pitt's first leading roles in big-budget productions came with A River Runs Through It (1992) and Interview with the Vampire (1994). He was cast opposite Anthony Hopkins in the 1994 drama Legends of the Fall, which earned him his first Golden Globe nomination. In 1995 he gave critically acclaimed performances in the crime thriller Seven and the science fiction film 12 Monkeys, the latter securing him a Golden Globe Award for Best Supporting Actor and an Academy Award nomination.",
   62|      1|                birthday: DateFormatter.theMovieDatabase.date(from: "1963-12-18"),
   63|      1|                deathday: nil,
   64|      1|                gender: .male,
   65|      1|                placeOfBirth: "Shawnee, Oklahoma, USA",
   66|      1|                profilePath: URL(string: "/kU3B75TyRiCgE270EyZnHjfivoq.jpg"),
   67|      1|                popularity: 10.647,
   68|      1|                imdbId: "nm0000093",
   69|      1|                homepage: nil
   70|      1|            )
   71|      1|        ],
   72|      1|        totalResults: 1,
   73|      1|        totalPages: 1
   74|      1|    )
   75|       |    // swiftlint:enable line_length
   76|       |
   77|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PersonTVShowCreditsTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PersonTVShowCreditsTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPersonTVShowCredits() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(PersonTVShowCredits.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.id, personTVShowCredits.id)
   11|      1|        XCTAssertEqual(result.cast, personTVShowCredits.cast)
   12|      1|        XCTAssertEqual(result.crew, personTVShowCredits.crew)
   13|      1|    }
   14|       |
   15|       |    // swiftlint:disable line_length
   16|       |    private let json = """
   17|       |    {
   18|       |      "cast": [
   19|       |        {
   20|       |          "id": 54,
   21|       |          "original_language": "en",
   22|       |          "episode_count": 2,
   23|       |          "overview": "Growing Pains is an American television sitcom about an affluent family, residing in Huntington, Long Island, New York, with a working mother and a stay-at-home psychiatrist father raising three children together, which aired on ABC from September 24, 1985, to April 25, 1992.",
   24|       |          "origin_country": [
   25|       |            "US"
   26|       |          ],
   27|       |          "original_name": "Growing Pains",
   28|       |          "genre_ids": [
   29|       |            35
   30|       |          ],
   31|       |          "name": "Growing Pains",
   32|       |          "poster_path": "/eKyeUFwjc0LhPSp129IHpXniJVR.jpg",
   33|       |          "first_air_date": "1985-09-24",
   34|       |          "vote_average": 6.2,
   35|       |          "vote_count": 25,
   36|       |          "character": "",
   37|       |          "backdrop_path": "/xYpXcp7S8pStWihcksTQQue3jlV.jpg",
   38|       |          "popularity": 2.883124,
   39|       |          "credit_id": "525333fb19c295794002c720"
   40|       |        }
   41|       |      ],
   42|       |      "crew": [
   43|       |        {
   44|       |          "id": 69061,
   45|       |          "department": "Production",
   46|       |          "original_language": "en",
   47|       |          "episode_count": 8,
   48|       |          "job": "Executive Producer",
   49|       |          "overview": "Prairie Johnson, blind as a child, comes home to the community she grew up in with her sight restored. Some hail her a miracle, others a dangerous mystery, but Prairie won’t talk with the FBI or her parents about the seven years she went missing.",
   50|       |          "origin_country": [],
   51|       |          "original_name": "The OA",
   52|       |          "vote_count": 121,
   53|       |          "name": "The OA",
   54|       |          "popularity": 6.990147,
   55|       |          "credit_id": "58cf92ae9251415a7d0339c3",
   56|       |          "backdrop_path": "/k9kPIikcQBzl93nSyXUfqc74J9S.jpg",
   57|       |          "first_air_date": "2016-12-16",
   58|       |          "vote_average": 7.3,
   59|       |          "genre_ids": [
   60|       |            18,
   61|       |            9648,
   62|       |            10765
   63|       |          ],
   64|       |          "poster_path": "/ppSiYu2D0nw6KNF0kf5lKDxOGRR.jpg"
   65|       |        }
   66|       |      ],
   67|       |      "id": 287
   68|       |    }
   69|       |    """
   70|       |
   71|      1|    private let personTVShowCredits = PersonTVShowCredits(
   72|      1|        id: 287,
   73|      1|        cast: [
   74|      1|            TVShow(
   75|      1|                id: 54,
   76|      1|                name: "Growing Pains",
   77|      1|                originalName: "Growing Pains",
   78|      1|                originalLanguage: "en",
   79|      1|                overview: "Growing Pains is an American television sitcom about an affluent family, residing in Huntington, Long Island, New York, with a working mother and a stay-at-home psychiatrist father raising three children together, which aired on ABC from September 24, 1985, to April 25, 1992.",
   80|      1|                firstAirDate: DateFormatter.theMovieDatabase.date(from: "1985-09-24"),
   81|      1|                originCountry: ["US"],
   82|      1|                posterPath: URL(string: "/eKyeUFwjc0LhPSp129IHpXniJVR.jpg"),
   83|      1|                backdropPath: URL(string: "/xYpXcp7S8pStWihcksTQQue3jlV.jpg"),
   84|      1|                popularity: 2.883124,
   85|      1|                voteAverage: 6.2,
   86|      1|                voteCount: 25
   87|      1|            )
   88|      1|        ],
   89|      1|        crew: [
   90|      1|            TVShow(
   91|      1|                id: 69061,
   92|      1|                name: "The OA",
   93|      1|                originalName: "The OA",
   94|      1|                originalLanguage: "en",
   95|      1|                overview: "Prairie Johnson, blind as a child, comes home to the community she grew up in with her sight restored. Some hail her a miracle, others a dangerous mystery, but Prairie won’t talk with the FBI or her parents about the seven years she went missing.", firstAirDate: DateFormatter.theMovieDatabase.date(from: "2016-12-16"),
   96|      1|                originCountry: [],
   97|      1|                posterPath: URL(string: "/ppSiYu2D0nw6KNF0kf5lKDxOGRR.jpg"),
   98|      1|                backdropPath: URL(string: "/k9kPIikcQBzl93nSyXUfqc74J9S.jpg"),
   99|      1|                popularity: 6.990147,
  100|      1|                voteAverage: 7.3,
  101|      1|                voteCount: 121
  102|      1|            )
  103|      1|        ]
  104|      1|    )
  105|       |    // swiftlint:enable line_length
  106|       |
  107|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/PersonTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PersonTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsPerson() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Person.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, person)
   11|      1|    }
   12|       |
   13|       |    // swiftlint:disable line_length
   14|       |    private let json = """
   15|       |    {
   16|       |        "birthday": "1963-12-18",
   17|       |        "known_for_department": "Acting",
   18|       |        "deathday": null,
   19|       |        "id": 287,
   20|       |        "name": "Brad Pitt",
   21|       |        "also_known_as": [
   22|       |            "Бред Питт",
   23|       |            "Бред Пітт",
   24|       |            "Buratto Pitto",
   25|       |            "Брэд Питт"
   26|       |        ],
   27|       |        "gender": 2,
   28|       |        "biography": "William Bradley 'Brad' Pitt (born December 18, 1963) is an American actor and film producer. Pitt has received two Academy Award nominations and four Golden Globe Award nominations, winning one. He has been described as one of the world's most attractive men, a label for which he has received substantial media attention. Pitt began his acting career with television guest appearances, including a role on the CBS prime-time soap opera Dallas in 1987. He later gained recognition as the cowboy hitchhiker who seduces Geena Davis's character in the 1991 road movie Thelma & Louise. Pitt's first leading roles in big-budget productions came with A River Runs Through It (1992) and Interview with the Vampire (1994). He was cast opposite Anthony Hopkins in the 1994 drama Legends of the Fall, which earned him his first Golden Globe nomination. In 1995 he gave critically acclaimed performances in the crime thriller Seven and the science fiction film 12 Monkeys, the latter securing him a Golden Globe Award for Best Supporting Actor and an Academy Award nomination.",
   29|       |        "popularity": 10.647,
   30|       |        "place_of_birth": "Shawnee, Oklahoma, USA",
   31|       |        "profile_path": "/kU3B75TyRiCgE270EyZnHjfivoq.jpg",
   32|       |        "adult": false,
   33|       |        "imdb_id": "nm0000093",
   34|       |        "homepage": null
   35|       |    }
   36|       |    """
   37|       |
   38|      1|    private let person = Person(
   39|      1|        id: 287,
   40|      1|        name: "Brad Pitt",
   41|      1|        alsoKnownAs: [
   42|      1|            "Бред Питт",
   43|      1|            "Бред Пітт",
   44|      1|            "Buratto Pitto",
   45|      1|            "Брэд Питт"
   46|      1|        ],
   47|      1|        knownForDepartment: "Acting",
   48|      1|        biography: "William Bradley 'Brad' Pitt (born December 18, 1963) is an American actor and film producer. Pitt has received two Academy Award nominations and four Golden Globe Award nominations, winning one. He has been described as one of the world's most attractive men, a label for which he has received substantial media attention. Pitt began his acting career with television guest appearances, including a role on the CBS prime-time soap opera Dallas in 1987. He later gained recognition as the cowboy hitchhiker who seduces Geena Davis's character in the 1991 road movie Thelma & Louise. Pitt's first leading roles in big-budget productions came with A River Runs Through It (1992) and Interview with the Vampire (1994). He was cast opposite Anthony Hopkins in the 1994 drama Legends of the Fall, which earned him his first Golden Globe nomination. In 1995 he gave critically acclaimed performances in the crime thriller Seven and the science fiction film 12 Monkeys, the latter securing him a Golden Globe Award for Best Supporting Actor and an Academy Award nomination.",
   49|      1|        birthday: DateFormatter.theMovieDatabase.date(from: "1963-12-18"),
   50|      1|        deathday: nil,
   51|      1|        gender: .male,
   52|      1|        placeOfBirth: "Shawnee, Oklahoma, USA",
   53|      1|        profilePath: URL(string: "/kU3B75TyRiCgE270EyZnHjfivoq.jpg"),
   54|      1|        popularity: 10.647,
   55|      1|        imdbId: "nm0000093",
   56|      1|        homepage: nil
   57|      1|    )
   58|       |    // swiftlint:enable line_length
   59|       |
   60|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ProductionCompanyTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ProductionCompanyTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsProductionCompany() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ProductionCompany.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, productionCompany)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "id": 25,
   16|       |        "logo_path": "/qZCc1lty5FzX30aOCVRBLzaVmcp.png",
   17|       |        "name": "20th Century Fox",
   18|       |        "origin_country": "US"
   19|       |    }
   20|       |    """
   21|       |
   22|      1|    private let productionCompany = ProductionCompany(
   23|      1|        id: 25,
   24|      1|        name: "20th Century Fox",
   25|      1|        originCountry: "US",
   26|      1|        logoPath: URL(string: "/qZCc1lty5FzX30aOCVRBLzaVmcp.png")
   27|      1|    )
   28|       |
   29|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ProductionCountryTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ProductionCountryTests: XCTestCase {
    5|       |
    6|      1|    func testID_returnsISO31661() {
    7|      1|        XCTAssertEqual(productionCountry.id, productionCountry.iso31661)
    8|      1|    }
    9|       |
   10|      1|    func testDecode_returnsProductionCountry() throws {
   11|      1|        let data = json.data(using: .utf8)!
   12|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ProductionCountry.self, from: data)
   13|      1|
   14|      1|        XCTAssertEqual(result, productionCountry)
   15|      1|    }
   16|       |
   17|       |    private let json = """
   18|       |    {
   19|       |        "iso_3166_1": "US",
   20|       |        "name": "United States of America"
   21|       |    }
   22|       |    """
   23|       |
   24|      2|    private let productionCountry = ProductionCountry(
   25|      2|        iso31661: "US",
   26|      2|        name: "United States of America"
   27|      2|    )
   28|       |
   29|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ReviewPageableListTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ReviewPageableListTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsReviewPageableList() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ReviewPageableList.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.page, list.page)
   11|      1|        XCTAssertEqual(result.results, list.results)
   12|      1|        XCTAssertEqual(result.totalResults, list.totalResults)
   13|      1|        XCTAssertEqual(result.totalPages, list.totalPages)
   14|      1|    }
   15|       |
   16|       |    // swiftlint:disable line_length
   17|       |    private let json = """
   18|       |    {
   19|       |      "id": 297761,
   20|       |      "page": 1,
   21|       |      "results": [
   22|       |        {
   23|       |          "id": "57a814dc9251415cfb00309a",
   24|       |          "author": "Frank Ochieng",
   25|       |          "content": "Summertime 2016 has not been very kind to DC Comics-based personalities looking to shine consistently like their big screen Marvel Comics counterparts. Following the super-sized dud that was _Batman v. Superman: Dawn of Justice_ released a few months ago must really put some major pressure on Warner Bros. to gamble on ensuring that the presence of **Suicide Squad** does not meet the same kind of indifferent reception. Well, it turns out that although the anticipation was high for writer-director David Ayer's supervillain saga involving high-powered imprisoned rogues recruited as U.S. governmental operatives out to stop other skillful baddies (as it was for Zack Ryder's aforementioned Dawn of Justice) the concoction of **Suicide Squad** feels like a colorful mishmash of collective misfits laboriously taking up space in a disjointed eye candy-coated spectacle that never manages to match its intended sizzle. One would think that the premise for **Suicide Squad** would tap into the intriguing naughtiness with more robust gumption given the collection of super-powered oddballs asked to be immediate anti-heroes in this toothless jamboree of renegade rejects. Strangely, the grim and brooding presentation of **Suicide Squad** is more of an erratic downer than a hyperactive high-wire act as intended at the creative hands of Ayer. There is no reason why this lively group of adventurous agitators should appear so flat and inconsequential in a boisterous blockbuster that sporadically limps. Given the twisted members that comprise this elite team of terrorizing tools it is very disappointing to see how **Suicide Squad** struggles with its so-called subversive themes. Sadly, this splattered mess never firmly grasps its bid for distinctive irreverence or off-balance exploitation. Instead, **Squad** feels strained in its execution and we are never really invested in entirely watching these treasured troublemakers find redemption because the story is soggy and uninspired. Furthermore, not all of the **Squad** participants are fleshed out satisfyingly for us to get behind with thirsty cynicism. The headlining leads in Will Smith's Floyd Lawton/Deadshot, Oscar-winner Jared Leto's green-haired Joker and Australian beauty Margot Robbie's Harleen Quinzel/Harley Quinn get the meaty standout parts while the lesser known supporting cast get stuck with chewing on the thankless remaining bone while seemingly acting as background furniture to the bigger names. Naturally, desperation has set in for the U.S. government as they need to safeguard national security against advanced sinister forces that threaten the fiber of American self-interests everywhere. What better way to hire gifted protection than to consider employing the world's most incarcerated corruptible, cutthroat cretins to perform the dirty work in unforgivable mission ops that require death-defying determination. Enter U.S. Intelligence agent Amanda Waller (Oscar nominee Viola Davis). Waller's duties are to assemble the ragtag team known as the Suicide Squad--ominous (yet talented) jailbirds tapped to step in and assume superhero status (especially when the real superheroes are tied up in other crime-stopping affairs) while helping out for the greater good of our vulnerable society. In exchange for the Suicide Squad's sacrifice in turning from hell-bent heels to reluctant heralded heroes they are promised commuted prison sentences should they effectively defend and destroy the deadly foes out to promote heavy-handed havoc across the board. Conveniently, bureaucratic bigwig Waller (through voiceover) introduces the Suicide Squad and describes what beneficial assets they bring to the turbulent table. Among the naughty notables include the well-known ace sniper Floyd Lawton/Deadshot as well as legendary lethal joy-boy Joker and his better (or perhaps worst half) in girlfriend Harley Quinn. The other toxic tag-a-longs along for the thrill ride of becoming rebellious rescuers include George Harkness/Boomerang (Jai Courtney), Chato Santana/El Diablo (Jay Hernandez), Waylon Jones/Killer Croc (Adewale Akinnuoye-Agbaje), Tatsu Yamashiro/Katana, Enchantress (Cara Delevingne) and Rick Flag (Joel Kinnaman). Overall, **Suicide Squad** is surprisingly depressing and goes through the proverbial motions without so much as taking advantage of its surrealistic makeup. The movie never realizes its excitable potential and drifts into yet another superhero yarn that is more patchy than pronounced. Smith's Deadshot is out in the forefront but for the most part feels restrained and not as spry and savvy as one would imagine. Leto's Joker obviously pales in comparison to the brilliant and mesmerizing psychotic take on the role that earned the late Heath Ledger his posthumous Oscar statuette. In all fairness, nobody could inhabit the Clown Prince of Crime as Ledger uncannily did with committed concentration. Still, Leto's Joker--although viciously off-balance--felt recycled and furiously empty at times. Robbie's turn as Joker's misguided main squeeze merely comes off as a bratty Barbie Doll with synthetic edginess. The other **Squad** participants settle for the back burner more or less which is a crying shame because they should have been more engaged than the tepid material allowed them to be initially. Woefully sketchy and missing the fueled opulence that one would expect emerging from this cockeyed costume caper **Suicide Squad** is a detonating dud for the missing explosive DC Comics movie brand that needs to step up the pace if they expect to make a consistent and challenging impression on the devoted fanboys at the box office looking to move beyond the sardonic fantasy-based realm of another redundant serving of a _Batman/Superman_ entry. **Suicide Squad** (2016) Warner Bros. 2 hrs. 3 mins. Starring: Will Smith, Jared Leto, Margo Robbie, Viola Davis, Joel Kinnaman, Jay Hernandez, Jai Courtney, Scott Eastwood, Adewale Akinnuoye-Agbaje, Ike Barinholtz, Common, Cara Delevinge, Karen Fukuhara, Adam Beach Directed and Written by: David Ayer MPPA Rating: PG-13 Genre: Superheroes Saga/Action & Adventure/Comic Book Fantasy Critic's rating: ** stars (out of 4 stars) (c) **Frank Ochieng** (2016)",
   26|       |          "url": "https://www.themoviedb.org/review/57a814dc9251415cfb00309a"
   27|       |        }
   28|       |      ],
   29|       |      "total_pages": 1,
   30|       |      "total_results": 1
   31|       |    }
   32|       |    """
   33|       |
   34|      1|    private let list = ReviewPageableList(
   35|      1|        page: 1,
   36|      1|        results: [
   37|      1|            Review(
   38|      1|                id: "57a814dc9251415cfb00309a",
   39|      1|                author: "Frank Ochieng",
   40|      1|                content: "Summertime 2016 has not been very kind to DC Comics-based personalities looking to shine consistently like their big screen Marvel Comics counterparts. Following the super-sized dud that was _Batman v. Superman: Dawn of Justice_ released a few months ago must really put some major pressure on Warner Bros. to gamble on ensuring that the presence of **Suicide Squad** does not meet the same kind of indifferent reception. Well, it turns out that although the anticipation was high for writer-director David Ayer's supervillain saga involving high-powered imprisoned rogues recruited as U.S. governmental operatives out to stop other skillful baddies (as it was for Zack Ryder's aforementioned Dawn of Justice) the concoction of **Suicide Squad** feels like a colorful mishmash of collective misfits laboriously taking up space in a disjointed eye candy-coated spectacle that never manages to match its intended sizzle. One would think that the premise for **Suicide Squad** would tap into the intriguing naughtiness with more robust gumption given the collection of super-powered oddballs asked to be immediate anti-heroes in this toothless jamboree of renegade rejects. Strangely, the grim and brooding presentation of **Suicide Squad** is more of an erratic downer than a hyperactive high-wire act as intended at the creative hands of Ayer. There is no reason why this lively group of adventurous agitators should appear so flat and inconsequential in a boisterous blockbuster that sporadically limps. Given the twisted members that comprise this elite team of terrorizing tools it is very disappointing to see how **Suicide Squad** struggles with its so-called subversive themes. Sadly, this splattered mess never firmly grasps its bid for distinctive irreverence or off-balance exploitation. Instead, **Squad** feels strained in its execution and we are never really invested in entirely watching these treasured troublemakers find redemption because the story is soggy and uninspired. Furthermore, not all of the **Squad** participants are fleshed out satisfyingly for us to get behind with thirsty cynicism. The headlining leads in Will Smith's Floyd Lawton/Deadshot, Oscar-winner Jared Leto's green-haired Joker and Australian beauty Margot Robbie's Harleen Quinzel/Harley Quinn get the meaty standout parts while the lesser known supporting cast get stuck with chewing on the thankless remaining bone while seemingly acting as background furniture to the bigger names. Naturally, desperation has set in for the U.S. government as they need to safeguard national security against advanced sinister forces that threaten the fiber of American self-interests everywhere. What better way to hire gifted protection than to consider employing the world's most incarcerated corruptible, cutthroat cretins to perform the dirty work in unforgivable mission ops that require death-defying determination. Enter U.S. Intelligence agent Amanda Waller (Oscar nominee Viola Davis). Waller's duties are to assemble the ragtag team known as the Suicide Squad--ominous (yet talented) jailbirds tapped to step in and assume superhero status (especially when the real superheroes are tied up in other crime-stopping affairs) while helping out for the greater good of our vulnerable society. In exchange for the Suicide Squad's sacrifice in turning from hell-bent heels to reluctant heralded heroes they are promised commuted prison sentences should they effectively defend and destroy the deadly foes out to promote heavy-handed havoc across the board. Conveniently, bureaucratic bigwig Waller (through voiceover) introduces the Suicide Squad and describes what beneficial assets they bring to the turbulent table. Among the naughty notables include the well-known ace sniper Floyd Lawton/Deadshot as well as legendary lethal joy-boy Joker and his better (or perhaps worst half) in girlfriend Harley Quinn. The other toxic tag-a-longs along for the thrill ride of becoming rebellious rescuers include George Harkness/Boomerang (Jai Courtney), Chato Santana/El Diablo (Jay Hernandez), Waylon Jones/Killer Croc (Adewale Akinnuoye-Agbaje), Tatsu Yamashiro/Katana, Enchantress (Cara Delevingne) and Rick Flag (Joel Kinnaman). Overall, **Suicide Squad** is surprisingly depressing and goes through the proverbial motions without so much as taking advantage of its surrealistic makeup. The movie never realizes its excitable potential and drifts into yet another superhero yarn that is more patchy than pronounced. Smith's Deadshot is out in the forefront but for the most part feels restrained and not as spry and savvy as one would imagine. Leto's Joker obviously pales in comparison to the brilliant and mesmerizing psychotic take on the role that earned the late Heath Ledger his posthumous Oscar statuette. In all fairness, nobody could inhabit the Clown Prince of Crime as Ledger uncannily did with committed concentration. Still, Leto's Joker--although viciously off-balance--felt recycled and furiously empty at times. Robbie's turn as Joker's misguided main squeeze merely comes off as a bratty Barbie Doll with synthetic edginess. The other **Squad** participants settle for the back burner more or less which is a crying shame because they should have been more engaged than the tepid material allowed them to be initially. Woefully sketchy and missing the fueled opulence that one would expect emerging from this cockeyed costume caper **Suicide Squad** is a detonating dud for the missing explosive DC Comics movie brand that needs to step up the pace if they expect to make a consistent and challenging impression on the devoted fanboys at the box office looking to move beyond the sardonic fantasy-based realm of another redundant serving of a _Batman/Superman_ entry. **Suicide Squad** (2016) Warner Bros. 2 hrs. 3 mins. Starring: Will Smith, Jared Leto, Margo Robbie, Viola Davis, Joel Kinnaman, Jay Hernandez, Jai Courtney, Scott Eastwood, Adewale Akinnuoye-Agbaje, Ike Barinholtz, Common, Cara Delevinge, Karen Fukuhara, Adam Beach Directed and Written by: David Ayer MPPA Rating: PG-13 Genre: Superheroes Saga/Action & Adventure/Comic Book Fantasy Critic's rating: ** stars (out of 4 stars) (c) **Frank Ochieng** (2016)"
   41|      1|            )
   42|      1|        ],
   43|      1|        totalResults: 1,
   44|      1|        totalPages: 1
   45|      1|    )
   46|       |    // swiftlint:enable line_length
   47|       |
   48|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ReviewTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ReviewTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsReview() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Review.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, review)
   11|      1|    }
   12|       |
   13|       |    // swiftlint:disable line_length
   14|       |    private let json = """
   15|       |    {
   16|       |        "id": "5488c29bc3a3686f4a00004a",
   17|       |        "author": "Travis Bell",
   18|       |        "content": "Like most of the reviews here, I agree that Guardians of the Galaxy was an absolute hoot. Guardians never takes itself too seriously which makes this movie a whole lot of fun. The cast was perfectly chosen and even though two of the main five were CG, knowing who voiced and acted alongside them completely filled out these characters. Guardians of the Galaxy is one of those rare complete audience pleasers. Good fun for everyone!",
   19|       |        "iso_639_1": "en",
   20|       |        "media_id": 118340,
   21|       |        "media_title": "Guardians of the Galaxy",
   22|       |        "media_type": "Movie",
   23|       |        "url": "https://www.themoviedb.org/review/5488c29bc3a3686f4a00004a"
   24|       |    }
   25|       |    """
   26|       |
   27|      1|    private let review = Review(
   28|      1|        id: "5488c29bc3a3686f4a00004a",
   29|      1|        author: "Travis Bell",
   30|      1|        content: "Like most of the reviews here, I agree that Guardians of the Galaxy was an absolute hoot. Guardians never takes itself too seriously which makes this movie a whole lot of fun. The cast was perfectly chosen and even though two of the main five were CG, knowing who voiced and acted alongside them completely filled out these characters. Guardians of the Galaxy is one of those rare complete audience pleasers. Good fun for everyone!"
   31|      1|    )
   32|       |    // swiftlint:enable line_length
   33|       |
   34|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ShowCreditsTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ShowCreditsTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsShowCredits() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(ShowCredits.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.id, showCredits.id)
   11|      1|        XCTAssertEqual(result.cast, showCredits.cast)
   12|      1|        XCTAssertEqual(result.crew, showCredits.crew)
   13|      1|    }
   14|       |
   15|       |    private let json = """
   16|       |    {
   17|       |      "id": 550,
   18|       |      "cast": [
   19|       |        {
   20|       |          "cast_id": 4,
   21|       |          "character": "The Narrator",
   22|       |          "credit_id": "52fe4250c3a36847f80149f3",
   23|       |          "gender": 2,
   24|       |          "id": 819,
   25|       |          "name": "Edward Norton",
   26|       |          "order": 0,
   27|       |          "profile_path": "/eIkFHNlfretLS1spAcIoihKUS62.jpg"
   28|       |        },
   29|       |        {
   30|       |          "cast_id": 5,
   31|       |          "character": "Tyler Durden",
   32|       |          "credit_id": "52fe4250c3a36847f80149f7",
   33|       |          "gender": 2,
   34|       |          "id": 287,
   35|       |          "name": "Brad Pitt",
   36|       |          "order": 1,
   37|       |          "profile_path": "/kc3M04QQAuZ9woUvH3Ju5T7ZqG5.jpg"
   38|       |        },
   39|       |        {
   40|       |          "cast_id": 7,
   41|       |          "character": "Robert 'Bob' Paulson",
   42|       |          "credit_id": "52fe4250c3a36847f80149ff",
   43|       |          "gender": 2,
   44|       |          "id": 7470,
   45|       |          "name": "Meat Loaf",
   46|       |          "order": 2,
   47|       |          "profile_path": "/43nyfW3TxD3PxDqYB8tyqaKpDBH.jpg"
   48|       |        }
   49|       |      ],
   50|       |      "crew": [
   51|       |        {
   52|       |          "credit_id": "56380f0cc3a3681b5c0200be",
   53|       |          "department": "Writing",
   54|       |          "gender": 0,
   55|       |          "id": 7469,
   56|       |          "job": "Screenplay",
   57|       |          "name": "Jim Uhls",
   58|       |          "profile_path": null
   59|       |        },
   60|       |        {
   61|       |          "credit_id": "52fe4250c3a36847f8014a05",
   62|       |          "department": "Production",
   63|       |          "gender": 0,
   64|       |          "id": 7474,
   65|       |          "job": "Producer",
   66|       |          "name": "Ross Grayson Bell",
   67|       |          "profile_path": null
   68|       |        }
   69|       |      ]
   70|       |    }
   71|       |    """
   72|       |
   73|      1|    private let showCredits = ShowCredits(
   74|      1|        id: 550,
   75|      1|        cast: [
   76|      1|            CastMember(
   77|      1|                id: 819,
   78|      1|                castID: 4,
   79|      1|                creditID: "52fe4250c3a36847f80149f3",
   80|      1|                name: "Edward Norton",
   81|      1|                character: "The Narrator",
   82|      1|                gender: .male,
   83|      1|                profilePath: URL(string: "/eIkFHNlfretLS1spAcIoihKUS62.jpg"),
   84|      1|                order: 0
   85|      1|            ),
   86|      1|            CastMember(
   87|      1|                id: 287,
   88|      1|                castID: 5,
   89|      1|                creditID: "52fe4250c3a36847f80149f7",
   90|      1|                name: "Brad Pitt",
   91|      1|                character: "Tyler Durden",
   92|      1|                gender: .male,
   93|      1|                profilePath: URL(string: "/kc3M04QQAuZ9woUvH3Ju5T7ZqG5.jpg"),
   94|      1|                order: 1
   95|      1|            ),
   96|      1|            CastMember(
   97|      1|                id: 7470,
   98|      1|                castID: 7,
   99|      1|                creditID: "52fe4250c3a36847f80149ff",
  100|      1|                name: "Meat Loaf",
  101|      1|                character: "Robert 'Bob' Paulson",
  102|      1|                gender: .male,
  103|      1|                profilePath: URL(string: "/43nyfW3TxD3PxDqYB8tyqaKpDBH.jpg"),
  104|      1|                order: 2
  105|      1|            )
  106|      1|        ],
  107|      1|        crew: [
  108|      1|            CrewMember(
  109|      1|                id: 7469,
  110|      1|                creditID: "56380f0cc3a3681b5c0200be",
  111|      1|                name: "Jim Uhls",
  112|      1|                job: "Screenplay",
  113|      1|                department: "Writing",
  114|      1|                gender: .unknown,
  115|      1|                profilePath: nil
  116|      1|            ),
  117|      1|            CrewMember(
  118|      1|                id: 7474,
  119|      1|                creditID: "52fe4250c3a36847f8014a05",
  120|      1|                name: "Ross Grayson Bell",
  121|      1|                job: "Producer",
  122|      1|                department: "Production",
  123|      1|                gender: .unknown,
  124|      1|                profilePath: nil
  125|      1|            )
  126|      1|        ]
  127|      1|    )
  128|       |
  129|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/ShowTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ShowTests: XCTestCase {
    5|       |
    6|      1|    func testID_whenMovie_returnsMovieID() {
    7|      1|        XCTAssertEqual(movieShow.id, 109091)
    8|      1|    }
    9|       |
   10|      1|    func testID_whenTVShow_returnsTVShowID() {
   11|      1|        XCTAssertEqual(tvShowShow.id, 54)
   12|      1|    }
   13|       |
   14|      1|    func testPopularity_whenMovie_returnsMoviePopularity() {
   15|      1|        XCTAssertEqual(movieShow.popularity, 3.597124)
   16|      1|    }
   17|       |
   18|      1|    func testPopularity_whenTVShow_returnsTVShowPopularity() {
   19|      1|        XCTAssertEqual(tvShowShow.popularity, 2.883124)
   20|      1|    }
   21|       |
   22|      1|    func testDate_whenMovie_returnsMovieReleaseDate() {
   23|      1|        let expectedResult = DateFormatter.theMovieDatabase.date(from: "2013-10-25")
   24|      1|        XCTAssertEqual(movieShow.date, expectedResult)
   25|      1|    }
   26|       |
   27|      1|    func testDate_whenTVShow_returnsTVShowFirstAirDate() {
   28|      1|        let expectedResult = DateFormatter.theMovieDatabase.date(from: "1985-09-24")
   29|      1|        XCTAssertEqual(tvShowShow.date, expectedResult)
   30|      1|    }
   31|       |
   32|      1|    func testDecode_returnsMovie() throws {
   33|      1|        let data = movieJSON.data(using: .utf8)!
   34|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Show.self, from: data)
   35|      1|
   36|      1|        XCTAssertEqual(result, movieShow)
   37|      1|    }
   38|       |
   39|      1|    func testDecode_returnsTVShow() throws {
   40|      1|        let data = tvShowJSON.data(using: .utf8)!
   41|      1|        let result = try JSONDecoder.theMovieDatabase.decode(Show.self, from: data)
   42|      1|
   43|      1|        XCTAssertEqual(result, tvShowShow)
   44|      1|    }
   45|       |
   46|       |    // swiftlint:disable line_length
   47|       |    private let movieJSON = """
   48|       |    {
   49|       |        "id": 109091,
   50|       |        "original_language": "en",
   51|       |        "original_title": "The Counselor",
   52|       |        "overview": "A rich and successful lawyer named Counselor is about to get married to his fiancée but soon meets up with the middle-man known as Westray who tells him his drug trafficking plan has taken a horrible twist and now he must protect himself and his soon bride-to-be lover as the truth of the drug business uncovers and targets become chosen.",
   53|       |        "vote_count": 661,
   54|       |        "video": false,
   55|       |        "media_type": "movie",
   56|       |        "credit_id": "52fe4aaac3a36847f81db47d",
   57|       |        "vote_average": 5,
   58|       |        "character": "Westray",
   59|       |        "popularity": 3.597124,
   60|       |        "release_date": "2013-10-25",
   61|       |        "title": "The Counselor",
   62|       |        "genre_ids": [
   63|       |        80,
   64|       |        18,
   65|       |        53
   66|       |        ],
   67|       |        "adult": false,
   68|       |        "backdrop_path": "/62xHmGnxMi0wV40BS3iKnDru0nO.jpg",
   69|       |        "poster_path": "/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg"
   70|       |    }
   71|       |    """
   72|       |
   73|       |    private let tvShowJSON = """
   74|       |    {
   75|       |        "id": 54,
   76|       |        "original_language": "en",
   77|       |        "episode_count": 2,
   78|       |        "overview": "Growing Pains is an American television sitcom about an affluent family, residing in Huntington, Long Island, New York, with a working mother and a stay-at-home psychiatrist father raising three children together, which aired on ABC from September 24, 1985, to April 25, 1992.",
   79|       |        "origin_country": [
   80|       |            "US"
   81|       |        ],
   82|       |        "original_name": "Growing Pains",
   83|       |        "genre_ids": [
   84|       |            35
   85|       |        ],
   86|       |        "name": "Growing Pains",
   87|       |        "media_type": "tv",
   88|       |        "poster_path": "/eKyeUFwjc0LhPSp129IHpXniJVR.jpg",
   89|       |        "first_air_date": "1985-09-24",
   90|       |        "vote_average": 6.2,
   91|       |        "vote_count": 25,
   92|       |        "character": "",
   93|       |        "backdrop_path": "/xYpXcp7S8pStWihcksTQQue3jlV.jpg",
   94|       |        "popularity": 2.883124,
   95|       |        "credit_id": "525333fb19c295794002c720"
   96|       |    }
   97|       |    """
   98|       |
   99|      8|    private let movieShow: Show = .movie(Movie(
  100|      8|        id: 109091,
  101|      8|        title: "The Counselor",
  102|      8|        originalTitle: "The Counselor",
  103|      8|        originalLanguage: "en",
  104|      8|        overview: "A rich and successful lawyer named Counselor is about to get married to his fiancée but soon meets up with the middle-man known as Westray who tells him his drug trafficking plan has taken a horrible twist and now he must protect himself and his soon bride-to-be lover as the truth of the drug business uncovers and targets become chosen.",
  105|      8|        releaseDate: DateFormatter.theMovieDatabase.date(from: "2013-10-25"),
  106|      8|        posterPath: URL(string: "/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg"),
  107|      8|        backdropPath: URL(string: "/62xHmGnxMi0wV40BS3iKnDru0nO.jpg"),
  108|      8|        popularity: 3.597124,
  109|      8|        voteAverage: 5,
  110|      8|        voteCount: 661,
  111|      8|        video: false,
  112|      8|        adult: false
  113|      8|    ))
  114|       |
  115|      8|    private let tvShowShow: Show = .tvShow(TVShow(
  116|      8|        id: 54,
  117|      8|        name: "Growing Pains",
  118|      8|        originalName: "Growing Pains",
  119|      8|        originalLanguage: "en",
  120|      8|        overview: "Growing Pains is an American television sitcom about an affluent family, residing in Huntington, Long Island, New York, with a working mother and a stay-at-home psychiatrist father raising three children together, which aired on ABC from September 24, 1985, to April 25, 1992.",
  121|      8|        firstAirDate: DateFormatter.theMovieDatabase.date(from: "1985-09-24"),
  122|      8|        originCountry: ["US"],
  123|      8|        posterPath: URL(string: "/eKyeUFwjc0LhPSp129IHpXniJVR.jpg"),
  124|      8|        backdropPath: URL(string: "/xYpXcp7S8pStWihcksTQQue3jlV.jpg"),
  125|      8|        popularity: 2.883124,
  126|      8|        voteAverage: 6.2,
  127|      8|        voteCount: 25
  128|      8|    ))
  129|       |    // swiftlint:enable line_length
  130|       |
  131|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/SpokenLanguageTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class SpokenLanguageTests: XCTestCase {
    5|       |
    6|      1|    func testID_returnsISO6391() {
    7|      1|        XCTAssertEqual(spokenLanguage.id, spokenLanguage.iso6391)
    8|      1|    }
    9|       |
   10|      1|    func testDecode_returnsSpokenLanguage() throws {
   11|      1|        let data = json.data(using: .utf8)!
   12|      1|        let result = try JSONDecoder.theMovieDatabase.decode(SpokenLanguage.self, from: data)
   13|      1|
   14|      1|        XCTAssertEqual(result, spokenLanguage)
   15|      1|    }
   16|       |
   17|       |    private let json = """
   18|       |    {
   19|       |        "iso_639_1": "en",
   20|       |        "name": "English"
   21|       |    }
   22|       |    """
   23|       |
   24|      2|    private let spokenLanguage = SpokenLanguage(
   25|      2|        iso6391: "en",
   26|      2|        name: "English"
   27|      2|    )
   28|       |
   29|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/StatusTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class StatusTests: XCTestCase {
    5|       |
    6|      1|    func testRumoredStatus_returnsRawValue() {
    7|      1|        XCTAssertEqual(Status.rumored.rawValue, "Rumored")
    8|      1|    }
    9|       |
   10|      1|    func testPlannedStatus_returnsRawValue() {
   11|      1|        XCTAssertEqual(Status.planned.rawValue, "Planned")
   12|      1|    }
   13|       |
   14|      1|    func testInProductionStatus_returnsRawValue() {
   15|      1|        XCTAssertEqual(Status.inProduction.rawValue, "In Production")
   16|      1|    }
   17|       |
   18|      1|    func testPostProductionStatus_returnsRawValue() {
   19|      1|        XCTAssertEqual(Status.postProduction.rawValue, "Post Production")
   20|      1|    }
   21|       |
   22|      1|    func testReleasedStatus_returnsRawValue() {
   23|      1|        XCTAssertEqual(Status.released.rawValue, "Released")
   24|      1|    }
   25|       |
   26|      1|    func testCanceledStatus_returnsRawValue() {
   27|      1|        XCTAssertEqual(Status.canceled.rawValue, "Canceled")
   28|      1|    }
   29|       |
   30|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/TMDbErrorTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TMDbErrorTests: XCTestCase {
    5|       |
    6|      1|    func testNetwork_returnsErrorDescription() {
    7|      1|        let urlError = URLError(.badURL)
    8|      1|        let expectedResult = urlError.localizedDescription
    9|      1|
   10|      1|        let result = TMDbError.network(urlError).localizedDescription
   11|      1|
   12|      1|        XCTAssertEqual(result, expectedResult)
   13|      1|    }
   14|       |
   15|      1|    func testUnauthorized_returnsErrorDescription() {
   16|      1|        XCTAssertEqual(TMDbError.unauthorized.localizedDescription, "Unauthorised")
   17|      1|    }
   18|       |
   19|      1|    func testNotFound_returnsErrorDescription() {
   20|      1|        XCTAssertEqual(TMDbError.notFound.localizedDescription, "Not Found")
   21|      1|    }
   22|       |
   23|      1|    func testUnknown_returnsErrorDescription() {
   24|      1|        XCTAssertEqual(TMDbError.unknown.localizedDescription, "Unknown Error")
   25|      1|    }
   26|       |
   27|      1|    func testDecode_returnsErrorDescription() {
   28|      1|        let error = URLError(.badURL)
   29|      1|
   30|      1|        let result = TMDbError.decode(error).localizedDescription
   31|      1|
   32|      1|        XCTAssertEqual(result, "Data Decode Error")
   33|      1|    }
   34|       |
   35|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/TVShowEpisodeTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowEpisodeTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsTVShowEpisode() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(TVShowEpisode.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, tvShowEpisode)
   11|      1|    }
   12|       |
   13|       |    // swiftlint:disable line_length
   14|       |    private let json = """
   15|       |    {
   16|       |        "air_date": "2011-04-17",
   17|       |        "crew": [
   18|       |            {
   19|       |                "id": 44797,
   20|       |                "credit_id": "5256c8a219c2956ff6046e77",
   21|       |                "name": "Tim Van Patten",
   22|       |                "department": "Directing",
   23|       |                "job": "Director",
   24|       |                "profile_path": "/6b7l9YbkDHDOzOKUFNqBVaPjcgm.jpg"
   25|       |            }
   26|       |        ],
   27|       |        "episode_number": 1,
   28|       |        "guest_stars": [
   29|       |            {
   30|       |                "id": 117642,
   31|       |                "name": "Jason Momoa",
   32|       |                "credit_id": "5256c8a219c2956ff6046f40",
   33|       |                "character": "Khal Drogo",
   34|       |                "order": 0,
   35|       |                "profile_path": "/PSK6GmsVwdhqz9cd1lwzC6a7EA.jpg"
   36|       |            },
   37|       |        ],
   38|       |        "name": "Winter Is Coming",
   39|       |        "overview": "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army.",
   40|       |        "id": 63056,
   41|       |        "production_code": "101",
   42|       |        "season_number": 1,
   43|       |        "still_path": "/wrGWeW4WKxnaeA8sxJb2T9O6ryo.jpg",
   44|       |        "vote_average": 7.11904761904762,
   45|       |        "vote_count": 21
   46|       |    }
   47|       |    """
   48|       |
   49|      1|    private let tvShowEpisode = TVShowEpisode(
   50|      1|        id: 63056,
   51|      1|        name: "Winter Is Coming",
   52|      1|        episodeNumber: 1,
   53|      1|        seasonNumber: 1,
   54|      1|        overview: "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army.",
   55|      1|        airDate: DateFormatter.theMovieDatabase.date(from: "2011-04-17"),
   56|      1|        productionCode: "101",
   57|      1|        stillPath: URL(string: "/wrGWeW4WKxnaeA8sxJb2T9O6ryo.jpg"),
   58|      1|        crew: [
   59|      1|            CrewMember(
   60|      1|                id: 44797,
   61|      1|                creditID: "5256c8a219c2956ff6046e77",
   62|      1|                name: "Tim Van Patten",
   63|      1|                job: "Director",
   64|      1|                department: "Directing",
   65|      1|                profilePath: URL(string: "/6b7l9YbkDHDOzOKUFNqBVaPjcgm.jpg")
   66|      1|            )
   67|      1|        ],
   68|      1|        guestStars: [
   69|      1|            CastMember(
   70|      1|                id: 117642,
   71|      1|                creditID: "5256c8a219c2956ff6046f40",
   72|      1|                name: "Jason Momoa",
   73|      1|                character: "Khal Drogo",
   74|      1|                profilePath: URL(string: "/PSK6GmsVwdhqz9cd1lwzC6a7EA.jpg"),
   75|      1|                order: 0
   76|      1|            )
   77|      1|        ],
   78|      1|        voteAverage: 7.11904761904762,
   79|      1|        voteCount: 21
   80|      1|    )
   81|       |    // swiftlint:enable line_length
   82|       |
   83|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/TVShowPageableListTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowPageableListTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsTVShowPageableList() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(TVShowPageableList.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result.page, list.page)
   11|      1|        XCTAssertEqual(result.results, list.results)
   12|      1|        XCTAssertEqual(result.totalResults, list.totalResults)
   13|      1|        XCTAssertEqual(result.totalPages, list.totalPages)
   14|      1|    }
   15|       |
   16|       |    private let json = """
   17|       |    {
   18|       |        "page": 1,
   19|       |        "results": [
   20|       |            {
   21|       |                "id": 1,
   22|       |                "name": "TV Show 1"
   23|       |            },
   24|       |            {
   25|       |                "id": 2,
   26|       |                "name": "TV Show 2"
   27|       |            },
   28|       |            {
   29|       |                "id": 3,
   30|       |                "name": "TV Show 3"
   31|       |            }
   32|       |        ],
   33|       |        "total_pages": 1,
   34|       |        "total_results": 3
   35|       |    }
   36|       |    """
   37|       |
   38|      1|    private let list = TVShowPageableList(
   39|      1|        page: 1,
   40|      1|        results: [
   41|      1|            TVShow(id: 1, name: "TV Show 1"),
   42|      1|            TVShow(id: 2, name: "TV Show 2"),
   43|      1|            TVShow(id: 3, name: "TV Show 3")
   44|      1|        ],
   45|      1|        totalResults: 3,
   46|      1|        totalPages: 1
   47|      1|    )
   48|       |
   49|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/TVShowSeasonTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowSeasonTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsTVShowSeason() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(TVShowSeason.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, tvShowSeason)
   11|      1|    }
   12|       |
   13|       |    // swiftlint:disable line_length
   14|       |    private let json = """
   15|       |    {
   16|       |        "air_date": "2011-04-17",
   17|       |        "episode_count": 10,
   18|       |        "id": 3624,
   19|       |        "name": "Season 1",
   20|       |        "overview": "Trouble is brewing in the Seven Kingdoms of Westeros. For the driven inhabitants of this visionary world, control of Westeros' Iron Throne holds the lure of great power. But in a land where the seasons can last a lifetime, winter is coming...and beyond the Great Wall that protects them, an ancient evil has returned. In Season One, the story centers on three primary areas: the Stark and the Lannister families, whose designs on controlling the throne threaten a tenuous peace; the dragon princess Daenerys, heir to the former dynasty, who waits just over the Narrow Sea with her malevolent brother Viserys; and the Great Wall--a massive barrier of ice where a forgotten danger is stirring.",
   21|       |        "poster_path": "/zwaj4egrhnXOBIit1tyb4Sbt3KP.jpg",
   22|       |        "season_number": 1
   23|       |    }
   24|       |    """
   25|       |
   26|      1|    private let tvShowSeason = TVShowSeason(
   27|      1|        id: 3624,
   28|      1|        name: "Season 1",
   29|      1|        seasonNumber: 1,
   30|      1|        overview: "Trouble is brewing in the Seven Kingdoms of Westeros. For the driven inhabitants of this visionary world, control of Westeros' Iron Throne holds the lure of great power. But in a land where the seasons can last a lifetime, winter is coming...and beyond the Great Wall that protects them, an ancient evil has returned. In Season One, the story centers on three primary areas: the Stark and the Lannister families, whose designs on controlling the throne threaten a tenuous peace; the dragon princess Daenerys, heir to the former dynasty, who waits just over the Narrow Sea with her malevolent brother Viserys; and the Great Wall--a massive barrier of ice where a forgotten danger is stirring.",
   31|      1|        airDate: DateFormatter.theMovieDatabase.date(from: "2011-04-17"),
   32|      1|        posterPath: URL(string: "/zwaj4egrhnXOBIit1tyb4Sbt3KP.jpg"),
   33|      1|        episodes: nil
   34|      1|    )
   35|       |    // swiftlint:enable line_length
   36|       |
   37|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/TVShowTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowTests: XCTestCase {
    5|       |
    6|      1|    func testFirstAirDate_whenNil_returnsNil() {
    7|      1|        let tvShow = TVShow(id: 1, name: "Some name", firstAirDate: nil)
    8|      1|
    9|      1|        XCTAssertNil(tvShow.firstAirDate)
   10|      1|    }
   11|       |
   12|      1|    func testHomepageURL_whenNil_returnsNil() {
   13|      1|        let tvShow = TVShow(id: 1, name: "Some name", homepageURL: nil)
   14|      1|
   15|      1|        XCTAssertNil(tvShow.homepageURL)
   16|      1|    }
   17|       |
   18|      1|    func testHomepageURL_whenHasURL_returnsURL() {
   19|      1|        let expectedResult = URL(string: "https://some.domain.com")!
   20|      1|        let tvShow = TVShow(id: 1, name: "Some name", homepageURL: expectedResult)
   21|      1|
   22|      1|        XCTAssertEqual(tvShow.homepageURL, expectedResult)
   23|      1|    }
   24|       |
   25|      1|    func testDecode_returnsTVShow() throws {
   26|      1|        let data = json.data(using: .utf8)!
   27|      1|        let result = try JSONDecoder.theMovieDatabase.decode(TVShow.self, from: data)
   28|      1|
   29|      1|        XCTAssertEqual(result, tvShow)
   30|      1|    }
   31|       |
   32|       |    // swiftlint:disable line_length
   33|       |    private let json = """
   34|       |    {
   35|       |        "backdrop_path": "/gX8SYlnL9ZznfZwEH4KJUePBFUM.jpg",
   36|       |        "created_by": [
   37|       |            {
   38|       |                "id": 9813,
   39|       |                "credit_id": "5256c8c219c2956ff604858a",
   40|       |                "name": "David Benioff",
   41|       |                "gender": 2,
   42|       |                "profile_path": "/8CuuNIKMzMUL1NKOPv9AqEwM7og.jpg"
   43|       |            },
   44|       |            {
   45|       |                "id": 228068,
   46|       |                "credit_id": "552e611e9251413fea000901",
   47|       |                "name": "D. B. Weiss",
   48|       |                "gender": 2,
   49|       |                "profile_path": "/caUAtilEe06OwOjoQY3B7BgpARi.jpg"
   50|       |            }
   51|       |        ],
   52|       |        "episode_run_time": [
   53|       |            60
   54|       |        ],
   55|       |        "first_air_date": "2011-04-17",
   56|       |        "genres": [
   57|       |            {
   58|       |              "id": 10765,
   59|       |              "name": "Sci-Fi & Fantasy"
   60|       |            },
   61|       |            {
   62|       |              "id": 18,
   63|       |              "name": "Drama"
   64|       |            },
   65|       |            {
   66|       |              "id": 10759,
   67|       |              "name": "Action & Adventure"
   68|       |            }
   69|       |        ],
   70|       |        "homepage": "http://www.hbo.com/game-of-thrones",
   71|       |        "id": 1399,
   72|       |        "in_production": true,
   73|       |        "languages": [
   74|       |            "es",
   75|       |            "en",
   76|       |            "de"
   77|       |        ],
   78|       |        "last_air_date": "2017-08-27",
   79|       |        "last_episode_to_air": {
   80|       |            "air_date": "2017-08-27",
   81|       |            "episode_number": 7,
   82|       |            "id": 1340528,
   83|       |            "name": "The Dragon and the Wolf",
   84|       |            "overview": "A meeting is held in King's Landing. Problems arise in the North.",
   85|       |            "production_code": "707",
   86|       |            "season_number": 7,
   87|       |            "show_id": 1399,
   88|       |            "still_path": "/jLe9VcbGRDUJeuM8IwB7VX4GDRg.jpg",
   89|       |            "vote_average": 9.145,
   90|       |            "vote_count": 31
   91|       |        },
   92|       |        "name": "Game of Thrones",
   93|       |        "next_episode_to_air": null,
   94|       |        "networks": [
   95|       |            {
   96|       |              "name": "HBO",
   97|       |              "id": 49,
   98|       |              "logo_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
   99|       |              "origin_country": "US"
  100|       |            }
  101|       |        ],
  102|       |        "number_of_episodes": 67,
  103|       |        "number_of_seasons": 7,
  104|       |        "origin_country": [
  105|       |            "US"
  106|       |        ],
  107|       |        "original_language": "en",
  108|       |        "original_name": "Game of Thrones",
  109|       |        "overview": "Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.",
  110|       |        "popularity": 53.516,
  111|       |        "poster_path": "/gwPSoYUHAKmdyVywgLpKKA4BjRr.jpg",
  112|       |        "production_companies": [
  113|       |            {
  114|       |              "id": 3268,
  115|       |              "logo_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
  116|       |              "name": "HBO",
  117|       |              "origin_country": "US"
  118|       |            }
  119|       |        ],
  120|       |        "seasons": [
  121|       |            {
  122|       |              "air_date": "2011-04-17",
  123|       |              "episode_count": 10,
  124|       |              "id": 3624,
  125|       |              "name": "Season 1",
  126|       |              "overview": "Trouble is brewing in the Seven Kingdoms of Westeros. For the driven inhabitants of this visionary world, control of Westeros' Iron Throne holds the lure of great power. But in a land where the seasons can last a lifetime, winter is coming...and beyond the Great Wall that protects them, an ancient evil has returned. In Season One, the story centers on three primary areas: the Stark and the Lannister families, whose designs on controlling the throne threaten a tenuous peace; the dragon princess Daenerys, heir to the former dynasty, who waits just over the Narrow Sea with her malevolent brother Viserys; and the Great Wall--a massive barrier of ice where a forgotten danger is stirring.",
  127|       |              "poster_path": "/zwaj4egrhnXOBIit1tyb4Sbt3KP.jpg",
  128|       |              "season_number": 1
  129|       |            }
  130|       |        ],
  131|       |        "status": "Returning Series",
  132|       |        "type": "Scripted",
  133|       |        "vote_average": 8.2,
  134|       |        "vote_count": 4682
  135|       |    }
  136|       |    """
  137|       |
  138|      4|    private let tvShow = TVShow(
  139|      4|        id: 1399,
  140|      4|        name: "Game of Thrones",
  141|      4|        originalName: "Game of Thrones",
  142|      4|        originalLanguage: "en",
  143|      4|        overview: "Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.",
  144|      4|        episodeRunTime: [60],
  145|      4|        numberOfSeasons: 7,
  146|      4|        numberOfEpisodes: 67,
  147|      4|        seasons: [
  148|      4|            TVShowSeason(
  149|      4|                id: 3624,
  150|      4|                name: "Season 1",
  151|      4|                seasonNumber: 1,
  152|      4|                overview: "Trouble is brewing in the Seven Kingdoms of Westeros. For the driven inhabitants of this visionary world, control of Westeros' Iron Throne holds the lure of great power. But in a land where the seasons can last a lifetime, winter is coming...and beyond the Great Wall that protects them, an ancient evil has returned. In Season One, the story centers on three primary areas: the Stark and the Lannister families, whose designs on controlling the throne threaten a tenuous peace; the dragon princess Daenerys, heir to the former dynasty, who waits just over the Narrow Sea with her malevolent brother Viserys; and the Great Wall--a massive barrier of ice where a forgotten danger is stirring.",
  153|      4|                airDate: DateFormatter.theMovieDatabase.date(from: "2011-04-17"),
  154|      4|                posterPath: URL(string: "/zwaj4egrhnXOBIit1tyb4Sbt3KP.jpg"),
  155|      4|                episodes: nil
  156|      4|            )
  157|      4|        ],
  158|      4|        genres: [
  159|      4|            Genre(id: 10765, name: "Sci-Fi & Fantasy"),
  160|      4|            Genre(id: 18, name: "Drama"),
  161|      4|            Genre(id: 10759, name: "Action & Adventure")
  162|      4|        ],
  163|      4|        firstAirDate: DateFormatter.theMovieDatabase.date(from: "2011-04-17"),
  164|      4|        originCountry: ["US"],
  165|      4|        posterPath: URL(string: "/gwPSoYUHAKmdyVywgLpKKA4BjRr.jpg"),
  166|      4|        backdropPath: URL(string: "/gX8SYlnL9ZznfZwEH4KJUePBFUM.jpg"),
  167|      4|        homepageURL: URL(string: "http://www.hbo.com/game-of-thrones"),
  168|      4|        inProduction: true,
  169|      4|        languages: ["es", "en", "de"],
  170|      4|        lastAirDate: DateFormatter.theMovieDatabase.date(from: "2017-08-27"),
  171|      4|        networks: [
  172|      4|            Network(
  173|      4|                id: 49,
  174|      4|                name: "HBO",
  175|      4|                logoPath: URL(string: "/tuomPhY2UtuPTqqFnKMVHvSb724.png"),
  176|      4|                originCountry: "US"
  177|      4|            )
  178|      4|        ],
  179|      4|        productionCompanies: [
  180|      4|            ProductionCompany(
  181|      4|                id: 3268,
  182|      4|                name: "HBO",
  183|      4|                originCountry: "US",
  184|      4|                logoPath: URL(string: "/tuomPhY2UtuPTqqFnKMVHvSb724.png")
  185|      4|            )
  186|      4|        ],
  187|      4|        status: "Returning Series",
  188|      4|        type: "Scripted",
  189|      4|        popularity: 53.516,
  190|      4|        voteAverage: 8.2,
  191|      4|        voteCount: 4682
  192|      4|    )
  193|       |    // swiftlint:enable line_length
  194|       |
  195|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/VideoCollectionTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class VideoCollectionTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsVideoCollection() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(VideoCollection.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, videoCollection)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "id": 550,
   16|       |        "results": [
   17|       |            {
   18|       |                "id": "533ec654c3a36854480003eb",
   19|       |                "iso_639_1": "en",
   20|       |                "iso_3166_1": "US",
   21|       |                "key": "SUXWAEX2jlg",
   22|       |                "name": "Trailer 1",
   23|       |                "site": "YouTube",
   24|       |                "size": 720,
   25|       |                "type": "Trailer"
   26|       |            }
   27|       |        ]
   28|       |    }
   29|       |    """
   30|       |
   31|      1|    private let videoCollection = VideoCollection(
   32|      1|        id: 550,
   33|      1|        results: [
   34|      1|            VideoMetadata(
   35|      1|                id: "533ec654c3a36854480003eb",
   36|      1|                name: "Trailer 1",
   37|      1|                site: "YouTube",
   38|      1|                key: "SUXWAEX2jlg",
   39|      1|                type: .trailer,
   40|      1|                size: .s720
   41|      1|            )
   42|      1|        ]
   43|      1|    )
   44|       |
   45|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/VideoMetadataTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class VideoMetadataTests: XCTestCase {
    5|       |
    6|      1|    func testDecode_returnsVideoCollection() throws {
    7|      1|        let data = json.data(using: .utf8)!
    8|      1|        let result = try JSONDecoder.theMovieDatabase.decode(VideoMetadata.self, from: data)
    9|      1|
   10|      1|        XCTAssertEqual(result, videoMetadata)
   11|      1|    }
   12|       |
   13|       |    private let json = """
   14|       |    {
   15|       |        "id": "533ec654c3a36854480003eb",
   16|       |        "iso_639_1": "en",
   17|       |        "iso_3166_1": "US",
   18|       |        "key": "SUXWAEX2jlg",
   19|       |        "name": "Trailer 1",
   20|       |        "site": "YouTube",
   21|       |        "size": 720,
   22|       |        "type": "Trailer"
   23|       |    }
   24|       |    """
   25|       |
   26|      1|    private let videoMetadata = VideoMetadata(
   27|      1|        id: "533ec654c3a36854480003eb",
   28|      1|        name: "Trailer 1",
   29|      1|        site: "YouTube",
   30|      1|        key: "SUXWAEX2jlg",
   31|      1|        type: .trailer,
   32|      1|        size: .s720
   33|      1|    )
   34|       |
   35|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/VideoSizeTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class VideoSizeTests: XCTestCase {
    5|       |
    6|      1|    func test360VideoSize_returnsRawValue() {
    7|      1|        XCTAssertEqual(VideoSize.s360.rawValue, 360)
    8|      1|    }
    9|       |
   10|      1|    func test480VideoSize_returnsRawValue() {
   11|      1|        XCTAssertEqual(VideoSize.s480.rawValue, 480)
   12|      1|    }
   13|       |
   14|      1|    func test720VideoSize_returnsRawValue() {
   15|      1|        XCTAssertEqual(VideoSize.s720.rawValue, 720)
   16|      1|    }
   17|       |
   18|      1|    func test1080VideoSize_returnsRawValue() {
   19|      1|        XCTAssertEqual(VideoSize.s1080.rawValue, 1080)
   20|      1|    }
   21|       |
   22|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Models/VideoTypeTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class VideoTypeTests: XCTestCase {
    5|       |
    6|      1|    func testTrailerVideoType_returnsRawValue() {
    7|      1|        XCTAssertEqual(VideoType.trailer.rawValue, "Trailer")
    8|      1|    }
    9|       |
   10|      1|    func testTeaserVideoType_returnsRawValue() {
   11|      1|        XCTAssertEqual(VideoType.teaser.rawValue, "Teaser")
   12|      1|    }
   13|       |
   14|      1|    func testClipVideoType_returnsRawValue() {
   15|      1|        XCTAssertEqual(VideoType.clip.rawValue, "Clip")
   16|      1|    }
   17|       |
   18|      1|    func testOpeningCreditsVideoType_returnsRawValue() {
   19|      1|        XCTAssertEqual(VideoType.openingCredits.rawValue, "Opening Credits")
   20|      1|    }
   21|       |
   22|      1|    func testFeaturetteVideoType_returnsRawValue() {
   23|      1|        XCTAssertEqual(VideoType.featurette.rawValue, "Featurette")
   24|      1|    }
   25|       |
   26|      1|    func testBehindTheScenesVideoType_returnsRawValue() {
   27|      1|        XCTAssertEqual(VideoType.behindTheScenes.rawValue, "Behind the Scenes")
   28|      1|    }
   29|       |
   30|      1|    func testBloopersVideoType_returnsRawValue() {
   31|      1|        XCTAssertEqual(VideoType.bloopers.rawValue, "Bloopers")
   32|      1|    }
   33|       |
   34|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Certifications/CertificationsEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class CertificationsEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testMovieEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/certification/movie/list")!
    8|      1|
    9|      1|        let url = CertificationsEndpoint.movie.url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testTVShowEndpoint_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/certification/tv/list")!
   16|      1|
   17|      1|        let url = CertificationsEndpoint.tvShow.url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Certifications/TMDbCertificationServiceTests.swift:
    1|       |import Combine
    2|       |@testable import TMDb
    3|       |import XCTest
    4|       |
    5|       |class TMDbCertificationServiceTests: XCTestCase {
    6|       |
    7|      2|    var cancellables: Set<AnyCancellable> = []
    8|       |    var service: TMDbCertificationService!
    9|       |    var apiClient: MockAPIClient!
   10|       |
   11|      2|    override func setUp() {
   12|      2|        super.setUp()
   13|      2|
   14|      2|        apiClient = MockAPIClient()
   15|      2|        service = TMDbCertificationService(apiClient: apiClient)
   16|      2|    }
   17|       |
   18|      2|    override func tearDown() {
   19|      2|        apiClient.reset()
   20|      2|
   21|      2|        super.tearDown()
   22|      2|    }
   23|       |
   24|      1|    func testFetchMovieCertifications_returnsMovieCertifications() {
   25|      1|        let expectedResult = [
   26|      1|            "A": [
   27|      1|                Certification(code: "1", meaning: "Meaning 1", order: 1),
   28|      1|                Certification(code: "2", meaning: "Meaning 2", order: 2)
   29|      1|            ],
   30|      1|            "B": [
   31|      1|                Certification(code: "3", meaning: "Meaning 3", order: 1),
   32|      1|                Certification(code: "4", meaning: "Meaning 4", order: 2)
   33|      1|            ]
   34|      1|        ]
   35|      1|
   36|      1|        apiClient.response = expectedResult
   37|      1|
   38|      1|        let finished = XCTestExpectation(description: "finished")
   39|      1|        service.fetchMovieCertifications()
   40|      1|            .sink(receiveCompletion: { _ in
   41|      1|            }, receiveValue: { result in
   42|      1|                XCTAssertEqual(result, expectedResult)
   43|      1|                finished.fulfill()
   44|      1|            })
   45|      1|            .store(in: &cancellables)
   46|      1|
   47|      1|        wait(for: [finished], timeout: 1)
   48|      1|
   49|      1|        XCTAssertEqual(apiClient.lastPath, CertificationsEndpoint.movie.url)
   50|      1|    }
   51|       |
   52|      1|    func testFetchTVShowCertifications_returnsMovieCertifications() {
   53|      1|        let expectedResult = [
   54|      1|            "A": [
   55|      1|                Certification(code: "1", meaning: "Meaning 1", order: 1),
   56|      1|                Certification(code: "2", meaning: "Meaning 2", order: 2)
   57|      1|            ],
   58|      1|            "B": [
   59|      1|                Certification(code: "3", meaning: "Meaning 3", order: 1),
   60|      1|                Certification(code: "4", meaning: "Meaning 4", order: 2)
   61|      1|            ]
   62|      1|        ]
   63|      1|
   64|      1|        apiClient.response = expectedResult
   65|      1|
   66|      1|        let finished = XCTestExpectation(description: "finished")
   67|      1|        service.fetchTVShowCertifications()
   68|      1|            .sink(receiveCompletion: { _ in
   69|      1|            }, receiveValue: { result in
   70|      1|                XCTAssertEqual(result, expectedResult)
   71|      1|                finished.fulfill()
   72|      1|            })
   73|      1|            .store(in: &cancellables)
   74|      1|
   75|      1|        wait(for: [finished], timeout: 1)
   76|      1|
   77|      1|        XCTAssertEqual(apiClient.lastPath, CertificationsEndpoint.tvShow.url)
   78|      1|    }
   79|       |
   80|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Configuration/ConfigurationEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class ConfigurationEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testAPIEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/configuration")!
    8|      1|
    9|      1|        let url = ConfigurationEndpoint.api.url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Configuration/TMDbConfigurationServiceTests.swift:
    1|       |import Combine
    2|       |@testable import TMDb
    3|       |import XCTest
    4|       |
    5|       |class TMDbConfigurationServiceTests: XCTestCase {
    6|       |
    7|      1|    var cancellables: Set<AnyCancellable> = []
    8|       |    var service: TMDbConfigurationService!
    9|       |    var apiClient: MockAPIClient!
   10|       |
   11|      1|    let apiConfiguration = APIConfiguration(
   12|      1|        images: ImagesConfiguration(
   13|      1|            baseUrl: URL(string: "http://image.tmdb.org/t/p/")!,
   14|      1|            secureBaseUrl: URL(string: "https://image.tmdb.org/t/p/")!,
   15|      1|            backdropSizes: [
   16|      1|                "w300",
   17|      1|                "w780",
   18|      1|                "w1280",
   19|      1|                "original"
   20|      1|            ],
   21|      1|            logoSizes: [
   22|      1|                "w45",
   23|      1|                "w92",
   24|      1|                "w154",
   25|      1|                "w185",
   26|      1|                "w300",
   27|      1|                "w500",
   28|      1|                "original"
   29|      1|            ],
   30|      1|            posterSizes: [
   31|      1|                "w92",
   32|      1|                "w154",
   33|      1|                "w185",
   34|      1|                "w342",
   35|      1|                "w500",
   36|      1|                "w780",
   37|      1|                "original"
   38|      1|            ],
   39|      1|            profileSizes: [
   40|      1|                "w45",
   41|      1|                "w185",
   42|      1|                "h632",
   43|      1|                "original"
   44|      1|            ],
   45|      1|            stillSizes: [
   46|      1|                "w92",
   47|      1|                "w185",
   48|      1|                "w300",
   49|      1|                "original"
   50|      1|            ]
   51|      1|        ),
   52|      1|        changeKeys: [
   53|      1|            "adult",
   54|      1|            "air_date",
   55|      1|            "also_known_as",
   56|      1|            "alternative_titles",
   57|      1|            "biography",
   58|      1|            "birthday",
   59|      1|            "budget",
   60|      1|            "cast",
   61|      1|            "certifications",
   62|      1|            "character_names",
   63|      1|            "created_by",
   64|      1|            "crew",
   65|      1|            "deathday",
   66|      1|            "episode",
   67|      1|            "episode_number",
   68|      1|            "episode_run_time",
   69|      1|            "freebase_id",
   70|      1|            "freebase_mid",
   71|      1|            "general",
   72|      1|            "genres",
   73|      1|            "guest_stars",
   74|      1|            "homepage",
   75|      1|            "images",
   76|      1|            "imdb_id",
   77|      1|            "languages",
   78|      1|            "name",
   79|      1|            "network",
   80|      1|            "origin_country",
   81|      1|            "original_name",
   82|      1|            "original_title",
   83|      1|            "overview",
   84|      1|            "parts",
   85|      1|            "place_of_birth",
   86|      1|            "plot_keywords",
   87|      1|            "production_code",
   88|      1|            "production_companies",
   89|      1|            "production_countries",
   90|      1|            "releases",
   91|      1|            "revenue",
   92|      1|            "runtime",
   93|      1|            "season",
   94|      1|            "season_number",
   95|      1|            "season_regular",
   96|      1|            "spoken_languages",
   97|      1|            "status",
   98|      1|            "tagline",
   99|      1|            "title",
  100|      1|            "translations",
  101|      1|            "tvdb_id",
  102|      1|            "tvrage_id",
  103|      1|            "type",
  104|      1|            "video",
  105|      1|            "videos"
  106|      1|        ]
  107|      1|    )
  108|       |
  109|      1|    override func setUp() {
  110|      1|        super.setUp()
  111|      1|
  112|      1|        apiClient = MockAPIClient()
  113|      1|        service = TMDbConfigurationService(apiClient: apiClient)
  114|      1|    }
  115|       |
  116|      1|    func testFetchAPIConfiguration_returnsAPIConfiguration() {
  117|      1|        apiClient.response = apiConfiguration
  118|      1|
  119|      1|        let finished = XCTestExpectation(description: "finished")
  120|      1|        service.fetchAPIConfiguration()
  121|      1|            .sink(receiveCompletion: { _ in
  122|      1|            }, receiveValue: { result in
  123|      1|                XCTAssertEqual(result, self.apiConfiguration)
  124|      1|                finished.fulfill()
  125|      1|            })
  126|      1|            .store(in: &cancellables)
  127|      1|
  128|      1|        wait(for: [finished], timeout: 1)
  129|      1|
  130|      1|        XCTAssertEqual(apiClient.lastPath, ConfigurationEndpoint.api.url)
  131|      1|    }
  132|       |
  133|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Discover/DiscoverEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class DiscoverEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testMoviesEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/discover/movie")!
    8|      1|
    9|      1|        let url = DiscoverEndpoint.movies().url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testMoviesEndpoint_withSortedBy_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/discover/movie?sort_by=original_title.asc")!
   16|      1|
   17|      1|        let url = DiscoverEndpoint.movies(sortBy: .originalTitleAscending).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testMoviesEndpoint_withWithPeople_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/discover/movie?with_people=1,2,3")!
   24|      1|
   25|      1|        let url = DiscoverEndpoint.movies(withPeople: [1, 2, 3]).url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|      1|    func testMoviesEndpoint_withPage_returnsURL() {
   31|      1|        let expectedURL = URL(string: "/discover/movie?page=1")!
   32|      1|
   33|      1|        let url = DiscoverEndpoint.movies(page: 1).url
   34|      1|
   35|      1|        XCTAssertEqual(url, expectedURL)
   36|      1|    }
   37|       |
   38|      1|    func testMoviesEndpoint_withSortedByAndWithPeopleAndPage_returnsURL() {
   39|      1|        let expectedURL = URL(string: "/discover/movie?sort_by=original_title.asc&with_people=1,2,3&page=1")!
   40|      1|
   41|      1|        let url = DiscoverEndpoint.movies(sortBy: .originalTitleAscending, withPeople: [1, 2, 3], page: 1).url
   42|      1|
   43|      1|        XCTAssertEqual(url, expectedURL)
   44|      1|    }
   45|       |
   46|      1|    func testTVShowsEndpoint_returnsURL() {
   47|      1|        let expectedURL = URL(string: "/discover/tv")!
   48|      1|
   49|      1|        let url = DiscoverEndpoint.tvShows().url
   50|      1|
   51|      1|        XCTAssertEqual(url, expectedURL)
   52|      1|    }
   53|       |
   54|      1|    func testTVShowsEndpoint_withSortedBy_returnsURL() {
   55|      1|        let expectedURL = URL(string: "/discover/tv?sort_by=first_air_date.asc")!
   56|      1|
   57|      1|        let url = DiscoverEndpoint.tvShows(sortBy: .firstAirDateAscending).url
   58|      1|
   59|      1|        XCTAssertEqual(url, expectedURL)
   60|      1|    }
   61|       |
   62|      1|    func testTVShowsEndpoint_withPage_returnsURL() {
   63|      1|        let expectedURL = URL(string: "/discover/tv?page=1")!
   64|      1|
   65|      1|        let url = DiscoverEndpoint.tvShows(page: 1).url
   66|      1|
   67|      1|        XCTAssertEqual(url, expectedURL)
   68|      1|    }
   69|       |
   70|      1|    func testTVShowsEndpoint_withSortedByAndPage_returnsURL() {
   71|      1|        let expectedURL = URL(string: "/discover/tv?sort_by=first_air_date.asc&page=1")!
   72|      1|
   73|      1|        let url = DiscoverEndpoint.tvShows(sortBy: .firstAirDateAscending, page: 1).url
   74|      1|
   75|      1|        XCTAssertEqual(url, expectedURL)
   76|      1|    }
   77|       |
   78|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Discover/MovieSortByTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class MovieSortByTests: XCTestCase {
    5|       |
    6|      1|    func testPopularityAscending_returnsRawValue() {
    7|      1|        let expectedResult = "popularity.asc"
    8|      1|
    9|      1|        let result = MovieSortBy.popularityAscending.rawValue
   10|      1|
   11|      1|        XCTAssertEqual(result, expectedResult)
   12|      1|    }
   13|       |
   14|      1|    func testPopularityDescending_returnsRawValue() {
   15|      1|        let expectedResult = "popularity.desc"
   16|      1|
   17|      1|        let result = MovieSortBy.popularityDescending.rawValue
   18|      1|
   19|      1|        XCTAssertEqual(result, expectedResult)
   20|      1|    }
   21|       |
   22|      1|    func testReleaseDateAscending_returnsRawValue() {
   23|      1|        let expectedResult = "release_date.asc"
   24|      1|
   25|      1|        let result = MovieSortBy.releaseDateAscending.rawValue
   26|      1|
   27|      1|        XCTAssertEqual(result, expectedResult)
   28|      1|    }
   29|       |
   30|      1|    func testReleaseDateDescending_returnsRawValue() {
   31|      1|        let expectedResult = "release_date.desc"
   32|      1|
   33|      1|        let result = MovieSortBy.releaseDateDescending.rawValue
   34|      1|
   35|      1|        XCTAssertEqual(result, expectedResult)
   36|      1|    }
   37|       |
   38|      1|    func testRevenueAscending_returnsRawValue() {
   39|      1|        let expectedResult = "revenue.asc"
   40|      1|
   41|      1|        let result = MovieSortBy.revenueAscending.rawValue
   42|      1|
   43|      1|        XCTAssertEqual(result, expectedResult)
   44|      1|    }
   45|       |
   46|      1|    func testRevenueDescending_returnsRawValue() {
   47|      1|        let expectedResult = "revenue.desc"
   48|      1|
   49|      1|        let result = MovieSortBy.revenueDescending.rawValue
   50|      1|
   51|      1|        XCTAssertEqual(result, expectedResult)
   52|      1|    }
   53|       |
   54|      1|    func testPrimaryReleaseDateAscendingAscending_returnsRawValue() {
   55|      1|        let expectedResult = "primary_release_date.asc"
   56|      1|
   57|      1|        let result = MovieSortBy.primaryReleaseDateAscending.rawValue
   58|      1|
   59|      1|        XCTAssertEqual(result, expectedResult)
   60|      1|    }
   61|       |
   62|      1|    func testPrimaryReleaseDateDescendingDescending_returnsRawValue() {
   63|      1|        let expectedResult = "primary_release_date.desc"
   64|      1|
   65|      1|        let result = MovieSortBy.primaryReleaseDateDescending.rawValue
   66|      1|
   67|      1|        XCTAssertEqual(result, expectedResult)
   68|      1|    }
   69|       |
   70|      1|    func testOriginalTitleAscending_returnsRawValue() {
   71|      1|        let expectedResult = "original_title.asc"
   72|      1|
   73|      1|        let result = MovieSortBy.originalTitleAscending.rawValue
   74|      1|
   75|      1|        XCTAssertEqual(result, expectedResult)
   76|      1|    }
   77|       |
   78|      1|    func testOriginalTitleDescending_returnsRawValue() {
   79|      1|        let expectedResult = "original_title.desc"
   80|      1|
   81|      1|        let result = MovieSortBy.originalTitleDescending.rawValue
   82|      1|
   83|      1|        XCTAssertEqual(result, expectedResult)
   84|      1|    }
   85|       |
   86|      1|    func testVoteAverageAscending_returnsRawValue() {
   87|      1|        let expectedResult = "vote_average.asc"
   88|      1|
   89|      1|        let result = MovieSortBy.voteAverageAscending.rawValue
   90|      1|
   91|      1|        XCTAssertEqual(result, expectedResult)
   92|      1|    }
   93|       |
   94|      1|    func testVoteAverageDescending_returnsRawValue() {
   95|      1|        let expectedResult = "vote_average.desc"
   96|      1|
   97|      1|        let result = MovieSortBy.voteAverageDescending.rawValue
   98|      1|
   99|      1|        XCTAssertEqual(result, expectedResult)
  100|      1|    }
  101|       |
  102|      1|    func testVoteCountAscending_returnsRawValue() {
  103|      1|        let expectedResult = "vote_count.asc"
  104|      1|
  105|      1|        let result = MovieSortBy.voteCountAscending.rawValue
  106|      1|
  107|      1|        XCTAssertEqual(result, expectedResult)
  108|      1|    }
  109|       |
  110|      1|    func testVoteCountDescending_returnsRawValue() {
  111|      1|        let expectedResult = "vote_count.desc"
  112|      1|
  113|      1|        let result = MovieSortBy.voteCountDescending.rawValue
  114|      1|
  115|      1|        XCTAssertEqual(result, expectedResult)
  116|      1|    }
  117|       |
  118|      1|    func testDefault_returnsRawValue() {
  119|      1|        let expectedResult = "popularity.desc"
  120|      1|
  121|      1|        let result = MovieSortBy.default.rawValue
  122|      1|
  123|      1|        XCTAssertEqual(result, expectedResult)
  124|      1|    }
  125|       |
  126|       |}
  127|       |
  128|       |extension MovieSortByTests {
  129|       |
  130|      1|    func testURLAppendingSortBy_returnsURL() {
  131|      1|        let expectedResult = URL(string: "/some/path?sort_by=popularity.asc")!
  132|      1|
  133|      1|        let result = URL(string: "/some/path")!.appendingSortBy(MovieSortBy.popularityAscending)
  134|      1|
  135|      1|        XCTAssertEqual(result, expectedResult)
  136|      1|    }
  137|       |
  138|      1|    func testURLAppendingNilSortBy_returnsURL() {
  139|      1|        let expectedResult = URL(string: "/some/path")!
  140|      1|
  141|      1|        let result = URL(string: "/some/path")!.appendingSortBy(nil as MovieSortBy?)
  142|      1|
  143|      1|        XCTAssertEqual(result, expectedResult)
  144|      1|    }
  145|       |
  146|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Discover/TMDbDiscoverServiceTests.swift:
    1|       |import Combine
    2|       |@testable import TMDb
    3|       |import XCTest
    4|       |
    5|       |class TMDbDiscoverServiceTests: XCTestCase {
    6|       |
    7|      2|    var cancellables: Set<AnyCancellable> = []
    8|       |    var service: TMDbDiscoverService!
    9|       |    var apiClient: MockAPIClient!
   10|       |
   11|      2|    override func setUp() {
   12|      2|        super.setUp()
   13|      2|
   14|      2|        apiClient = MockAPIClient()
   15|      2|        service = TMDbDiscoverService(apiClient: apiClient)
   16|      2|    }
   17|       |
   18|      2|    override func tearDown() {
   19|      2|        apiClient.reset()
   20|      2|
   21|      2|        super.tearDown()
   22|      2|    }
   23|       |
   24|      1|    func testFetchMovies_returnsMovies() {
   25|      1|        let expectedResult = MoviePageableList(
   26|      1|            page: 1,
   27|      1|            results: [
   28|      1|                Movie(id: 1, title: "Movie 1"),
   29|      1|                Movie(id: 2, title: "Movie 2"),
   30|      1|                Movie(id: 3, title: "Movie 3")
   31|      1|            ],
   32|      1|            totalResults: 3,
   33|      1|            totalPages: 1
   34|      1|        )
   35|      1|
   36|      1|        apiClient.response = expectedResult
   37|      1|
   38|      1|        let finished = XCTestExpectation(description: "finished")
   39|      1|        service.fetchMovies()
   40|      1|            .sink(receiveCompletion: { _ in
   41|      1|            }, receiveValue: { result in
   42|      1|                XCTAssertEqual(result, expectedResult)
   43|      1|                finished.fulfill()
   44|      1|            })
   45|      1|            .store(in: &cancellables)
   46|      1|
   47|      1|        wait(for: [finished], timeout: 1)
   48|      1|
   49|      1|        XCTAssertEqual(apiClient.lastPath, DiscoverEndpoint.movies().url)
   50|      1|    }
   51|       |
   52|      1|    func testFetchTVShows_returnsTVShows() {
   53|      1|        let expectedResult = TVShowPageableList(
   54|      1|            page: 1,
   55|      1|            results: [
   56|      1|                TVShow(id: 1, name: "TV Show 1"),
   57|      1|                TVShow(id: 2, name: "TV Show 2"),
   58|      1|                TVShow(id: 3, name: "TV Show 3")
   59|      1|            ],
   60|      1|            totalResults: 3,
   61|      1|            totalPages: 1
   62|      1|        )
   63|      1|
   64|      1|        apiClient.response = expectedResult
   65|      1|
   66|      1|        let finished = XCTestExpectation(description: "finished")
   67|      1|        service.fetchTVShows()
   68|      1|            .sink(receiveCompletion: { _ in
   69|      1|            }, receiveValue: { result in
   70|      1|                XCTAssertEqual(result, expectedResult)
   71|      1|                finished.fulfill()
   72|      1|            })
   73|      1|            .store(in: &cancellables)
   74|      1|
   75|      1|        wait(for: [finished], timeout: 1)
   76|      1|
   77|      1|        XCTAssertEqual(apiClient.lastPath, DiscoverEndpoint.tvShows().url)
   78|      1|    }
   79|       |
   80|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Discover/TVShowSortByTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowSortByTests: XCTestCase {
    5|       |
    6|      1|    func testPopularityAscending_returnsRawValue() {
    7|      1|        let expectedResult = "popularity.asc"
    8|      1|
    9|      1|        let result = TVShowSortBy.popularityAscending.rawValue
   10|      1|
   11|      1|        XCTAssertEqual(result, expectedResult)
   12|      1|    }
   13|       |
   14|      1|    func testPopularityDescending_returnsRawValue() {
   15|      1|        let expectedResult = "popularity.desc"
   16|      1|
   17|      1|        let result = TVShowSortBy.popularityDescending.rawValue
   18|      1|
   19|      1|        XCTAssertEqual(result, expectedResult)
   20|      1|    }
   21|       |
   22|      1|    func testFirstAirDateAscending_returnsRawValue() {
   23|      1|        let expectedResult = "first_air_date.asc"
   24|      1|
   25|      1|        let result = TVShowSortBy.firstAirDateAscending.rawValue
   26|      1|
   27|      1|        XCTAssertEqual(result, expectedResult)
   28|      1|    }
   29|       |
   30|      1|    func testFirstAirDateDescending_returnsRawValue() {
   31|      1|        let expectedResult = "first_air_date.desc"
   32|      1|
   33|      1|        let result = TVShowSortBy.firstAirDateDescending.rawValue
   34|      1|
   35|      1|        XCTAssertEqual(result, expectedResult)
   36|      1|    }
   37|       |
   38|      1|    func testVoteAverageAscending_returnsRawValue() {
   39|      1|        let expectedResult = "vote_average.asc"
   40|      1|
   41|      1|        let result = TVShowSortBy.voteAverageAscending.rawValue
   42|      1|
   43|      1|        XCTAssertEqual(result, expectedResult)
   44|      1|    }
   45|       |
   46|      1|    func testVoteAverageDescending_returnsRawValue() {
   47|      1|        let expectedResult = "vote_average.desc"
   48|      1|
   49|      1|        let result = TVShowSortBy.voteAverageDescending.rawValue
   50|      1|
   51|      1|        XCTAssertEqual(result, expectedResult)
   52|      1|    }
   53|       |
   54|      1|    func testDefault_returnsRawValue() {
   55|      1|        let expectedResult = "popularity.desc"
   56|      1|
   57|      1|        let result = TVShowSortBy.default.rawValue
   58|      1|
   59|      1|        XCTAssertEqual(result, expectedResult)
   60|      1|    }
   61|       |
   62|       |}
   63|       |
   64|       |extension TVShowSortByTests {
   65|       |
   66|      1|    func testURLAppendingSortBy_returnsURL() {
   67|      1|        let expectedResult = URL(string: "/some/path?sort_by=popularity.asc")!
   68|      1|
   69|      1|        let result = URL(string: "/some/path")!.appendingSortBy(TVShowSortBy.popularityAscending)
   70|      1|
   71|      1|        XCTAssertEqual(result, expectedResult)
   72|      1|    }
   73|       |
   74|      1|    func testURLAppendingNilSortBy_returnsURL() {
   75|      1|        let expectedResult = URL(string: "/some/path")!
   76|      1|
   77|      1|        let result = URL(string: "/some/path")!.appendingSortBy(nil as TVShowSortBy?)
   78|      1|
   79|      1|        XCTAssertEqual(result, expectedResult)
   80|      1|    }
   81|       |
   82|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Movies/MoviesEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class MoviesEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testMovieDetailsEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/movie/1")!
    8|      1|
    9|      1|        let url = MoviesEndpoint.details(movieID: 1).url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testMovieCreditsEndpoint_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/movie/1/credits")!
   16|      1|
   17|      1|        let url = MoviesEndpoint.credits(movieID: 1).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testMovieReviewsEndpoint_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/movie/1/reviews")!
   24|      1|
   25|      1|        let url = MoviesEndpoint.reviews(movieID: 1).url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|      1|    func testMovieReviewsEndpoint_withPage_returnsURL() {
   31|      1|        let expectedURL = URL(string: "/movie/1/reviews?page=2")!
   32|      1|
   33|      1|        let url = MoviesEndpoint.reviews(movieID: 1, page: 2).url
   34|      1|
   35|      1|        XCTAssertEqual(url, expectedURL)
   36|      1|    }
   37|       |
   38|      1|    func testMovieImagesEndpoint_returnsURL() {
   39|      1|        let expectedURL = URL(string: "/movie/1/images")!
   40|      1|
   41|      1|        let url = MoviesEndpoint.images(movieID: 1).url
   42|      1|
   43|      1|        XCTAssertEqual(url, expectedURL)
   44|      1|    }
   45|       |
   46|      1|    func testMovieVideosEndpoint_returnsURL() {
   47|      1|        let expectedURL = URL(string: "/movie/1/videos")!
   48|      1|
   49|      1|        let url = MoviesEndpoint.videos(movieID: 1).url
   50|      1|
   51|      1|        XCTAssertEqual(url, expectedURL)
   52|      1|    }
   53|       |
   54|      1|    func testMovieRecommendationsEndpoint_returnsURL() {
   55|      1|        let expectedURL = URL(string: "/movie/1/recommendations")!
   56|      1|
   57|      1|        let url = MoviesEndpoint.recommendations(movieID: 1).url
   58|      1|
   59|      1|        XCTAssertEqual(url, expectedURL)
   60|      1|    }
   61|       |
   62|      1|    func testMovieRecommendationsEndpoint_withPage_returnsURL() {
   63|      1|        let expectedURL = URL(string: "/movie/1/recommendations?page=2")!
   64|      1|
   65|      1|        let url = MoviesEndpoint.recommendations(movieID: 1, page: 2).url
   66|      1|
   67|      1|        XCTAssertEqual(url, expectedURL)
   68|      1|    }
   69|       |
   70|      1|    func testMovieSimilarEndpoint_returnsURL() {
   71|      1|        let expectedURL = URL(string: "/movie/1/similar")!
   72|      1|
   73|      1|        let url = MoviesEndpoint.similar(movieID: 1).url
   74|      1|
   75|      1|        XCTAssertEqual(url, expectedURL)
   76|      1|    }
   77|       |
   78|      1|    func testMovieSimilarEndpoint_withPage_returnsURL() {
   79|      1|        let expectedURL = URL(string: "/movie/1/similar?page=2")!
   80|      1|
   81|      1|        let url = MoviesEndpoint.similar(movieID: 1, page: 2).url
   82|      1|
   83|      1|        XCTAssertEqual(url, expectedURL)
   84|      1|    }
   85|       |
   86|      1|    func testMoviePopularEndpoint_returnsURL() {
   87|      1|        let expectedURL = URL(string: "/movie/popular")!
   88|      1|
   89|      1|        let url = MoviesEndpoint.popular().url
   90|      1|
   91|      1|        XCTAssertEqual(url, expectedURL)
   92|      1|    }
   93|       |
   94|      1|    func testMoviePopularEndpoint_withPage_returnsURL() {
   95|      1|        let expectedURL = URL(string: "/movie/popular?page=1")!
   96|      1|
   97|      1|        let url = MoviesEndpoint.popular(page: 1).url
   98|      1|
   99|      1|        XCTAssertEqual(url, expectedURL)
  100|      1|    }
  101|       |
  102|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Movies/TMDbMovieServiceTests.swift:
    1|       |import Combine
    2|       |@testable import TMDb
    3|       |import XCTest
    4|       |
    5|       |class TMDbMovieServiceTests: XCTestCase {
    6|       |
    7|      8|    var cancellables: Set<AnyCancellable> = []
    8|       |    var service: TMDbMovieService!
    9|       |    var apiClient: MockAPIClient!
   10|       |
   11|      8|    override func setUp() {
   12|      8|        super.setUp()
   13|      8|
   14|      8|        apiClient = MockAPIClient()
   15|      8|        service = TMDbMovieService(apiClient: apiClient)
   16|      8|    }
   17|       |
   18|      8|    override func tearDown() {
   19|      8|        apiClient.reset()
   20|      8|
   21|      8|        super.tearDown()
   22|      8|    }
   23|       |
   24|      1|    func testFetchDetails_returnsMovie() {
   25|      1|        let movieID = 1
   26|      1|        let expectedResult = Movie(id: movieID, title: "Some title")
   27|      1|
   28|      1|        apiClient.response = expectedResult
   29|      1|
   30|      1|        let finished = XCTestExpectation(description: "finished")
   31|      1|        service.fetchDetails(forMovie: movieID)
   32|      1|            .sink(receiveCompletion: { _ in
   33|      1|            }, receiveValue: { result in
   34|      1|                XCTAssertEqual(result, expectedResult)
   35|      1|                finished.fulfill()
   36|      1|            })
   37|      1|            .store(in: &cancellables)
   38|      1|
   39|      1|        wait(for: [finished], timeout: 1)
   40|      1|
   41|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.details(movieID: movieID).url)
   42|      1|    }
   43|       |
   44|      1|    func testFetchCredits_returnsCredits() {
   45|      1|        let movieID = 1
   46|      1|        let expectedResult = ShowCredits(
   47|      1|            id: movieID,
   48|      1|            cast: [CastMember(id: 2, creditID: "a", name: "Cast 1", character: "Character 1", order: 1)],
   49|      1|            crew: [CrewMember(id: 3, creditID: "b", name: "Crew 1", job: "Job 1", department: "Department 1")])
   50|      1|
   51|      1|        apiClient.response = expectedResult
   52|      1|
   53|      1|        let finished = XCTestExpectation(description: "finished")
   54|      1|        service.fetchCredits(forMovie: movieID)
   55|      1|            .sink(receiveCompletion: { _ in
   56|      1|            }, receiveValue: { result in
   57|      1|                XCTAssertEqual(result, expectedResult)
   58|      1|                finished.fulfill()
   59|      1|            })
   60|      1|            .store(in: &cancellables)
   61|      1|
   62|      1|        wait(for: [finished], timeout: 1)
   63|      1|
   64|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.credits(movieID: movieID).url)
   65|      1|    }
   66|       |
   67|      1|    func testFetchReviews_returnsReviews() {
   68|      1|        let movieID = 1
   69|      1|        let expectedResult = ReviewPageableList(
   70|      1|            page: 1,
   71|      1|            results: [Review(id: "2", author: "Author", content: "Some content")],
   72|      1|            totalResults: 2,
   73|      1|            totalPages: 1
   74|      1|        )
   75|      1|
   76|      1|        apiClient.response = expectedResult
   77|      1|
   78|      1|        let finished = XCTestExpectation(description: "finished")
   79|      1|        service.fetchReviews(forMovie: movieID)
   80|      1|            .sink(receiveCompletion: { _ in
   81|      1|            }, receiveValue: { result in
   82|      1|                XCTAssertEqual(result, expectedResult)
   83|      1|                finished.fulfill()
   84|      1|            })
   85|      1|            .store(in: &cancellables)
   86|      1|
   87|      1|        wait(for: [finished], timeout: 1)
   88|      1|
   89|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.reviews(movieID: movieID).url)
   90|      1|    }
   91|       |
   92|      1|    func testFetchImages_returnsImageCollection() {
   93|      1|        let movieID = 1
   94|      1|        let expectedResult = ImageCollection(
   95|      1|            id: movieID,
   96|      1|            posters: [ImageMetadata(filePath: URL(string: "/poster.jog")!, width: 10, height: 20)],
   97|      1|            backdrops: [ImageMetadata(filePath: URL(string: "/backgrop.jog")!, width: 50, height: 100)]
   98|      1|        )
   99|      1|
  100|      1|        apiClient.response = expectedResult
  101|      1|
  102|      1|        let finished = XCTestExpectation(description: "finished")
  103|      1|        service.fetchImages(forMovie: movieID)
  104|      1|            .sink(receiveCompletion: { _ in
  105|      1|            }, receiveValue: { result in
  106|      1|                XCTAssertEqual(result, expectedResult)
  107|      1|                finished.fulfill()
  108|      1|            })
  109|      1|            .store(in: &cancellables)
  110|      1|
  111|      1|        wait(for: [finished], timeout: 1)
  112|      1|
  113|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.images(movieID: movieID).url)
  114|      1|    }
  115|       |
  116|      1|    func testFetchVideos_returnsVideoCollection() {
  117|      1|        let movieID = 1
  118|      1|        let expectedResult = VideoCollection(
  119|      1|            id: movieID,
  120|      1|            results: [
  121|      1|                VideoMetadata(
  122|      1|                    id: "2",
  123|      1|                    name: "Video",
  124|      1|                    site: "YouTube",
  125|      1|                    key: "abc123",
  126|      1|                    type: .trailer,
  127|      1|                    size: .s1080
  128|      1|                )
  129|      1|            ]
  130|      1|        )
  131|      1|
  132|      1|        apiClient.response = expectedResult
  133|      1|
  134|      1|        let finished = XCTestExpectation(description: "finished")
  135|      1|        service.fetchVideos(forMovie: movieID)
  136|      1|            .sink(receiveCompletion: { _ in
  137|      1|            }, receiveValue: { result in
  138|       |                XCTAssertEqual(result, expectedResult)
  139|      1|                finished.fulfill()
  140|      1|            })
  141|      1|            .store(in: &cancellables)
  142|      1|
  143|      1|        wait(for: [finished], timeout: 1)
  144|      1|
  145|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.videos(movieID: movieID).url)
  146|      1|    }
  147|      1|
  148|      1|    func testFetchRecommendations_returnsMovies() {
  149|      1|        let movieID = 1
  150|      1|        let expectedResult = MoviePageableList(
  151|      1|            page: 1,
  152|      1|            results: [
  153|      1|                Movie(id: 1, title: "Movie 1"),
  154|      1|                Movie(id: 2, title: "Movie 2"),
  155|      1|                Movie(id: 3, title: "Movie 3")
  156|      1|            ],
  157|      1|            totalResults: 3,
  158|      1|            totalPages: 1
  159|      1|        )
  160|      1|
  161|      1|        apiClient.response = expectedResult
  162|      1|
  163|      1|        let finished = XCTestExpectation(description: "finished")
  164|      1|        service.fetchRecommendations(forMovie: movieID)
  165|      1|            .sink(receiveCompletion: { _ in
  166|      1|            }, receiveValue: { result in
  167|       |                XCTAssertEqual(result, expectedResult)
  168|      1|                finished.fulfill()
  169|      1|            })
  170|      1|            .store(in: &cancellables)
  171|      1|
  172|      1|        wait(for: [finished], timeout: 1)
  173|      1|
  174|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.recommendations(movieID: movieID).url)
  175|      1|    }
  176|      1|
  177|      1|    func testFetchSimilar_returnsMovies() {
  178|      1|        let movieID = 1
  179|      1|        let expectedResult = MoviePageableList(
  180|      1|            page: 1,
  181|      1|            results: [
  182|      1|                Movie(id: 1, title: "Movie 1"),
  183|      1|                Movie(id: 2, title: "Movie 2"),
  184|      1|                Movie(id: 3, title: "Movie 3")
  185|      1|            ],
  186|      1|            totalResults: 3,
  187|      1|            totalPages: 1
  188|      1|        )
  189|      1|
  190|      1|        apiClient.response = expectedResult
  191|      1|
  192|      1|        let finished = XCTestExpectation(description: "finished")
  193|      1|        service.fetchSimilar(toMovie: movieID)
  194|      1|            .sink(receiveCompletion: { _ in
  195|      1|            }, receiveValue: { result in
  196|       |                XCTAssertEqual(result, expectedResult)
  197|      1|                finished.fulfill()
  198|      1|            })
  199|      1|            .store(in: &cancellables)
  200|      1|
  201|      1|        wait(for: [finished], timeout: 1)
  202|      1|
  203|      1|        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.similar(movieID: movieID).url)
  204|      1|    }
  205|      1|
  206|      1|    func testFetchPopular_returnsMovies() {
  207|      1|        let expectedResult = MoviePageableList(
  208|      1|            page: 1,
  209|      1|            results: [
  210|      1|                Movie(id: 1, title: "Movie 1"),
  211|      1|                Movie(id: 2, title: "Movie 2"),
  212|      1|                Movie(id: 3, title: "Movie 3")
  213|      1|            ],
  214|      1|            totalResults: 3,
  215|      1|            totalPages: 1
  216|      1|        )
  217|      1|
  218|      1|        apiClient.response = expectedResult
  219|      1|
  220|      1|        let finished = XCTestExpectation(description: "finished")
  221|      1|        service.fetchPopular()
  222|      1|            .sink(receiveCompletion: { _ in
  223|      1|            }, receiveValue: { result in
  224|       |                XCTAssertEqual(result, expectedResult)
  225|       |                finished.fulfill()
  226|       |            })
  227|       |            .store(in: &cancellables)
  228|       |
  229|       |        wait(for: [finished], timeout: 1)
  230|       |
  231|       |        XCTAssertEqual(apiClient.lastPath, MoviesEndpoint.popular().url)
  232|       |    }
  233|       |
  234|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/People/PeopleEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class PeopleEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testPersonDetailsEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/person/1")!
    8|      1|
    9|      1|        let url = PeopleEndpoint.details(personID: 1).url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testPersonCombinedCreditsEndpoint_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/person/1/combined_credits")!
   16|      1|
   17|      1|        let url = PeopleEndpoint.combinedCredits(personID: 1).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testPersonMovieCreditsEndpoint_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/person/1/movie_credits")!
   24|      1|
   25|      1|        let url = PeopleEndpoint.movieCredits(personID: 1).url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|      1|    func testPersonTVShowCreditsEndpoint_returnsURL() {
   31|      1|        let expectedURL = URL(string: "/person/1/tv_credits")!
   32|      1|
   33|      1|        let url = PeopleEndpoint.tvShowCredits(personID: 1).url
   34|      1|
   35|      1|        XCTAssertEqual(url, expectedURL)
   36|      1|    }
   37|       |
   38|      1|    func testPersonImagesEndpoint_returnsURL() {
   39|      1|        let expectedURL = URL(string: "/person/1/images")!
   40|      1|
   41|      1|        let url = PeopleEndpoint.images(personID: 1).url
   42|      1|
   43|      1|        XCTAssertEqual(url, expectedURL)
   44|      1|    }
   45|       |
   46|      1|    func testPopularPeopleEndpoint_returnsURL() {
   47|      1|        let expectedURL = URL(string: "/person/popular")!
   48|      1|
   49|      1|        let url = PeopleEndpoint.popular().url
   50|      1|
   51|      1|        XCTAssertEqual(url, expectedURL)
   52|      1|    }
   53|       |
   54|      1|    func testPopularPeopleEndpoint_withPage_returnsURL() {
   55|      1|        let expectedURL = URL(string: "/person/popular?page=1")!
   56|      1|
   57|      1|        let url = PeopleEndpoint.popular(page: 1).url
   58|      1|
   59|      1|        XCTAssertEqual(url, expectedURL)
   60|      1|    }
   61|       |
   62|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Search/SearchEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class SearchEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testMultiSearchEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/search/multi?query=Game%20of%20Thrones")!
    8|      1|
    9|      1|        let url = SearchEndpoint.multi(query: "Game of Thrones").url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testMultiSearchEndpoint_withPage_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/search/multi?query=Game%20of%20Thrones&page=2")!
   16|      1|
   17|      1|        let url = SearchEndpoint.multi(query: "Game of Thrones", page: 2).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testMoviesSearchEndpoint_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/search/movie?query=Back%20to%20the%20Future")!
   24|      1|
   25|      1|        let url = SearchEndpoint.movies(query: "Back to the Future").url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|      1|    func testMoviesSearchEndpoint_withYear_returnsURL() {
   31|      1|        let expectedURL = URL(string: "/search/movie?query=Back%20to%20the%20Future&year=1985")!
   32|      1|
   33|      1|        let url = SearchEndpoint.movies(query: "Back to the Future", year: 1985).url
   34|      1|
   35|      1|        XCTAssertEqual(url, expectedURL)
   36|      1|    }
   37|       |
   38|      1|    func testMoviesSearchEndpoint_withPage_returnsURL() {
   39|      1|        let expectedURL = URL(string: "/search/movie?query=Back%20to%20the%20Future&page=2")!
   40|      1|
   41|      1|        let url = SearchEndpoint.movies(query: "Back to the Future", page: 2).url
   42|      1|
   43|      1|        XCTAssertEqual(url, expectedURL)
   44|      1|    }
   45|       |
   46|      1|    func testMoviesSearchEndpoint_withYearAndPage_returnsURL() {
   47|      1|        let expectedURL = URL(string: "/search/movie?query=Back%20to%20the%20Future&year=1985&page=2")!
   48|      1|
   49|      1|        let url = SearchEndpoint.movies(query: "Back to the Future", year: 1985, page: 2).url
   50|      1|
   51|      1|        XCTAssertEqual(url, expectedURL)
   52|      1|    }
   53|       |
   54|      1|    func testTVShowsSearchEndpoint_returnsURL() {
   55|      1|        let expectedURL = URL(string: "/search/tv?query=The%20Boys")!
   56|      1|
   57|      1|        let url = SearchEndpoint.tvShows(query: "The Boys").url
   58|      1|
   59|      1|        XCTAssertEqual(url, expectedURL)
   60|      1|    }
   61|       |
   62|      1|    func testTVShowsSearchEndpoint_withFirstAirDateYear_returnsURL() {
   63|      1|        let expectedURL = URL(string: "/search/tv?query=The%20Boys&first_air_date_year=2020")!
   64|      1|
   65|      1|        let url = SearchEndpoint.tvShows(query: "The Boys", firstAirDateYear: 2020).url
   66|      1|
   67|      1|        XCTAssertEqual(url, expectedURL)
   68|      1|    }
   69|       |
   70|      1|    func testTVShowsSearchEndpoint_withPage_returnsURL() {
   71|      1|        let expectedURL = URL(string: "/search/tv?query=The%20Boys&page=2")!
   72|      1|
   73|      1|        let url = SearchEndpoint.tvShows(query: "The Boys", page: 2).url
   74|      1|
   75|      1|        XCTAssertEqual(url, expectedURL)
   76|      1|    }
   77|       |
   78|      1|    func testTVShowsSearchEndpoint_withYearAndPage_returnsURL() {
   79|      1|        let expectedURL = URL(string: "/search/tv?query=The%20Boys&first_air_date_year=2020&page=2")!
   80|      1|
   81|      1|        let url = SearchEndpoint.tvShows(query: "The Boys", firstAirDateYear: 2020, page: 2).url
   82|      1|
   83|      1|        XCTAssertEqual(url, expectedURL)
   84|      1|    }
   85|       |
   86|      1|    func testPeopleSearchEndpoint_returnsURL() {
   87|      1|        let expectedURL = URL(string: "/search/person?query=Robert%20Downey")!
   88|      1|
   89|      1|        let url = SearchEndpoint.people(query: "Robert Downey").url
   90|      1|
   91|      1|        XCTAssertEqual(url, expectedURL)
   92|      1|    }
   93|       |
   94|      1|    func testPeopleSearchEndpoint_withPage_returnsURL() {
   95|      1|        let expectedURL = URL(string: "/search/person?query=Robert%20Downey&page=2")!
   96|      1|
   97|      1|        let url = SearchEndpoint.people(query: "Robert Downey", page: 2).url
   98|      1|
   99|      1|        XCTAssertEqual(url, expectedURL)
  100|      1|    }
  101|       |
  102|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/TVShowSeasons/TVShowSeasonsEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowSeaonsEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testTVShowSeasonDetailsEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/tv/1/season/2")!
    8|      1|
    9|      1|        let url = TVShowSeasonsEndpoint.details(tvShowID: 1, seasonNumber: 2).url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testTVShowSeasonImagesEndpoint_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/tv/1/season/2/images")!
   16|      1|
   17|      1|        let url = TVShowSeasonsEndpoint.images(tvShowID: 1, seasonNumber: 2).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testTVShowSeasonVideosEndpoint_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/tv/1/season/2/videos")!
   24|      1|
   25|      1|        let url = TVShowSeasonsEndpoint.videos(tvShowID: 1, seasonNumber: 2).url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/TVShows/TVShowsEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TVShowsEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testTVShowDetailsEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/tv/1")!
    8|      1|
    9|      1|        let url = TVShowsEndpoint.details(tvShowID: 1).url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testTVShowCreditsEndpoint_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/tv/1/credits")!
   16|      1|
   17|      1|        let url = TVShowsEndpoint.credits(tvShowID: 1).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testTVShowReviewsEndpoint_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/tv/1/reviews")!
   24|      1|
   25|      1|        let url = TVShowsEndpoint.reviews(tvShowID: 1).url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|      1|    func testTVShowReviewsEndpoint_withPage_returnsURL() {
   31|      1|        let expectedURL = URL(string: "/tv/1/reviews?page=2")!
   32|      1|
   33|      1|        let url = TVShowsEndpoint.reviews(tvShowID: 1, page: 2).url
   34|      1|
   35|      1|        XCTAssertEqual(url, expectedURL)
   36|      1|    }
   37|       |
   38|      1|    func testTVShowImagesEndpoint_returnsURL() {
   39|      1|        let expectedURL = URL(string: "/tv/1/images")!
   40|      1|
   41|      1|        let url = TVShowsEndpoint.images(tvShowID: 1).url
   42|      1|
   43|      1|        XCTAssertEqual(url, expectedURL)
   44|      1|    }
   45|       |
   46|      1|    func testTVShowVideosEndpoint_returnsURL() {
   47|      1|        let expectedURL = URL(string: "/tv/1/videos")!
   48|      1|
   49|      1|        let url = TVShowsEndpoint.videos(tvShowID: 1).url
   50|      1|
   51|      1|        XCTAssertEqual(url, expectedURL)
   52|      1|    }
   53|       |
   54|      1|    func testTVShowRecommendationsEndpoint_returnsURL() {
   55|      1|        let expectedURL = URL(string: "/tv/1/recommendations")!
   56|      1|
   57|      1|        let url = TVShowsEndpoint.recommendations(tvShowID: 1).url
   58|      1|
   59|      1|        XCTAssertEqual(url, expectedURL)
   60|      1|    }
   61|       |
   62|      1|    func testTVShowRecommendationsEndpoint_withPage_returnsURL() {
   63|      1|        let expectedURL = URL(string: "/tv/1/recommendations?page=2")!
   64|      1|
   65|      1|        let url = TVShowsEndpoint.recommendations(tvShowID: 1, page: 2).url
   66|      1|
   67|      1|        XCTAssertEqual(url, expectedURL)
   68|      1|    }
   69|       |
   70|      1|    func testTVShowSimilarEndpoint_returnsURL() {
   71|      1|        let expectedURL = URL(string: "/tv/1/similar")!
   72|      1|
   73|      1|        let url = TVShowsEndpoint.similar(tvShowID: 1).url
   74|      1|
   75|      1|        XCTAssertEqual(url, expectedURL)
   76|      1|    }
   77|       |
   78|      1|    func testTVShowSimilarEndpoint_withPage_returnsURL() {
   79|      1|        let expectedURL = URL(string: "/tv/1/similar?page=2")!
   80|      1|
   81|      1|        let url = TVShowsEndpoint.similar(tvShowID: 1, page: 2).url
   82|      1|
   83|      1|        XCTAssertEqual(url, expectedURL)
   84|      1|    }
   85|       |
   86|      1|    func testTVShowPopularEndpoint_returnsURL() {
   87|      1|        let expectedURL = URL(string: "/tv/popular")!
   88|      1|
   89|      1|        let url = TVShowsEndpoint.popular().url
   90|      1|
   91|      1|        XCTAssertEqual(url, expectedURL)
   92|      1|    }
   93|       |
   94|      1|    func testTVShowPopularEndpoint_withPage_returnsURL() {
   95|      1|        let expectedURL = URL(string: "/tv/popular?page=1")!
   96|      1|
   97|      1|        let url = TVShowsEndpoint.popular(page: 1).url
   98|      1|
   99|      1|        XCTAssertEqual(url, expectedURL)
  100|      1|    }
  101|       |
  102|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Trending/TrendingEndpointTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TrendingEndpointTests: XCTestCase {
    5|       |
    6|      1|    func testTrendingMoviesEndpoint_returnsURL() {
    7|      1|        let expectedURL = URL(string: "/trending/movie/day")!
    8|      1|
    9|      1|        let url = TrendingEndpoint.movies().url
   10|      1|
   11|      1|        XCTAssertEqual(url, expectedURL)
   12|      1|    }
   13|       |
   14|      1|    func testTrendingMoviesEndpoint_withPage_returnsURL() {
   15|      1|        let expectedURL = URL(string: "/trending/movie/day?page=1")!
   16|      1|
   17|      1|        let url = TrendingEndpoint.movies(page: 1).url
   18|      1|
   19|      1|        XCTAssertEqual(url, expectedURL)
   20|      1|    }
   21|       |
   22|      1|    func testTrendingMoviesEndpoint_withTimeWindowDay_returnsURL() {
   23|      1|        let expectedURL = URL(string: "/trending/movie/day")!
   24|      1|
   25|      1|        let url = TrendingEndpoint.movies(timeWindow: .day).url
   26|      1|
   27|      1|        XCTAssertEqual(url, expectedURL)
   28|      1|    }
   29|       |
   30|      1|    func testTrendingMoviesEndpoint_withTimeWindowDayAndPage_returnsURL() {
   31|      1|        let expectedURL = URL(string: "/trending/movie/day?page=1")!
   32|      1|
   33|      1|        let url = TrendingEndpoint.movies(timeWindow: .day, page: 1).url
   34|      1|
   35|      1|        XCTAssertEqual(url, expectedURL)
   36|      1|    }
   37|       |
   38|      1|    func testTrendingMoviesEndpoint_withTimeWindowWeek_returnsURL() {
   39|      1|        let expectedURL = URL(string: "/trending/movie/week")!
   40|      1|
   41|      1|        let url = TrendingEndpoint.movies(timeWindow: .week).url
   42|      1|
   43|      1|        XCTAssertEqual(url, expectedURL)
   44|      1|    }
   45|       |
   46|      1|    func testTrendingMoviesEndpoint_withTimeWindowWeekAndPage_returnsURL() {
   47|      1|        let expectedURL = URL(string: "/trending/movie/week?page=1")!
   48|      1|
   49|      1|        let url = TrendingEndpoint.movies(timeWindow: .week, page: 1).url
   50|      1|
   51|      1|        XCTAssertEqual(url, expectedURL)
   52|      1|    }
   53|       |
   54|      1|    func testTrendingTVShowsEndpoint_returnsURL() {
   55|      1|        let expectedURL = URL(string: "/trending/tv/day")!
   56|      1|
   57|      1|        let url = TrendingEndpoint.tvShows().url
   58|      1|
   59|      1|        XCTAssertEqual(url, expectedURL)
   60|      1|    }
   61|       |
   62|      1|    func testTrendingTVShowsEndpoint_withPage_returnsURL() {
   63|      1|        let expectedURL = URL(string: "/trending/tv/day?page=1")!
   64|      1|
   65|      1|        let url = TrendingEndpoint.tvShows(page: 1).url
   66|      1|
   67|      1|        XCTAssertEqual(url, expectedURL)
   68|      1|    }
   69|       |
   70|      1|    func testTrendingTVShowsEndpoint_withTimeWindowDay_returnsURL() {
   71|      1|        let expectedURL = URL(string: "/trending/tv/day")!
   72|      1|
   73|      1|        let url = TrendingEndpoint.tvShows(timeWindow: .day).url
   74|      1|
   75|      1|        XCTAssertEqual(url, expectedURL)
   76|      1|    }
   77|       |
   78|      1|    func testTrendingTVShowsEndpoint_withTimeWindowDayAndPage_returnsURL() {
   79|      1|        let expectedURL = URL(string: "/trending/tv/day?page=1")!
   80|      1|
   81|      1|        let url = TrendingEndpoint.tvShows(timeWindow: .day, page: 1).url
   82|      1|
   83|      1|        XCTAssertEqual(url, expectedURL)
   84|      1|    }
   85|       |
   86|      1|    func testTrendingTVShowsEndpoint_withTimeWindowWeek_returnsURL() {
   87|      1|        let expectedURL = URL(string: "/trending/tv/week")!
   88|      1|
   89|      1|        let url = TrendingEndpoint.tvShows(timeWindow: .week).url
   90|      1|
   91|      1|        XCTAssertEqual(url, expectedURL)
   92|      1|    }
   93|       |
   94|      1|    func testTrendingTVShowsEndpoint_withTimeWindowWeekAndPage_returnsURL() {
   95|      1|        let expectedURL = URL(string: "/trending/tv/week?page=1")!
   96|      1|
   97|      1|        let url = TrendingEndpoint.tvShows(timeWindow: .week, page: 1).url
   98|      1|
   99|      1|        XCTAssertEqual(url, expectedURL)
  100|      1|    }
  101|       |
  102|      1|    func testTrendingPeopleEndpoint_returnsURL() {
  103|      1|        let expectedURL = URL(string: "/trending/person/day")!
  104|      1|
  105|      1|        let url = TrendingEndpoint.people().url
  106|      1|
  107|      1|        XCTAssertEqual(url, expectedURL)
  108|      1|    }
  109|       |
  110|      1|    func testTrendingPeopleEndpoint_withPage_returnsURL() {
  111|      1|        let expectedURL = URL(string: "/trending/person/day?page=1")!
  112|      1|
  113|      1|        let url = TrendingEndpoint.people(page: 1).url
  114|      1|
  115|      1|        XCTAssertEqual(url, expectedURL)
  116|      1|    }
  117|       |
  118|      1|    func testTrendingPeopleEndpoint_withTimeWindowDay_returnsURL() {
  119|      1|        let expectedURL = URL(string: "/trending/person/day")!
  120|      1|
  121|      1|        let url = TrendingEndpoint.people(timeWindow: .day).url
  122|      1|
  123|      1|        XCTAssertEqual(url, expectedURL)
  124|      1|    }
  125|       |
  126|      1|    func testTrendingPeopleEndpoint_withTimeWindowDayAndPage_returnsURL() {
  127|      1|        let expectedURL = URL(string: "/trending/person/day?page=1")!
  128|      1|
  129|      1|        let url = TrendingEndpoint.people(timeWindow: .day, page: 1).url
  130|      1|
  131|      1|        XCTAssertEqual(url, expectedURL)
  132|      1|    }
  133|       |
  134|      1|    func testTrendingPeopleEndpoint_withTimeWindowWeek_returnsURL() {
  135|      1|        let expectedURL = URL(string: "/trending/person/week")!
  136|      1|
  137|      1|        let url = TrendingEndpoint.people(timeWindow: .week).url
  138|      1|
  139|      1|        XCTAssertEqual(url, expectedURL)
  140|      1|    }
  141|       |
  142|      1|    func testTrendingPeopleEndpoint_withTimeWindowWeekAndPage_returnsURL() {
  143|      1|        let expectedURL = URL(string: "/trending/person/week?page=1")!
  144|      1|
  145|      1|        let url = TrendingEndpoint.people(timeWindow: .week, page: 1).url
  146|      1|
  147|      1|        XCTAssertEqual(url, expectedURL)
  148|      1|    }
  149|       |
  150|       |}

/Users/younga/projects/MoviesApp/TMDb/Tests/TMDbTests/Services/Trending/TrendingTimeWindowFilterTypeTests.swift:
    1|       |@testable import TMDb
    2|       |import XCTest
    3|       |
    4|       |class TrendingTimeWindowFilterTypeTests: XCTestCase {
    5|       |
    6|      1|    func testDay_returnsRawValue() {
    7|      1|        let expectedResult = "day"
    8|      1|
    9|      1|        let result = TrendingTimeWindowFilterType.day.rawValue
   10|      1|
   11|      1|        XCTAssertEqual(result, expectedResult)
   12|      1|    }
   13|       |
   14|      1|    func testWeek_returnsRawValue() {
   15|      1|        let expectedResult = "week"
   16|      1|
   17|      1|        let result = TrendingTimeWindowFilterType.week.rawValue
   18|      1|
   19|      1|        XCTAssertEqual(result, expectedResult)
   20|      1|    }
   21|       |
   22|      1|    func testDefault_returnsRawValue() {
   23|      1|        let expectedResult = "day"
   24|      1|
   25|      1|        let result = TrendingTimeWindowFilterType.default.rawValue
   26|      1|
   27|      1|        XCTAssertEqual(result, expectedResult)
   28|      1|    }
   29|       |
   30|       |}

